<author type="blog" lang="EN" gender="xx" age_group="xx" url="isolvable.blogspot.com">
	<documents count="22">
		<document id="441b7cf08d6dad4476a8e1503cf50907" url="http://isolvable.blogspot.com/2009/01/disk-management-hangs-while-to-virtual.html"><![CDATA[<p>Today I got an external 1TB&#160; drive (made by Western Digital). I needed it to back up my system periodically. When I tried to change partition and file system to NTFS from FAT 32 I ran into a problem. In Administrative Tools -&gt; Computer Management -&gt; Disk Management snap-in panel hanged on &quot;Connecting to Virtual Disk Service...&quot; </p>  <p>After wasting some time searching for answers on the Internet, I decided to run Computer Management as Administrator... Duh... I should have done it right away. So Disk Management snap-in panel opened up fine and I was able to configure partitions on my external hard drive. </p>  <p>In order to run as Administrator right click on the program icon and select &quot;Run as administrator&quot;. </p>  <p><img style="border-right-width: 0px; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" alt="Run_as_administrator" src="http://flgzxq.bay.livefilestore.com/y1p_eeE610CxAyvLi8U6t3ATymDqNuUXKcS10apY9r-CRUNq7VzsmnMNF7Kf2dqA1iW4cfKEdebEJ7CmfTKNBo0DQ?PARTNER=WRITER" width="644" height="408" /> </p>  <p>Have a good new year. </p>  <p>This problem was conformant to ISolvable interface ;)</p>  
]]>
		</document>
		<document id="65157cdbba7f76f7396fa1f89c00ac79" url="http://isolvable.blogspot.com/2009/01/first-post-109-years-to-copy.html"><![CDATA[<p>Well today is my first post in here. I am just trying blog's features. </p>  <p>&#160;<img style="border-right-width: 0px; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" alt="109YearsToCopy" src="http://byfiles.storage.msn.com/y1p8iuksKwT8qFbNkcliIayh8GXHjcBYQmsxvVUpNNKWnyngZATvtjzs6WGeqzmJF9Ib8iiQYDSXd6QcFEdxbQPBg?PARTNER=WRITER" width="420" height="203" /> </p>  <p>Take Care, </p>  <p>Ivan</p>  
]]>
		</document>
		<document id="91a785389357b169f21d63e275e539cb" url="http://isolvable.blogspot.com/2009/01/sql-server-2005-symmetric-encryption.html"><![CDATA[<p>This is a brief summary of SQL Server 2005 symmetric encryption, encryption keys, their hierarchy and usage. At the end of this blog you may find an example script on how to use symmetric key encryption. </p><p></p><h3><strong>Symmetric encryption</strong> </h3><ul><li>Maximum number of characters which can be encrypted in one function is 7943. </li><li>Symmetric encryption decrypts 1000 times faster than asymmetric encryption. </li><li>Symmetric key is stored in the database and could be encrypted by database master key, by certificate and by password. </li><li>If symmetric key was created using the same KEY_SOURCE, ALGORITHM and IDENTITY_VALUE it would be the same, even if created in different databases. </li><li>When database backed up or detached symmetric key is kept in the database. </li><li>When symmetric key is encrypted by password, Triple DES algorithm is used to encrypt symmetric key. Triple DES is weaker than AES. So a key for a stronger encryption is encrypted with a weaker encryption algorithm. It is advised to use certificate to encrypt symmetric key and to use AES 256 algorithm for symmetric encryption. </li><li>AES encryption works only on Windows Server 2003 and later. (I have not tried it on Win XP SP 3, which came out in May 2008, may it has this encryption already.) </li><li>Certificate can be encrypted/decrypted by database master key. If database master key is OPEN, then certificate decryption/encryption is applied automatically when you OPEN symmetric key. </li><li>To OPEN database master key a user must have CONTROL permissions in the database. </li></ul><p></p><h3><strong>Database Master Keys.</strong> </h3><p><em>(This is where different articles say different things, so I was trying to give priority to the article with the later date and my experience.)</em> </p><p><a target="_blank" href="http://msdn.microsoft.com/en-us/library/ms189586%28SQL.90%29.aspx">Here</a> is an MSDN article about SQL Server 2005 encryption hierarchy. </p><p>And below is an overview of the encryption hierarchy. </p><p align="center"><a href="http://byfiles.storage.msn.com/y1piElhaf3cYcoQxdIcBo-MfeBBeRJX-DLCJ8rhq4LQvxRGqsJVFsnztG5fdrX67UXKeAkM7Kuw6T-cW1xx8QnSuQ?PARTNER=WRITER"><img style="BORDER-RIGHT-WIDTH: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px" border="0" alt="SQL2005_encryption_hierarchy" src="http://byfiles.storage.msn.com/y1pKlEwJBjoLDy8ijLcmIzVy4NxlT9sia9PnWMx3VlCUhWFZhJDKJGPNGsmUSzh7pnrVJgd7x0c1txMpL8_kV_YpA?PARTNER=WRITER" width="477" height="431" /></a> </p><p align="left"><a target="_blank" href="http://msdn.microsoft.com/en-us/library/ms189586.aspx">Here</a> is a similar MSDN article only for SQL Server <strong>2008</strong>. </p><p align="left">And an accompanying MSDN diagram for permissions hierarchy. </p><p align="center"><a href="http://byfiles.storage.msn.com/y1p3qrAw5hoUySYvuu9pz025cNBIo_Re7bJ7YvZdGv8S-ndKKsqkMcOp-ylq9H5ZHrF2TYplHM5z_l5HzVfoAvycw?PARTNER=WRITER"><img style="BORDER-RIGHT-WIDTH: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px" border="0" alt="SQL2005_permissions_hierarchy" src="http://4gdkga.bay.livefilestore.com/y1pto2IuiCZIcurHIQw-OHI3tO12NIpasz2E0b8gzs1M6APmp8WRy0C3ejDqxeWO8pxKs5JBbPO7W63f9cMu1arDA?PARTNER=WRITER" width="535" height="693" /></a> </p><p align="left"><a target="_blank" href="http://msdn.microsoft.com/en-us/library/ms191465%28SQL.90%29.aspx">Here</a> is original MSDN article. </p><p align="left">When I was writing encryption script for our database I put these two diagrams on the wall in front of me, it helps :). </p><ul><li>Database Master Key (DMK) can be created with encryption by PASSWORD only. </li><li>DMK is a symmetric key (according to may 2008 article and public/private key according to 2007 article, so I would go with 2008 J). </li><li>DMK can be backed up. </li><li>Other encryption can be added to DMK like so </li></ul><blockquote><p><span style="COLOR: rgb(0,0,255)">ALTER MASTER KEY ADD ENCRYPTION BY SERVICE MASTER KEY;</span></p></blockquote><ul><li>it is recommended to drop encryption by password and back up the key immediately before using it. Like so : </li></ul><blockquote><p><span style="COLOR: rgb(0,0,255)">ALTER MASTER KEY DROP ENCRYPTION BY PASSWORD = 'whatever the original password is';</span></p></blockquote><ul><li>the only problem with that is, IT DOES NOT WORK. MSDN says that a key can not be without any encryption, that is why the error message is thrown, but even when I added encryption by Service Master Key it did not help. Because SMK encryption is in master database only and thus when dropping password encryption it tries to drop it from the original database leaving key unencrypted, which is not allowed. So I have to add some other encryption to DMK before dropping password encryption. </li><li>What it means is that the key can be accessed in the following 3 ways (assuming the database is restored from FULL database back up or original MDF file is attached.) <ul><li>When database is restored on the computer and SQL instance where the original key was created. </li><li>When database is restored under the same SQL Server service account which was used when creating original key. </li><li>When database is restored on a completely different computer and under very different service account, but a correct password for DMK is provided. </li></ul></li><li>When you <span style="COLOR: rgb(0,0,255)">ADD ENCRYPTION BY SERVICE MASTER KEY</span> to DMK it creates a copy of DMK in master database and SQL Server Service account and SQL Server computer instance identity is used to encrypt the key. Thus there are 2 copies of DMK, one in the database itself and encrypted by password and another in master database and encrypted by SMK. When SMK encryption is added for DMK, there is no need to open DMK by password, in fact the whole command can be omitted, DMK gets unencrypted automatically. Which is what we want, because we don’t want to provide DMK password in our scripts and if it changes we would not want to update password in all T-SQL code (in a wrapper function in our case, but still we don’t want to make it visible even there). </li><li>No matter how easy it is to decrypt the data I would still create a back up for database master key and put in a safe somewhere. Or Print and store securely all the parameters required to recreate symmetric key. </li></ul><ul><li>The <strong>is_master_key_encrypted_by_server column</strong> of the <strong>sys.databases</strong> catalog view in <strong>master</strong> database indicates whether the database master key is encrypted by the service master key. </li><li>Information about the database master key is visible in the <strong>sys.symmetric_keys</strong> catalog view. </li><li>Please check that before dropping any other encryptions for DMK. If DMK is not encrypted by server (SMK) then it is better to know how to open DMK manually or add SMK encryption to it. </li></ul><p>I looked up the syntax for ALTER MASTER KEY and the only encryptions which can be added are SMK and password: </p><div style="BORDER-BOTTOM: gray 1px solid; BORDER-LEFT: gray 1px solid; PADDING-BOTTOM: 4px; LINE-HEIGHT: 12pt; BACKGROUND-COLOR: rgb(244,244,244); MARGIN: 20px 0px 10px; PADDING-LEFT: 4px; WIDTH: 97.81%; PADDING-RIGHT: 4px; HEIGHT: 224px; OVERFLOW: auto; BORDER-TOP: gray 1px solid; CURSOR: text; BORDER-RIGHT: gray 1px solidfont-size:8pt;" ><pre style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: rgb(244,244,244); MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 98.78%; PADDING-RIGHT: 0px; BORDER-TOP-STYLE: none; HEIGHT: 186px; BORDER-LEFT-STYLE: none; OVERFLOW: visiblefont-size:8pt;color:black;"  >ALTER MASTER KEY &lt;alter_option&gt;<br /><br />&lt;alter_option&gt; ::=<br />  &lt;regenerate_option&gt;  &lt;encryption_option&gt;<br /><br />&lt;regenerate_option&gt; ::=<br />  [ FORCE ] REGENERATE WITH ENCRYPTION BY PASSWORD = <span style="COLOR: rgb(0,96,128)">'password'</span><br /><br />&lt;encryption_option&gt; ::=<br />  ADD ENCRYPTION BY [ SERVICE MASTER KEY  PASSWORD = <span style="COLOR: rgb(0,96,128)">'password'</span> ]<br /><br />  DROP ENCRYPTION BY [ SERVICE MASTER KEY  PASSWORD = <span style="COLOR: rgb(0,96,128)">'password'</span> ]</pre><br /><br /></div><br />But I still don’t get why they have DROP password if it does not work? Some articles say that SMK always has password encryption in case database gets detached and needs to be restored. May be this syntax is for the future release. Who knows, it was in SQL Server 2005 books online. The REGENERATE option re-creates the database master key and all the keys it protects. The keys are first decrypted with the old master key, and then encrypted with the new master key. This resource-intensive operation should be scheduled during a period of low demand, unless the master key has been compromised. So for now we are going to have a password for DMK, unless something new comes up.<br /><br /><h3><strong>Below are the encryption script and examples on how to use it.</strong></h3><p><strong>Encryption script.</strong></p><p><strong><span style="COLOR: rgb(255,0,0)">Please test variables' sizes before going into production to make sure that data is not truncated.</span></strong><br /><br /><div style="BORDER-BOTTOM: gray 1px solid; BORDER-LEFT: gray 1px solid; PADDING-BOTTOM: 4px; LINE-HEIGHT: 12pt; BACKGROUND-COLOR: rgb(244,244,244); MARGIN: 20px 0px 10px; PADDING-LEFT: 4px; WIDTH: 97.67%; PADDING-RIGHT: 4px; HEIGHT: 227px; OVERFLOW: auto; BORDER-TOP: gray 1px solid; CURSOR: text; BORDER-RIGHT: gray 1px solidfont-size:8pt;" ><br /><pre style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: rgb(244,244,244); MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; BORDER-TOP-STYLE: none; BORDER-LEFT-STYLE: none; OVERFLOW: visiblefont-size:8pt;color:black;"  ><p><span style="COLOR: rgb(0,128,0)">-- =============================================</span><br /><span style="COLOR: rgb(0,128,0)">-- Author:        Ivan A<br />-- Copyright 2009 by ISolvable - <a href="http://isolved.spaces.live.com/">http://isolved.spaces.live.com/</a></span><br /><span style="COLOR: rgb(0,128,0)">-- Create date: 07/21/2008</span><br /><span style="COLOR: rgb(0,128,0)">-- Description:    PLEASE DO NOT STORE THIS SCRIPT IN PRODUCTION DATABASE. </span><br /><span style="COLOR: rgb(0,128,0)">-- This is a script which creates database keys. </span><br /><span style="COLOR: rgb(0,128,0)">-- Passwords need to be changed in production.</span><br /><span style="COLOR: rgb(0,128,0)">-- =============================================</span><br /><span style="COLOR: rgb(0,0,255)">ALTER</span> <span style="COLOR: rgb(0,0,255)">PROCEDURE</span> [dbo].[CREATE_KEYS]<br />  <span style="COLOR: rgb(0,128,0)">-- Add the parameters for the stored procedure here</span><br /><br /><span style="COLOR: rgb(0,0,255)">AS</span><br /><span style="COLOR: rgb(0,0,255)">BEGIN</span><br /><br />  <span style="COLOR: rgb(0,128,0)">-- this to prevent accidental executions of this stored procedure and to inform a user. </span><br />  <span style="COLOR: rgb(0,0,255)">RAISERROR</span> (N<span style="COLOR: rgb(0,96,128)">'This procedure cannot be executed. Please examine the procedure code first!'</span>,16,1)<br /><br />  /*&lt;DO_NOT_EXECUTE,,*/--THIS STORPROC&gt;<br /><br />  <span style="COLOR: rgb(0,128,0)">-- BACKUP KEYS. </span><br />  <span style="COLOR: rgb(0,128,0)">-- DO NOT STORE THIS CODE IN PRODUCTION. </span><br />  <span style="COLOR: rgb(0,128,0)">-- CODE WITH PASSWORDS TO BE STORED IN A SAFE(TBD).</span><br />  <span style="COLOR: rgb(0,128,0)">-- BAKUP KEYS TO BE STORED IN A SAFE(TBD). </span><br />  <span style="COLOR: rgb(0,128,0)">-- THIS CODE HAS ONLY MOCK UP PASSWORD. </span><br />  <span style="COLOR: rgb(0,128,0)">-- CHANGE PASSWORDS BEFORE USE IN PRODUCTION. </span><br />  <span style="COLOR: rgb(0,128,0)">-- DO NOT RECREATE KEYS IF SOME DATA IS ALREADY ENCRYPTED. </span><br />  <span style="COLOR: rgb(0,128,0)">-- DECRYPT DATA FIRST. RECREATE KEYS. THEN ENCRYPT DATA WITH NEW KEYS. </span><br />  <span style="COLOR: rgb(0,128,0)">-- BACKUP NEW KEYS.</span><br />  <span style="COLOR: rgb(0,128,0)">-- THE CODE FOR THIS PROCEDURE WOULD BE COMMENTED OUT, TO PREVENT ACCIDENTAL EXECUTION. </span><br /><br /><br />  <span style="COLOR: rgb(0,128,0)">-- PRESS CTRL-SHIFT-M and fill in the appropriate values.</span><br />  <span style="COLOR: rgb(0,128,0)">-- THEN EXECUTE CODE SEPARATELY FROM STORED PROCEDURE STATEMENTS. </span><br /><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,128,0)">-- Author:        &lt;Author,,Name&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Create date: &lt;Create Date,,&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br /><br />  /*<br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    -- this creates a Database Master Key (DMK) in the original database</span><br />  <span style="COLOR: rgb(0,128,0)">-- and encrypts MASTER KEY by password. </span><br />  <span style="COLOR: rgb(0,128,0)">-- MUST MEET WINDOWS PASSWORD POLICY. </span><br />  <span style="COLOR: rgb(0,0,255)">CREATE</span> MASTER <span style="COLOR: rgb(0,0,255)">KEY</span> ENCRYPTION <span style="COLOR: rgb(0,0,255)">BY</span> PASSWORD = <span style="COLOR: rgb(0,96,128)">'&lt;master_key_password,,password&gt;'</span><br />  <br />  <span style="COLOR: rgb(0,128,0)">-- this copies DMK into master database</span><br />  <span style="COLOR: rgb(0,128,0)">-- and encrypts DMK using SQL Server Service Master Key.</span><br />  <span style="COLOR: rgb(0,128,0)">-- After this statement is executed DMK would be opened/decrypted automatically.</span><br />  <span style="COLOR: rgb(0,0,255)">ALTER</span> MASTER <span style="COLOR: rgb(0,0,255)">KEY</span> <span style="COLOR: rgb(0,0,255)">ADD</span> ENCRYPTION <span style="COLOR: rgb(0,0,255)">BY</span> SERVICE MASTER <span style="COLOR: rgb(0,0,255)">KEY</span><br /><br />  <span style="COLOR: rgb(0,128,0)">-- this exports DMK into a file (ON THE SERVER NOT ON LOCAL COMPUTER)</span><br />  <span style="COLOR: rgb(0,128,0)">-- and encrypts it using a password. </span><br />  <span style="COLOR: rgb(0,128,0)">-- store this file in a safe and secure location. </span><br />  <span style="COLOR: rgb(0,0,255)">BACKUP</span> MASTER <span style="COLOR: rgb(0,0,255)">KEY</span> <span style="COLOR: rgb(0,0,255)">TO</span> <span style="COLOR: rgb(0,0,255)">FILE</span> = <span style="COLOR: rgb(0,96,128)">'&lt;Back_up_file_path_on_server,,c:	emp&gt;'</span><br />      ENCRYPTION <span style="COLOR: rgb(0,0,255)">BY</span> PASSWORD = <span style="COLOR: rgb(0,96,128)">'&lt;master_key_password,,password&gt;'</span><br /><br />  <span style="COLOR: rgb(0,128,0)">-- this creates certificates which protects database encryption keys (symmetric or asymmetric).</span><br />  <span style="COLOR: rgb(0,0,255)">CREATE</span> CERTIFICATE [&lt;Cert_Name,,CTrack_Cert&gt;] <span style="COLOR: rgb(0,0,255)">WITH</span> SUBJECT = <span style="COLOR: rgb(0,96,128)">'&lt;Certificate_Subject,,Key Protection&gt;'</span><br /><br />  <span style="COLOR: rgb(0,128,0)">-- this creates symmetric key and ecnrypts it with a certificate. </span><br />  <span style="COLOR: rgb(0,0,255)">CREATE</span> SYMMETRIC <span style="COLOR: rgb(0,0,255)">KEY</span> [&lt;Symmetric_Key_Name,,CTrack_Sym_Key&gt;] <span style="COLOR: rgb(0,0,255)">WITH</span><br />      ALGORITHM = &lt;Symmetric_Algorithm,,AES_256&gt;<br />      ENCRYPTION <span style="COLOR: rgb(0,0,255)">BY</span> CERTIFICATE [&lt;Cert_Name,,CTrack_Cert&gt;];<br /><br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    */</span><br />  /*<br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    -- Stored Procedures to be created. </span><br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    SET ANSI_NULLS ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,0,255)">SET</span> QUOTED_IDENTIFIER <span style="COLOR: rgb(0,0,255)">ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,128,0)">-- Author:        &lt;Author,,Name&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Create date: &lt;Create Date,,&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Description:    This procedure opens current symmetric key.</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,0,255)">CREATE</span> <span style="COLOR: rgb(0,0,255)">PROCEDURE</span> [dbo].[usp_Sys_Open_Key]<br />      <span style="COLOR: rgb(0,128,0)">-- Add the parameters for the stored procedure here</span><br /><br />  <span style="COLOR: rgb(0,0,255)">AS</span><br />  <span style="COLOR: rgb(0,0,255)">BEGIN</span><br />      <span style="COLOR: rgb(0,128,0)">-- This is to be called subsequently with other stored procedures</span><br />      <span style="COLOR: rgb(0,128,0)">-- within the same connection session. </span><br />      <span style="COLOR: rgb(0,128,0)">-- As soon as connection session is closed the key is also closed. </span><br />      <span style="COLOR: rgb(0,128,0)">-- This opens a key defined in usp_CREATE_KEYS script (not in production)        </span><br />      <span style="COLOR: rgb(0,0,255)">OPEN</span> SYMMETRIC <span style="COLOR: rgb(0,0,255)">KEY</span> [&lt;Symmetric_Key_Name,,CTrack_Sym_Key&gt;]<br />      DECRYPTION <span style="COLOR: rgb(0,0,255)">BY</span> CERTIFICATE [&lt;Cert_Name,,CTrack_Cert&gt;]<br />  <span style="COLOR: rgb(0,0,255)">END</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br /><br />  <span style="COLOR: rgb(0,0,255)">SET</span> ANSI_NULLS <span style="COLOR: rgb(0,0,255)">ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,0,255)">SET</span> QUOTED_IDENTIFIER <span style="COLOR: rgb(0,0,255)">ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,128,0)">-- Author:        &lt;Author,,Name&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Create date: &lt;Create Date,,&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Description:    This procedure closes current symmetric key.</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,0,255)">CREATE</span> <span style="COLOR: rgb(0,0,255)">PROCEDURE</span> [dbo].[usp_Sys_Close_Key]<br />      <span style="COLOR: rgb(0,128,0)">-- Add the parameters for the stored procedure here</span><br /><br />  <span style="COLOR: rgb(0,0,255)">AS</span><br />  <span style="COLOR: rgb(0,0,255)">BEGIN</span><br />      <span style="COLOR: rgb(0,128,0)">-- This is to be called subsequently with other stored procedures</span><br />      <span style="COLOR: rgb(0,128,0)">-- within the same connection session. </span><br />      <span style="COLOR: rgb(0,128,0)">-- As soon as connection session is closed the key is also closed. </span><br />      <span style="COLOR: rgb(0,128,0)">-- This opens a key defined in usp_CREATE_KEYS script (not in production)        </span><br />      <span style="COLOR: rgb(0,0,255)">CLOSE</span> SYMMETRIC <span style="COLOR: rgb(0,0,255)">KEY</span> [&lt;Symmetric_Key_Name,,CTrack_Sym_Key&gt;]<br />  <span style="COLOR: rgb(0,0,255)">END</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    */</span><br />  /*<br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    -- Functions to be created.</span><br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    SET ANSI_NULLS ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,0,255)">SET</span> QUOTED_IDENTIFIER <span style="COLOR: rgb(0,0,255)">ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,128,0)">-- Author:        &lt;Author,,Name&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Create date: &lt;Create Date,,&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Description:    This function encrypts a string using database symmetric key</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,0,255)">CREATE</span> <span style="COLOR: rgb(0,0,255)">FUNCTION</span> [dbo].[udf_Encrypt]<br />  (<br />      <span style="COLOR: rgb(0,128,0)">-- Add the parameters for the function here</span><br />      @text <span style="COLOR: rgb(0,0,255)">varchar</span>(7944)<br />  )<br />  <span style="COLOR: rgb(0,0,255)">RETURNS</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(7988)<br />  <span style="COLOR: rgb(0,0,255)">AS</span><br />  <span style="COLOR: rgb(0,0,255)">BEGIN</span><br /><br />      <span style="COLOR: rgb(0,128,0)">-- if provided text length is greater than what can be encrypted than </span><br />      <span style="COLOR: rgb(0,128,0)">-- an error message is thrown to prevent truncation. </span><br />      <span style="COLOR: rgb(0,0,255)">if</span> len(@text) &gt; 7943<br />      <span style="COLOR: rgb(0,0,255)">begin</span><br />          <span style="COLOR: rgb(0,0,255)">DECLARE</span> @temp <span style="COLOR: rgb(0,0,255)">as</span> <span style="COLOR: rgb(0,0,255)">int</span><br />              <span style="COLOR: rgb(0,0,255)">RETURN</span> (1 + <span style="COLOR: rgb(0,96,128)">'Argument text should be less than or equal to 7943'</span>)<br />      <span style="COLOR: rgb(0,0,255)">end</span><br /><br />      <span style="COLOR: rgb(0,128,0)">-- Declare the return variable here</span><br />      <span style="COLOR: rgb(0,0,255)">DECLARE</span> @<span style="COLOR: rgb(0,0,255)">Result</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(7988)<br /><br />      <span style="COLOR: rgb(0,128,0)">-- opening and closing key is resource intensive operation</span><br />      <span style="COLOR: rgb(0,128,0)">-- if encryption needs to be applied multiple times please </span><br />      <span style="COLOR: rgb(0,128,0)">-- use usp_Sys_Open_Key and usp_Sys_Close_Key stored procedures</span><br />      <span style="COLOR: rgb(0,128,0)">-- and call encryptbykey function directly from your code. </span><br />      <span style="COLOR: rgb(0,128,0)">-- usp_Sys_Open_Key procedure does the following.  </span><br />      --<span style="COLOR: rgb(0,0,255)">OPEN</span> SYMMETRIC <span style="COLOR: rgb(0,0,255)">KEY</span> [&lt;Symmetric_Key_Name,,CTrack_Sym_Key&gt;]<br />      --DECRYPTION <span style="COLOR: rgb(0,0,255)">BY</span> CERTIFICATE [&lt;Cert_Name,,CTrack_Cert&gt;];<br /><br />      <span style="COLOR: rgb(0,128,0)">-- use encrypt function </span><br />      <span style="COLOR: rgb(0,0,255)">SELECT</span> @<span style="COLOR: rgb(0,0,255)">Result</span> = encryptbykey(key_guid(<span style="COLOR: rgb(0,96,128)">'&lt;Symmetric_Key_Name,,CTrack_Sym_Key&gt;'</span>),@text)<br /><br />      <span style="COLOR: rgb(0,128,0)">-- close symmetric key using usp_Sys_Open_Key procedure,</span><br />      <span style="COLOR: rgb(0,128,0)">-- which  does the following.  </span><br />      <span style="COLOR: rgb(0,128,0)">-- CLOSE SYMMETRIC KEY [&lt;Symmetric_Key_Name,,CTrack_Sym_Key&gt;]</span><br /><br />      <span style="COLOR: rgb(0,128,0)">-- Return the result of the function</span><br />      <span style="COLOR: rgb(0,0,255)">RETURN</span> @<span style="COLOR: rgb(0,0,255)">Result</span><br /><br />  <span style="COLOR: rgb(0,0,255)">END</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br /><br />  <span style="COLOR: rgb(0,0,255)">SET</span> ANSI_NULLS <span style="COLOR: rgb(0,0,255)">ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,0,255)">SET</span> QUOTED_IDENTIFIER <span style="COLOR: rgb(0,0,255)">ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,128,0)">-- Author:        &lt;Author,,Name&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Create date: &lt;Create Date,,&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Description:    This function decrypts a string using database symmetric key</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,0,255)">CREATE</span> <span style="COLOR: rgb(0,0,255)">FUNCTION</span> udf_Decrypt<br />  (<br />      <span style="COLOR: rgb(0,128,0)">-- Add the parameters for the function here</span><br />      @text <span style="COLOR: rgb(0,0,255)">varchar</span>(7988)<br />  )<br />  <span style="COLOR: rgb(0,0,255)">RETURNS</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(7943)<br />  <span style="COLOR: rgb(0,0,255)">AS</span><br />  <span style="COLOR: rgb(0,0,255)">BEGIN</span><br /><br />      <span style="COLOR: rgb(0,128,0)">-- Declare the return variable here</span><br />      <span style="COLOR: rgb(0,0,255)">DECLARE</span> @<span style="COLOR: rgb(0,0,255)">Result</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(7943)<br /><br />      <span style="COLOR: rgb(0,128,0)">-- opening and closing key is resource intensive operation</span><br />      <span style="COLOR: rgb(0,128,0)">-- if encryption needs to be applied multiple times please </span><br />      <span style="COLOR: rgb(0,128,0)">-- use usp_Sys_Open_Key and usp_Sys_Close_Key stored procedures</span><br />      <span style="COLOR: rgb(0,128,0)">-- and call encryptbykey function directly from your code. </span><br />      <span style="COLOR: rgb(0,128,0)">-- usp_Sys_Open_Key procedure does the following.  </span><br />      --<span style="COLOR: rgb(0,0,255)">OPEN</span> SYMMETRIC <span style="COLOR: rgb(0,0,255)">KEY</span> [&lt;Symmetric_Key_Name,,CTrack_Sym_Key&gt;]<br />      --DECRYPTION <span style="COLOR: rgb(0,0,255)">BY</span> CERTIFICATE [&lt;Cert_Name,,CTrack_Cert&gt;];<br /><br />      <span style="COLOR: rgb(0,128,0)">-- use encrypt function </span><br />      <span style="COLOR: rgb(0,0,255)">SELECT</span> @<span style="COLOR: rgb(0,0,255)">Result</span> = decryptbykey(@text)<br /><br />      <span style="COLOR: rgb(0,128,0)">-- close symmetric key using usp_Sys_Open_Key procedure,</span><br />      <span style="COLOR: rgb(0,128,0)">-- which  does the following.  </span><br />      <span style="COLOR: rgb(0,128,0)">-- CLOSE SYMMETRIC KEY [&lt;Symmetric_Key_Name,,CTrack_Sym_Key&gt;]  </span><br /><br />      <span style="COLOR: rgb(0,128,0)">-- Return the result of the function</span><br />      <span style="COLOR: rgb(0,0,255)">RETURN</span> @<span style="COLOR: rgb(0,0,255)">Result</span><br /><br />  <span style="COLOR: rgb(0,0,255)">END</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br /><br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    */</span><br />  /*<br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    -- Other ways to use </span><br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br />  <span style="COLOR: rgb(0,128,0)">-- you may use the following command to open the key, </span><br />  <span style="COLOR: rgb(0,128,0)">-- however the wrapper procedure would be provided, to avoid </span><br />  <span style="COLOR: rgb(0,128,0)">-- changing key names in multiple code files. </span><br />  <span style="COLOR: rgb(0,0,255)">OPEN</span> SYMMETRIC <span style="COLOR: rgb(0,0,255)">KEY</span> [&lt;Symmetric_Key_Name,,CTrack_Sym_Key&gt;]<br />      DECRYPTION <span style="COLOR: rgb(0,0,255)">BY</span> CERTIFICATE [&lt;Cert_Name,,CTrack_Cert&gt;];<br /><br />  <span style="COLOR: rgb(0,128,0)">-- you may use the following command to close the key. </span><br />  <span style="COLOR: rgb(0,0,255)">CLOSE</span> SYMMETRIC <span style="COLOR: rgb(0,0,255)">KEY</span> [&lt;Symmetric_Key_Name,,CTrack_Sym_Key&gt;]<br /><br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    */</span><br />  /*<br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    -- Procedures to be called from .NET  </span><br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    SET ANSI_NULLS ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,0,255)">SET</span> QUOTED_IDENTIFIER <span style="COLOR: rgb(0,0,255)">ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,128,0)">-- Author:        &lt;Author,,Name&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Create date: &lt;Create Date,,&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Description:    This procedure is for use from .NET,</span><br />  <span style="COLOR: rgb(0,128,0)">-- it encrypts plain text using database symmetric key.</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,0,255)">CREATE</span> <span style="COLOR: rgb(0,0,255)">PROCEDURE</span> [dbo].[usp_Encrypt_BySymKey]<br />      <span style="COLOR: rgb(0,128,0)">-- Add the parameters for the stored procedure here</span><br />      @plaintext <span style="COLOR: rgb(0,0,255)">as</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(1000)<br />  <span style="COLOR: rgb(0,0,255)">AS</span><br />  <span style="COLOR: rgb(0,0,255)">BEGIN</span><br /><br />      <span style="COLOR: rgb(0,128,0)">-- the size of the encrypted string </span><br />      <span style="COLOR: rgb(0,128,0)">-- should be at least 60 bytes larger than the original plain text.</span><br />      <span style="COLOR: rgb(0,0,255)">DECLARE</span> @encrypted <span style="COLOR: rgb(0,0,255)">as</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(1060)<br />  <br />      <span style="COLOR: rgb(0,128,0)">-- Open symmetric key </span><br />      <span style="COLOR: rgb(0,0,255)">Exec</span> dbo.usp_Sys_Open_Key<br />  <br />      <span style="COLOR: rgb(0,128,0)">-- encrypt plaint text </span><br />      <span style="COLOR: rgb(0,0,255)">SET</span> @encrypted = dbo.udf_Encrypt(@plaintext)<br />  <br />      <span style="COLOR: rgb(0,128,0)">-- close symmetric key </span><br />      <span style="COLOR: rgb(0,0,255)">Exec</span> dbo.usp_Sys_Close_Key<br /><br />      <span style="COLOR: rgb(0,0,255)">select</span> @encrypted<br />  <span style="COLOR: rgb(0,0,255)">END</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br /><br />  <span style="COLOR: rgb(0,0,255)">SET</span> ANSI_NULLS <span style="COLOR: rgb(0,0,255)">ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,0,255)">SET</span> QUOTED_IDENTIFIER <span style="COLOR: rgb(0,0,255)">ON</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,128,0)">-- Author:        &lt;Author,,Name&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Create date: &lt;Create Date,,&gt;</span><br />  <span style="COLOR: rgb(0,128,0)">-- Description:    This procedure is for use from .NET,</span><br />  <span style="COLOR: rgb(0,128,0)">-- it decrypts into plain text using database symmetric key.</span><br />  <span style="COLOR: rgb(0,128,0)">-- =============================================</span><br />  <span style="COLOR: rgb(0,0,255)">CREATE</span> <span style="COLOR: rgb(0,0,255)">PROCEDURE</span> [dbo].[usp_Decrypt_BySymKey]<br />      <span style="COLOR: rgb(0,128,0)">-- Add the parameters for the stored procedure here</span><br />      @encrypted <span style="COLOR: rgb(0,0,255)">as</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(1060)<br />  <span style="COLOR: rgb(0,0,255)">AS</span><br />  <span style="COLOR: rgb(0,0,255)">BEGIN</span><br /><br />      <span style="COLOR: rgb(0,128,0)">-- the size of the encrypted string </span><br />      <span style="COLOR: rgb(0,128,0)">-- should be at least 60 bytes larger than the original plain text.</span><br />      <span style="COLOR: rgb(0,0,255)">DECLARE</span> @decrypted <span style="COLOR: rgb(0,0,255)">as</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(1060)<br />  <br />      <span style="COLOR: rgb(0,128,0)">-- Open symmetric key </span><br />      <span style="COLOR: rgb(0,0,255)">Exec</span> dbo.usp_Sys_Open_Key<br />  <br />      <span style="COLOR: rgb(0,128,0)">-- encrypt plaint text </span><br />      <span style="COLOR: rgb(0,0,255)">SET</span> @decrypted = dbo.udf_Decrypt(@encrypted)<br />  <br />      <span style="COLOR: rgb(0,128,0)">-- close symmetric key </span><br />      <span style="COLOR: rgb(0,0,255)">Exec</span> dbo.usp_Sys_Close_Key<br /><br />      <span style="COLOR: rgb(0,0,255)">select</span> @decrypted<br />  <span style="COLOR: rgb(0,0,255)">END</span><br />  <span style="COLOR: rgb(0,0,255)">GO</span><br /><br />  --------------------------------------------------------------------------------------------<span style="COLOR: rgb(0,128,0)">--</span><br /><span style="COLOR: rgb(0,128,0)">    */</span><br /><br />END</p></pre><br /><br /></div><p></p><p><strong>Summary of instructions</strong> on how to use procedures and functions created by the above script. Detailed instructions are in the script comments above. </p><p>The script creates 2 stored procedures and 2 functions. <ul><li>usp_Sys_Open_Key</li><li>usp_Sys_Close_Key</li><li>udf_Encrypt</li><li>udf_Decrypt</li></ul><p></p>When setting up a database, you would need: <ul><li>to open this script.</li><li>Press CTRL-SHIFT-M</li><li>Fill in the required parameters.</li><li>Make sure data is NOT encrypted before recreating the keys.</li><li>Run code to create stored procedures and functions. </li><br /></ul><strong>Here is an example</strong> on how to use these things:<br /><br /><div style="BORDER-BOTTOM: gray 1px solid; BORDER-LEFT: gray 1px solid; PADDING-BOTTOM: 4px; LINE-HEIGHT: 12pt; BACKGROUND-COLOR: rgb(244,244,244); MARGIN: 20px 0px 10px; PADDING-LEFT: 4px; WIDTH: 96.61%; PADDING-RIGHT: 4px; HEIGHT: 694px; OVERFLOW: auto; BORDER-TOP: gray 1px solid; CURSOR: text; BORDER-RIGHT: gray 1px solidfont-size:8pt;" ><br /><br /><pre style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: rgb(244,244,244); MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 99.05%; PADDING-RIGHT: 0px; BORDER-TOP-STYLE: none; HEIGHT: 671px; BORDER-LEFT-STYLE: none; OVERFLOW: visiblefont-size:8pt;color:black;"  ><span style="COLOR: rgb(0,0,255)">DECLARE</span>       @original <span style="COLOR: rgb(0,0,255)">as</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(100)<br />          <span style="COLOR: rgb(0,128,0)">-- make sure variable for encrypted text is at least 64 bytes larger, or better double it. </span><br />          , @encrypted <span style="COLOR: rgb(0,0,255)">as</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(200)<br />          , @decrypted <span style="COLOR: rgb(0,0,255)">as</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(100)<br /><br /><span style="COLOR: rgb(0,128,0)">-- creating original text</span><br /><span style="COLOR: rgb(0,0,255)">SET</span> @original = <span style="COLOR: rgb(0,96,128)">'some text to encrypt'</span><br /><br /><span style="COLOR: rgb(0,0,255)">SELECT</span> @original, len(@original)<br /><br /><br /><span style="COLOR: rgb(0,128,0)">-- open symmetric key</span><br /><span style="COLOR: rgb(0,0,255)">Exec</span> usp_Sys_Open_Key<br /><br /><span style="COLOR: rgb(0,128,0)">-- Encrypt text, make sure you do not trim. </span><br /><span style="COLOR: rgb(0,128,0)">-- Do not cast without specifying a size. </span><br /><span style="COLOR: rgb(0,0,255)">SET</span> @encrypted = dbo.usp_Encrypt(@original)<br /><br /><span style="COLOR: rgb(0,0,255)">SELECT</span> len(<span style="COLOR: rgb(0,0,255)">cast</span>(@encrypted <span style="COLOR: rgb(0,0,255)">as</span> varbinary(68))), len(@encrypted)<br /><br /><br /><span style="COLOR: rgb(0,128,0)">-- Do casting like so. This would be correctly decrypted.</span><br /><span style="COLOR: rgb(0,0,255)">SET</span> @decrypted = dbo.usp_Decrypt(<span style="COLOR: rgb(0,0,255)">cast</span>(<span style="COLOR: rgb(0,0,255)">cast</span>(@encrypted <span style="COLOR: rgb(0,0,255)">as</span> varbinary(68)) <span style="COLOR: rgb(0,0,255)">as</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(68)))<br /><br /><span style="COLOR: rgb(0,0,255)">SELECT</span> @decrypted<br /><br /><span style="COLOR: rgb(0,128,0)">-- always close key or close connection session as soon as key is not needed. </span><br /><span style="COLOR: rgb(0,0,255)">Exec</span> usp_Sys_Close_Key<br /><br /><br /><span style="COLOR: rgb(0,128,0)">-- the return value of the decrypt function is 7943, you may do casting, make sure to specify the size </span><br /><span style="COLOR: rgb(0,128,0)">-- like in the following example.</span><br /><br /><span style="COLOR: rgb(0,0,255)">drop</span> <span style="COLOR: rgb(0,0,255)">table</span> temp2<br /><span style="COLOR: rgb(0,0,255)">Exec</span> usp_Sys_Open_Key<br /><br /><span style="COLOR: rgb(0,0,255)">select</span> *<br />     , <span style="COLOR: rgb(0,0,255)">cast</span>(dbo.usp_Decrypt(accnum_enc) <span style="COLOR: rgb(0,0,255)">as</span> <span style="COLOR: rgb(0,0,255)">varchar</span>(20)) <span style="COLOR: rgb(0,0,255)">as</span> accnum_dec<br /><span style="COLOR: rgb(0,0,255)">into</span> temp2<br /><span style="COLOR: rgb(0,0,255)">from</span> temp1<br /><br /><span style="COLOR: rgb(0,0,255)">Exec</span> usp_Sys_Close_Key</pre><br /><br /></div><br /><p><strong><em>Again this problem turned out to be compatible with <span style="COLOR: rgb(0,0,255)">ISolvable</span> interface. </em></strong><br />Ok, I think this is enough for today. It is 11:00 PM on January 15, 2009, and tomorrow I need to wake up at 4:40 am to go to work at 6:am. Need to get some sleep so I can actually work tomorrow :).<br />P.S. The post could have some errors, since I wrote most of it in July of 2008, please write me if you find some problems or have answers to my questions.</p>
]]>
		</document>
		<document id="422b7d5d51b2cc3b0d5b992846f5db3d" url="http://isolvable.blogspot.com/2009/01/web-camera-rovio-remote-surveillance-in.html"><![CDATA[<p>Have you ever wondered how to grab pictures from a web cam into your .NET application. What if that web cam is remote and password protected. What if it is mobile web cam such as <a target="_blank" href="http://meetrovio.com/">Rovio</a>. What if you like to detect motion events and fire some logic to notify you of such motion. </p><p>Well, today I would like to walk you through on how to create such application. </p><p>Before we begin you need to download AForge if you like to have motion sensing capabilities - <a href="http://code.google.com/p/aforge/">http://code.google.com/p/aforge/</a> . <a href="http://www.aforgenet.com/framework">"AForge.NET</a> is a C# framework designed for developers and researchers in the fields of Computer Vision and Artificial Intelligence - image processing, neural networks, genetic algorithms, machine learning, etc." </p><p>You would not need the whole package just several classes. I had to modify some of the original AForge classes to suit my needs, but you are welcome to use original provided you comply with licensing requirements. </p><h4>Part 1 - Figuring out where web cams store their pictures. </h4><p>In my case I had two types of web cams. TRENDnet Wireless Internet Camera Server TV-IP201W and Rovio which I mentioned earlier. By logging in to my web cam server I could see the following page. This web page is generated by a camera embedded web server. My guess that it is running some sort of windows embedded OS since it is rendering aspx pages, but leave this to the reader to figure out since it is irrelevant for this post. </p><p><a href="http://4gdkga.bay.livefilestore.com/y1pNsdAqJMwQr48LvA-uNWQCGetlDP5s3ptsuNRs-f-ROfMh82cjxZOJubW_R5UA0OcqfLnZYaBkd9UghoALaAsSQ?PARTNER=WRITER"><img style="BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: 0px" border="0" alt="WebServer" src="http://lh6.ggpht.com/_AMGIYGGdLVY/SXV9NWUfJ1I/AAAAAAAAABE/b8frEPi2luk/WebServer%5B2%5D.jpg?imgmax=800" width="551" height="699" /></a> </p><p>This front page image is updated every time you request a page. So my guess was that camera stores temporary images internally and provides a link to those images. The next step is to figure out the exact uri of the image. This was easily done by opening page source and examining html code. Please see the screen shot below. </p><p><a href="http://4gdkga.bay.livefilestore.com/y1pWsbOHEG2_Bd_qHWDj5BrghVPy61yz1UXSJu7Q9dSzD4sHKbrLrxgXtqynAN0MX0LPWHqHcUC3jesPk1qF0XcMg?PARTNER=WRITER"><img style="BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: 0px" border="0" alt="Image_link" src="http://lh5.ggpht.com/_AMGIYGGdLVY/SXV9NgyBntI/AAAAAAAAABM/kpyAjhwl1q0/Image_link%5B1%5D.jpg?imgmax=800" width="629" height="211" /></a> </p><p>Yes, that weird number is a relative reference to server's folder. Convert it to full uri and you would get something like http://MyCameraServer.com/goform/capture?12378465237865336 .<br />This is our first type of cameras. </p><p>Now lets explore Rovio, which has a very simple to use <a target="_blank" href="http://www.wowweesupport.com/pdf/Rovio_API_Specifications_v1.2.pdf">set of APIs</a>. There I found that I can just go to something like <a title="http://98.112.137.178:90/Jpeg/CamImg0000.jpg" href="http://MyCameraServer:MyPort/Jpeg/CamImg0000.jpg">http://MyCameraServer:MyPort/Jpeg/CamImg0000.jpg</a> , where MyCameraServer:Myport is an address where you set up your Rovio. That's it. Easy.</p><h4>Part 2 - Connecting to remote server.</h4><p>To connect to remote web server we would utilize classes WebRequest and WebResponce from System.Net namespace. It is very simple. First we need to create web request and provide URI, then we need to add credentials, then execute request, which returns response as instance of WebResponce class. Later we can access stream reader of web response and read our data.<br />Below is an example. </p><div style="BORDER-BOTTOM: gray 1px solid; BORDER-LEFT: gray 1px solid; PADDING-BOTTOM: 4px; LINE-HEIGHT: 12pt; PADDING-LEFT: 4px; WIDTH: 97.5%; PADDING-RIGHT: 4px; MAX-HEIGHT: 200px; OVERFLOW: auto; BORDER-TOP: gray 1px solid; CURSOR: text; BORDER-RIGHT: gray 1px solid; PADDING-TOP: 4px; BACKGROUND-: 20px 0px 10pxfont-family:consolas, 'Courier New', courier, monospace;font-size:8pt;color:#f4f4f4;"   ><pre style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: #f4f4f4; MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; BORDER-TOP-STYLE: none; BORDER-LEFT-STYLE: none; OVERFLOW: visiblefont-size:8pt;color:black;"  ><span style="color:#0000ff;">Dim</span> request <span style="color:#0000ff;">As</span> WebRequest<br /><span style="color:#0000ff;">Dim</span> response <span style="color:#0000ff;">As</span> WebResponse<br /><span style="color:#0000ff;">Dim</span> reader <span style="color:#0000ff;">As</span> Stream<br /><span style="color:#0000ff;">Dim</span> data(8191) <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Byte</span><br /><span style="color:#0000ff;">Dim</span> count <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Integer</span><br /><span style="color:#0000ff;">Dim</span> total <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Integer</span><br /><br />request = WebRequest.Create(url)<br />request.Credentials = <span style="color:#0000ff;">New</span> NetworkCredential(<span style="color:#006080;">"login name"</span>, <span style="color:#006080;">"password"</span>)<br />response = request.GetResponse()<br />reader = response.GetResponseStream()<br />total = 0<br /><br /><span style="color:#0000ff;">Dim</span> myBitmap <span style="color:#0000ff;">As</span> Bitmap = <span style="color:#0000ff;">New</span> Bitmap(reader, <span style="color:#0000ff;">True</span>)<br /><br /><span style="color:#0000ff;">While</span> <span style="color:#0000ff;">True</span><br />count = reader.Read(data, 0, 8192)<br /><br /><span style="color:#0000ff;">If</span> count &lt;= 0 <span style="color:#0000ff;">Then</span><br /><span style="color:#0000ff;">Exit</span> <span style="color:#0000ff;">While</span><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br /><br />total += 8192<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">While</span><br /><br />reader.Close()</pre><br /></div><br /><br /><h4>Part 3 - Automatic refresh </h4><p>You probably would not want to refresh this picture every time. So here is what I did, there are many ways, I prefer the quickest one :). Set the timer and refresh the picture by timer. It works great, except now if you set it to refresh too often your UI will freeze. So the idea is to load pictures on a separate thread. And for that I have created this simple class ThreadingHelper.<br /></p><div style="BORDER-BOTTOM: gray 1px solid; BORDER-LEFT: gray 1px solid; PADDING-BOTTOM: 4px; LINE-HEIGHT: 12pt; PADDING-LEFT: 4px; WIDTH: 97.5%; PADDING-RIGHT: 4px; MAX-HEIGHT: 200px; OVERFLOW: auto; BORDER-TOP: gray 1px solid; CURSOR: text; BORDER-RIGHT: gray 1px solid; PADDING-TOP: 4px; BACKGROUND-: 20px 0px 10pxfont-family:consolas, 'Courier New', courier, monospace;font-size:8pt;color:#f4f4f4;"   ><br /><pre style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: #f4f4f4; MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; BORDER-TOP-STYLE: none; BORDER-LEFT-STYLE: none; OVERFLOW: visiblefont-size:8pt;color:black;"  ><span style="color:#0000ff;">Imports</span> System.Threading<br /><br /><span style="color:#0000ff;">Public</span> <span style="color:#0000ff;">Class</span> ThreadingHelper<br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Shared</span> _currentForm <span style="color:#0000ff;">As</span> Form<br /><br /><span style="color:#008000;">''----------------------------------------------------------------------------</span><br /><span style="color:#008000;">'' methods related to threading </span><br /><span style="color:#008000;">''----------------------------------------------------------------------------</span><br /><span style="color:#0000ff;">Public</span> <span style="color:#0000ff;">Delegate</span> <span style="color:#0000ff;">Function</span> DelegateBegin(<span style="color:#0000ff;">ByVal</span> endCode <span style="color:#0000ff;">As</span> DelegateEnd) <span style="color:#0000ff;">As</span> DelegateEnd<br /><span style="color:#0000ff;">Public</span> <span style="color:#0000ff;">Delegate</span> <span style="color:#0000ff;">Sub</span> DelegateEnd()<br /><br /><span style="color:#0000ff;">Public</span> <span style="color:#0000ff;">Sub</span> BeginCode(<span style="color:#0000ff;">ByVal</span> currentForm <span style="color:#0000ff;">As</span> Form, _<br /><span style="color:#0000ff;">ByVal</span> _beginCode <span style="color:#0000ff;">As</span> DelegateBegin, _<br /><span style="color:#0000ff;">ByVal</span> _endCode <span style="color:#0000ff;">As</span> DelegateEnd)<br /><br />_currentForm = currentForm<br /><br /><span style="color:#0000ff;">Dim</span> callbackTransfer <span style="color:#0000ff;">As</span> AsyncCallback = <span style="color:#0000ff;">New</span> AsyncCallback(<span style="color:#0000ff;">AddressOf</span> TransferContext)<br /><br />_beginCode.BeginInvoke(_endCode, callbackTransfer, <span style="color:#0000ff;">Nothing</span>)<br /><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br /><br /><span style="color:#0000ff;">Public</span> <span style="color:#0000ff;">Sub</span> TransferContext(<span style="color:#0000ff;">ByVal</span> asyncResult <span style="color:#0000ff;">As</span> System.IAsyncResult)<br /><br /><span style="color:#0000ff;">Dim</span> asyncResultBegin <span style="color:#0000ff;">As</span> Runtime.Remoting.Messaging.AsyncResult<br /><span style="color:#0000ff;">Dim</span> delegateBegin <span style="color:#0000ff;">As</span> DelegateBegin<br /><span style="color:#0000ff;">Dim</span> endCode <span style="color:#0000ff;">As</span> DelegateEnd<br /><br />asyncResultBegin = <span style="color:#0000ff;">CType</span>(asyncResult, Runtime.Remoting.Messaging.AsyncResult)<br /><br />delegateBegin = asyncResultBegin.AsyncDelegate<br /><br />endCode = delegateBegin.EndInvoke(asyncResult)<br /><span style="color:#0000ff;">Try</span><br /><span style="color:#0000ff;">If</span> _currentForm.InvokeRequired <span style="color:#0000ff;">Then</span><br />_currentForm.Invoke(endCode)<br /><span style="color:#0000ff;">Else</span><br />endCode()<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br /><span style="color:#0000ff;">Catch</span> ex <span style="color:#0000ff;">As</span> NullReferenceException<br /><span style="color:#008000;">''if error occured on a different thread for the purpose of this streaming application we are just going to swallow it.</span><br /><span style="color:#008000;">'' write youe handler if you like </span><br /><span style="color:#0000ff;">Catch</span> ex <span style="color:#0000ff;">As</span> ObjectDisposedException<br /><br /><span style="color:#0000ff;">Catch</span> ex <span style="color:#0000ff;">As</span> Exception<br /><br /><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Try</span><br /><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><span style="color:#0000ff;">End</span> Class</pre><br /></div><br /><p></p><p>Here is how to use it.<br /></p><div style="BORDER-BOTTOM: gray 1px solid; BORDER-LEFT: gray 1px solid; PADDING-BOTTOM: 4px; LINE-HEIGHT: 12pt; PADDING-LEFT: 4px; WIDTH: 97.5%; PADDING-RIGHT: 4px; HEIGHT: 48px; MAX-HEIGHT: 200px; OVERFLOW: auto; BORDER-TOP: gray 1px solid; CURSOR: text; BORDER-RIGHT: gray 1px solid; PADDING-TOP: 4px; BACKGROUND-: 20px 0px 10pxfont-family:consolas, 'Courier New', courier, monospace;font-size:8pt;color:#f4f4f4;"   ><br /><pre style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: #f4f4f4; MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 97.47%; PADDING-RIGHT: 0px; BORDER-TOP-STYLE: none; HEIGHT: 34px; BORDER-LEFT-STYLE: none; OVERFLOW: visiblefont-size:8pt;color:black;"  ><p>myThreading = <span style="color:#0000ff;">New</span> ThreadingHelper()<br /></p><p></p><p></p><p>myThreading.BeginCode(<span style="color:#0000ff;">Me</span>, <span style="color:#0000ff;">AddressOf</span> GetPicture, <span style="color:#0000ff;">AddressOf</span> UpdatePicture)</p></pre><br /></div><br /><p></p><h4>Part 4 - Rest of the code.<br /><div style="BORDER-BOTTOM: gray 1px solid; BORDER-LEFT: gray 1px solid; PADDING-BOTTOM: 4px; LINE-HEIGHT: 12pt; PADDING-LEFT: 4px; WIDTH: 97.5%; PADDING-RIGHT: 4px; HEIGHT: 237px; MAX-HEIGHT: 200px; OVERFLOW: auto; BORDER-TOP: gray 1px solid; CURSOR: text; BORDER-RIGHT: gray 1px solid; PADDING-TOP: 4px; BACKGROUND-: 20px 0px 10pxfont-family:consolas, 'Courier New', courier, monospace;font-size:8pt;color:#f4f4f4;"   ><br /><pre style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: #f4f4f4; MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; BORDER-TOP-STYLE: none; BORDER-LEFT-STYLE: none; OVERFLOW: visiblefont-size:8pt;color:black;"  ><span style="color:#0000ff;">Imports</span> System.Net<br /><span style="color:#0000ff;">Imports</span> System.IO<br /><span style="color:#0000ff;">Imports</span> MotionDetection<br /><br /><span style="color:#0000ff;">Public</span> <span style="color:#0000ff;">Class</span> Form1<br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Const</span> url1 <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">String</span> = <span style="color:#006080;">"http://myserver/goform/capture?1078432126434196"</span><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Const</span> url2 <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">String</span> = <span style="color:#006080;">"http://myserver/goform/capture?1073114869312048"</span><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Const</span> url3 <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">String</span> = <span style="color:#006080;">"http://myserver/goform/capture?1225387068534147"</span><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Const</span> url4 <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">String</span> = <span style="color:#006080;">"http://myserver/goform/capture?1225387347966623"</span><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Const</span> url5 <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">String</span> = <span style="color:#006080;">"http://myserver/goform/capture?1082672364580373"</span><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Const</span> url6 <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">String</span> = <span style="color:#006080;">"http://myserver/Jpeg/CamImg0000.jpg"</span><br /><br /><span style="color:#0000ff;">Private</span> cameras(,) <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">String</span> = { _<br />{<span style="color:#006080;">"camera 1"</span>, url1}, _<br />{<span style="color:#006080;">"camera 2"</span>, url2}, _<br />{<span style="color:#006080;">"camera 3"</span>, url3}, _<br />{<span style="color:#006080;">"camera 4"</span>, url4}, _<br />{<span style="color:#006080;">"camera 5"</span>, url5}, _<br />{<span style="color:#006080;">"rovio 1"</span>, url6} _<br />}<br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Shared</span> _cameraIndex <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Integer</span> = 0<br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Shared</span> _motionLevel <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Double</span> = 10.0<br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Shared</span> _detectMotion <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Boolean</span> = <span style="color:#0000ff;">False</span><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Shared</span> globalBitmap <span style="color:#0000ff;">As</span> Bitmap<br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Shared</span> _motionDetector <span style="color:#0000ff;">As</span> MotionDetector3<br /><span style="color:#0000ff;">Private</span> myThreading <span style="color:#0000ff;">As</span> ThreadingHelper<br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Shared</span> urlCurr <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">String</span> = url1<br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> Form1_Load(<span style="color:#0000ff;">ByVal</span> sender <span style="color:#0000ff;">As</span> System.<span style="color:#0000ff;">Object</span>, <span style="color:#0000ff;">ByVal</span> e <span style="color:#0000ff;">As</span> System.EventArgs) <span style="color:#0000ff;">Handles</span> <span style="color:#0000ff;">MyBase</span>.Load<br /><br /><span style="color:#0000ff;">For</span> i <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Integer</span> = 0 <span style="color:#0000ff;">To</span> (cameras.Length / 2) - 1<br />ComboBoxCameras.Items.Add(cameras(i, 0))<br /><span style="color:#0000ff;">Next</span><br /><br />ComboBoxCameras.SelectedIndex = 0<br />urlCurr = cameras(ComboBoxCameras.SelectedIndex, 1)<br /><br />myThreading = <span style="color:#0000ff;">New</span> ThreadingHelper()<br /><br />_motionDetector = <span style="color:#0000ff;">New</span> MotionDetector3()<br />_motionDetector.MotionLevelCalculation = <span style="color:#0000ff;">True</span><br /><br />Timer1.Start()<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> LoadFile(<span style="color:#0000ff;">ByVal</span> url <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">String</span>)<br /><span style="color:#0000ff;">Try</span><br /><span style="color:#0000ff;">Dim</span> request <span style="color:#0000ff;">As</span> WebRequest<br /><span style="color:#0000ff;">Dim</span> response <span style="color:#0000ff;">As</span> WebResponse<br /><span style="color:#0000ff;">Dim</span> reader <span style="color:#0000ff;">As</span> Stream<br /><span style="color:#0000ff;">Dim</span> data(8191) <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Byte</span><br /><span style="color:#0000ff;">Dim</span> count <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Integer</span><br /><span style="color:#0000ff;">Dim</span> total <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Integer</span><br /><br />request = WebRequest.Create(url)<br />request.Credentials = <span style="color:#0000ff;">New</span> NetworkCredential(<span style="color:#006080;">"login name"</span>, <span style="color:#006080;">"password"</span>)<br />response = request.GetResponse()<br />reader = response.GetResponseStream()<br />total = 0<br /><br /><span style="color:#0000ff;">Dim</span> myBitmap <span style="color:#0000ff;">As</span> Bitmap = <span style="color:#0000ff;">New</span> Bitmap(reader, <span style="color:#0000ff;">True</span>)<br /><br /><span style="color:#0000ff;">While</span> <span style="color:#0000ff;">True</span><br />count = reader.Read(data, 0, 8192)<br /><br /><span style="color:#0000ff;">If</span> count &lt;= 0 <span style="color:#0000ff;">Then</span><br /><span style="color:#0000ff;">Exit</span> <span style="color:#0000ff;">While</span><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br /><br />total += 8192<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">While</span><br /><br />reader.Close()<br /><br /><span style="color:#0000ff;">If</span> <span style="color:#0000ff;">Not</span> globalBitmap <span style="color:#0000ff;">Is</span> <span style="color:#0000ff;">Nothing</span> <span style="color:#0000ff;">Then</span><br />globalBitmap.Dispose()<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br /><br /><span style="color:#008000;">''to prevent cross threading access to a shared memeber you would need to clone image since it would be stored on the local stack and you would need to update it</span><br />globalBitmap = myBitmap.Clone(<span style="color:#0000ff;">New</span> Rectangle(0, 0, myBitmap.Width, myBitmap.Height), Imaging.PixelFormat.Format32bppRgb)<br /><br /><span style="color:#0000ff;">If</span> <span style="color:#0000ff;">Not</span> myBitmap <span style="color:#0000ff;">Is</span> <span style="color:#0000ff;">Nothing</span> <span style="color:#0000ff;">Then</span><br />myBitmap.Dispose()<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br />response.Close()<br /><span style="color:#0000ff;">Catch</span> ex <span style="color:#0000ff;">As</span> Exception<br /><span style="color:#008000;">'MessageBox.Show(ex.Message)</span><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Try</span><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> Timer1_Tick(<span style="color:#0000ff;">ByVal</span> sender <span style="color:#0000ff;">As</span> System.<span style="color:#0000ff;">Object</span>, <span style="color:#0000ff;">ByVal</span> e <span style="color:#0000ff;">As</span> System.EventArgs) <span style="color:#0000ff;">Handles</span> Timer1.Tick<br /><span style="color:#0000ff;">Try</span><br />Timer1.<span style="color:#0000ff;">Stop</span>()<br />myThreading.BeginCode(<span style="color:#0000ff;">Me</span>, <span style="color:#0000ff;">AddressOf</span> GetPicture, <span style="color:#0000ff;">AddressOf</span> UpdatePicture)<br /><span style="color:#0000ff;">Catch</span> ex <span style="color:#0000ff;">As</span> Exception<br />MessageBox.Show(ex.Message)<br />Timer1.Start()<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Try</span><br /><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Function</span> GetPicture(<span style="color:#0000ff;">ByVal</span> endCode <span style="color:#0000ff;">As</span> ThreadingHelper.DelegateEnd) <span style="color:#0000ff;">As</span> ThreadingHelper.DelegateEnd<br /><span style="color:#0000ff;">Try</span><br />LoadFile(urlCurr)<br /><br /><span style="color:#0000ff;">Catch</span> ex <span style="color:#0000ff;">As</span> Exception<br /><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Try</span><br /><br /><span style="color:#0000ff;">Return</span> endCode<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Function</span><br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> UpdatePicture()<br /><span style="color:#0000ff;">Try</span><br /><span style="color:#0000ff;">If</span> <span style="color:#0000ff;">Not</span> PictureBox1.Image <span style="color:#0000ff;">Is</span> <span style="color:#0000ff;">Nothing</span> <span style="color:#0000ff;">Then</span><br />PictureBox1.Image.Dispose()<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br /><br /><span style="color:#0000ff;">Dim</span> myBitmap <span style="color:#0000ff;">As</span> Bitmap<br /><br />myBitmap = globalBitmap.Clone(<span style="color:#0000ff;">New</span> Rectangle(0, 0, globalBitmap.Width, globalBitmap.Height), Imaging.PixelFormat.Format32bppRgb)<br /><br /><span style="color:#0000ff;">If</span> _detectMotion <span style="color:#0000ff;">Then</span><br />_motionDetector.ProcessFrame(myBitmap)<br /><span style="color:#0000ff;">If</span> (_motionDetector.MotionLevel * 100 &gt; _motionLevel) <span style="color:#0000ff;">Then</span><br />_motionLevel += 10<br />TextBoxMotionLevel.Text = _motionLevel.ToString()<br />MessageBox.Show(<span style="color:#006080;">"Motion detected, here we can automatically send e-mail and deliver files over network somehow."</span>)<br />_motionDetector.Reset()<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br /><br />PictureBox1.Image = myBitmap<br /><br /><br />Timer1.Start()<br /><span style="color:#0000ff;">Catch</span> ex <span style="color:#0000ff;">As</span> Exception<br />MessageBox.Show(ex.Message)<br />Timer1.Start()<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Try</span><br /><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> Form1_FormClosing(<span style="color:#0000ff;">ByVal</span> sender <span style="color:#0000ff;">As</span> System.<span style="color:#0000ff;">Object</span>, <span style="color:#0000ff;">ByVal</span> e <span style="color:#0000ff;">As</span> System.Windows.Forms.FormClosingEventArgs) <span style="color:#0000ff;">Handles</span> <span style="color:#0000ff;">MyBase</span>.FormClosing<br />Timer1.<span style="color:#0000ff;">Stop</span>()<br /><span style="color:#0000ff;">If</span> <span style="color:#0000ff;">Not</span> PictureBox1.Image <span style="color:#0000ff;">Is</span> <span style="color:#0000ff;">Nothing</span> <span style="color:#0000ff;">Then</span><br />PictureBox1.Image.Dispose()<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> ComboBoxCameras_SelectedIndexChanged(<span style="color:#0000ff;">ByVal</span> sender <span style="color:#0000ff;">As</span> System.<span style="color:#0000ff;">Object</span>, <span style="color:#0000ff;">ByVal</span> e <span style="color:#0000ff;">As</span> System.EventArgs) <span style="color:#0000ff;">Handles</span> ComboBoxCameras.SelectedIndexChanged<br />urlCurr = cameras(ComboBoxCameras.SelectedIndex, 1)<br />_cameraIndex = ComboBoxCameras.SelectedIndex<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> CheckBoxDetectMotion_CheckedChanged(<span style="color:#0000ff;">ByVal</span> sender <span style="color:#0000ff;">As</span> System.<span style="color:#0000ff;">Object</span>, <span style="color:#0000ff;">ByVal</span> e <span style="color:#0000ff;">As</span> System.EventArgs) <span style="color:#0000ff;">Handles</span> CheckBoxDetectMotion.CheckedChanged<br />_detectMotion = CheckBoxDetectMotion.Checked<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> ButtonSetMotionLevel_Click(<span style="color:#0000ff;">ByVal</span> sender <span style="color:#0000ff;">As</span> System.<span style="color:#0000ff;">Object</span>, <span style="color:#0000ff;">ByVal</span> e <span style="color:#0000ff;">As</span> System.EventArgs) <span style="color:#0000ff;">Handles</span> ButtonSetMotionLevel.Click<br /><span style="color:#0000ff;">Dim</span> newLevel <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Double</span><br /><span style="color:#0000ff;">If</span> (<span style="color:#0000ff;">Double</span>.TryParse(TextBoxMotionLevel.Text, newLevel)) <span style="color:#0000ff;">Then</span><br />_motionLevel = newLevel<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br /><span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> ButtonResetDetector_Click(<span style="color:#0000ff;">ByVal</span> sender <span style="color:#0000ff;">As</span> System.<span style="color:#0000ff;">Object</span>, <span style="color:#0000ff;">ByVal</span> e <span style="color:#0000ff;">As</span> System.EventArgs) <span style="color:#0000ff;">Handles</span> ButtonResetDetector.Click<br />_motionDetector.Reset()<br /><span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><span style="color:#0000ff;">End</span> Class</pre><br /></div><br /></h4><p>And here is the result:<br />We could have almost streaming video :). The picture appears dark, because I have no control over the light switch in a remote facility. but hopefully you get the idea. </p><br /><p><a href="http://4gdkga.bay.livefilestore.com/y1pcAgsXo7MghmwnskoSRQRxuqkKKRU0K2zhBtITe7Acuu-GWK9IZYmDO-p9nf0udgjmRCwAs_GPEIeNyIDy5KfwQ?PARTNER=WRITER"><img style="BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: 0px" border="0" alt="WebCam" src="http://lh5.ggpht.com/_AMGIYGGdLVY/SXV9OqotHxI/AAAAAAAAABQ/p731D3TBzig/WebCam%5B1%5D.jpg?imgmax=800" width="623" height="557" /></a> </p><p>And finally with motion detector.<br /></p><p><a href="http://4gdkga.bay.livefilestore.com/y1pi2GV-3mW-7knWpytxnjm4YWaIuIlAv89HKrsfBpoDlN_eUXxpXMMmQoPj2LrOYn0PpBrktM33f5B4v8awfRcAg?PARTNER=WRITER"><img style="BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: 0px" border="0" alt="MotionDetector" src="http://lh3.ggpht.com/_AMGIYGGdLVY/SXV9PtoDANI/AAAAAAAAABU/40yHx7P6Bv8/MotionDetector%5B1%5D.jpg?imgmax=800" width="625" height="565" /></a> </p><p>You could set level of the motion in % and then write your custom code and what to do about detected motion. For example you could send an e-mail with picture attached or using Rovio you could send a specific sound command and alert an "intruder" :). </p><p>In my next post I will provide a little more explanation on what modifications I made to AForge library. </p><p>This was a very nice <strong>ISolvable</strong> problem :) </p>
]]>
		</document>
		<document id="1ebee54f68a59b6f1317347a9b2d21d6" url="http://isolvable.blogspot.com/2009/02/prevent-visual-studio-2005-forms.html"><![CDATA[<p>Have you ever tried to inherit a form and then in Visual Studio Designer you got an error message? Something like this: </p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="InheritedFormError_Example2" border="0" alt="InheritedFormError_Example2" src="http://lh3.ggpht.com/_AMGIYGGdLVY/SZnstElBU4I/AAAAAAAAACI/bpXt6dFBe2w/InheritedFormError_Example2%5B6%5D.jpg?imgmax=800" width="593" height="484" /> </p>  <p>or like this: </p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="InheritedFormError_Example1" border="0" alt="InheritedFormError_Example1" src="http://lh4.ggpht.com/_AMGIYGGdLVY/SZnstoWArfI/AAAAAAAAACM/xkmKurHfPPw/InheritedFormError_Example1%5B4%5D.jpg?imgmax=800" width="644" height="394" /> </p>  <p></p>  <p>That is because Visual Studio Designer in order to render base form controls would create an instance of the base form and apparently would try to execute handlers for base form events. If events contain some logic where you call middle tier and connect to a database or make calls that could fail at design time, such as making a request for Principal Permission, this could generate error messages like the ones above, and in turn Designer would not be able to properly render inherited form.&#160; <br />There are several principles and ways to avoid such behavior.&#160; Don’t forget to recompile your project every time you make changes to base forms. It also helps to close designer window of the inherited form and re open it, that is when new instance of the base form is created and reloaded in the designer.</p>  <h4>Basic Principles</h4>  <p>Since now we are aware that code on the base form could be executed in the designer we could design our parent class in a way which would avoid such execution.    <br />- In the parameterless constructor for the base (parent) form do not add any logic besides InitializeComponent()     <br />- Or create an overloaded constructor with Protected access modifier, which would be executed only by a child form.&#160; <br />- Avoid adding logic into Load event of the base form.     <br />- And for that matter avoid adding logic into any event handler for the base form… Don’t you think this is too much? I do. </p>  <h4>Ways to prevent base form to execute logic at design time. </h4>  <p>There is however a useful property that Form has. It is called DesignMode. You may evaluate this property <strong>after </strong>instance is created and handle is passed to the Designer. Which means do not check this property in constructor, since it would return false.     <br />If this property evaluates to True than you could stop your code from executing.</p>  <p>Now what if you have multiple base form event handlers and you don’t want to spend time modifying these event handlers by adding this condition. For this purpose there is another neat property on the Form, which is called Events. You could dispose all the events on the form if your base form is in the Designer. So you could add the following code in your base form Load event handler. </p>  <p class="MsoNormal"><font size="2" face="Courier New"><span style="font-family: &#39;Courier New&#39;; font-size: 10pt"><font color="#0000ff"><span style="color: blue">Private</span></font> <font color="#0000ff"><span style="color: blue">Sub</span></font> MyForm_Load(<font color="#0000ff"><span style="color: blue">ByVal</span></font> sender <font color="#0000ff"><span style="color: blue">As</span></font> System.Object, <font color="#0000ff"><span style="color: blue">ByVal</span></font> e <font color="#0000ff"><span style="color: blue">As</span></font> System.EventArgs) <font color="#0000ff"><span style="color: blue">Handles</span></font> <font color="#0000ff"><span style="color: blue">MyBase</span></font>.Load </span>      <p></p>   </font></p>  <p></p>  <p class="MsoNormal"><font size="2" face="Courier New"><span style="font-family: &#39;Courier New&#39;; font-size: 10pt">&#160;&#160;&#160; <font color="#0000ff"><span style="color: blue">If</span></font> <font color="#0000ff"><span style="color: blue">Me</span></font>.DesignMode <font color="#0000ff"><span style="color: blue">Then            <br /></span></font></span></font><font size="2" face="Courier New"><span style="font-family: &#39;Courier New&#39;; font-size: 10pt">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color="#0000ff"><span style="color: blue">Me</span></font>.Events.Dispose()         <br /></span></font><font size="2" face="Courier New"><span style="font-family: &#39;Courier New&#39;; font-size: 10pt">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <font color="#0000ff"><span style="color: blue">Exit</span></font> <font color="#0000ff"><span style="color: blue">Sub            <br /></span></font></span></font><font size="2" face="Courier New"><span style="font-family: &#39;Courier New&#39;; font-size: 10pt">&#160;&#160;&#160; <font color="#0000ff"><span style="color: blue">End</span></font> <font color="#0000ff"><span style="color: blue">If            <br /></span></font></span></font><font color="#008000" size="2" face="Courier New"><span style="font-family: &#39;Courier New&#39;; color: green; font-size: 10pt">&#160;&#160;&#160; '' your logic</span></font><font size="2" face="Courier New"><span style="font-family: &#39;Courier New&#39;; font-size: 10pt">&#160;&#160;&#160;&#160;&#160;&#160;&#160; </span>      <p></p>   </font></p>  <p></p>  <p class="MsoNormal"><font size="2" face="Courier New"><span style="font-family: &#39;Courier New&#39;; font-size: 10pt"><font color="#0000ff"><span style="color: blue">End</span></font> <font color="#0000ff"><span style="color: blue">Sub</span></font></span></font></p>  <p class="MsoNormal">So this was another ISolvable problem. :)</p>  <p class="MsoNormal"><font size="2" face="Courier New"><span style="font-family: &#39;Courier New&#39;; font-size: 10pt"><font color="#0000ff"><span style="color: blue">&#160;</span></font></span></font></p>  
]]>
		</document>
		<document id="df15335350d4ed8aa9dd95c7308919cb" url="http://isolvable.blogspot.com/2009/09/problem-rendering-ajax-popupextender.html"><![CDATA[<p>If you happen to have some sort of ActiveX control on your page in an IFrame, such as PDF viewer, then some of the AJAX controls which use PopupExtender will be obscured by the ActiveX or any other browser plug-in which rendering happens out of the main page context.</p><p>For example menus, and CalendarExtender suffer this problem, since they inherit PopupBehavior.</p><p>What happens is Ajax PopupExtender behavior explicitly checks for browser version, in particular IE 6. In IE 6 there was a known problem with z-index so you had to use IFrames to render some popup controls, so PopupBehavior checks whether browser is IE 6 and creates an IFrame around control, otherwise no IFrame created, hence the problem in newer IEs and FireFox with browser plug-ins.</p><p>To fix this problem, first download source code for AJAX Control Toolkit from <a href="http://www.codeplex.com/AjaxControlToolkit" target="_blank">CodePlex</a>. And find PopupExtender folder in VS project. Then find this function:</p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"> <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">addBackgroundIFrame : <span style="color: #0000ff">function</span>()<br /></pre>  <br /></div><p>Remember to duplicate your effort for debug and release versions of code, since there are two separate files. </p><p>Now lets take a look at the original code: </p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper">  <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">addBackgroundIFrame : <span style="color: #0000ff">function</span>() {<br />    <span style="color: #008000">/// &lt;summary&gt;</span><br />    <span style="color: #008000">/// Add an empty IFRAME behind the popup (for IE6 only) so that SELECT, etc., won't</span><br />    <span style="color: #008000">/// show through the popup.</span><br />    <span style="color: #008000">/// &lt;/summary&gt;</span><br /><br />    <span style="color: #008000">// Get the child frame</span><br />    <span style="color: #0000ff">var</span> element = <span style="color: #0000ff">this</span>.get_element();<br />    <span style="color: #0000ff">if</span> ((Sys.Browser.agent === Sys.Browser.InternetExplorer) &amp;&amp; (Sys.Browser.version &lt; 7)) {<br />        <span style="color: #0000ff">var</span> childFrame = element._hideWindowedElementsIFrame;<br />    <br />        <span style="color: #008000">// Create the child frame if it wasn't found</span><br />        <span style="color: #0000ff">if</span> (!childFrame) {<br />            childFrame = document.createElement(<span style="color: #006080">&quot;iframe&quot;</span>);<br />            childFrame.src = <span style="color: #006080">&quot;javascript:'&lt;html&gt;&lt;/html&gt;';&quot;</span>;<br />            childFrame.style.position = <span style="color: #006080">&quot;absolute&quot;</span>;<br />            childFrame.style.display = <span style="color: #006080">&quot;none&quot;</span>;<br />            childFrame.scrolling = <span style="color: #006080">&quot;no&quot;</span>;<br />            childFrame.frameBorder = <span style="color: #006080">&quot;0&quot;</span>;<br />            childFrame.tabIndex = <span style="color: #006080">&quot;-1&quot;</span>;<br />            childFrame.style.filter = <span style="color: #006080">&quot;progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)&quot;</span>;<br />            element.parentNode.insertBefore(childFrame, element);<br />            element._hideWindowedElementsIFrame = childFrame;<br />            <span style="color: #0000ff">this</span>._moveHandler = Function.createDelegate(<span style="color: #0000ff">this</span>, <span style="color: #0000ff">this</span>._onMove);<br />            Sys.UI.DomEvent.addHandler(element, <span style="color: #006080">&quot;move&quot;</span>, <span style="color: #0000ff">this</span>._moveHandler);<br />        }<br />    <br />        <span style="color: #008000">// Position the frame exactly behind the element</span><br />        $common.setBounds(childFrame, $common.getBounds(element));<br /><br />        childFrame.style.left = element.style.left;<br />        childFrame.style.top = element.style.top;<br />    <br />        childFrame.style.display = element.style.display;<br />    <br />        <span style="color: #0000ff">if</span> (element.currentStyle &amp;&amp; element.currentStyle.zIndex) {<br />            childFrame.style.zIndex = element.currentStyle.zIndex;<br />        } <span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (element.style.zIndex) {<br />            childFrame.style.zIndex = element.style.zIndex;<br />        }<br />    }<br />},<br /></pre>  <br /></div><p>Notice the section above, which has IF statement. </p><p>Remove that IF statement completely. Recompile your AjaxControlToolKit project and reference this new dll in your ASP.NET project. Drum roll… it works! ActiveX does not render over your popup control anymore. </p><p>Keep in mind, if you have many IFrames on your page it would slower rendering, so try to keep number of IFrames to a minimum. </p><p>Another <strong>ISolvable</strong> problem :). </p>  
]]>
		</document>
		<document id="c86d46f12b2d63b80b02bb9697b4196b" url="http://isolvable.blogspot.com/2009/09/restoring-wpf-window-of-another-process.html"><![CDATA[<p>Recently I was working on a WPF single instance application, which hides it’s main window and shows system tray icon. My task was to restore main window whenever user tries to open another instance of the application. The good thing I have control over source code, which means I can do anything to the target app. However there are 3 bad things related to WPF</p><h5>WPF shortfalls </h5><ul><li>no out of the box support for single instance applications (in WinForms it is just a flag in project properties tab) </li><li>it is hard to get a handle of main window of another process, if that window is hidden. Process.MainWindowHandle would return 0. </li><li>when restoring window of a different process WPF does not listen for window events and thus WPF thread does not start rendering, as a result you get black window with XP blue frame around it. </li></ul><h5>1st problem</h5><p>First problem is easily <strong>ISolvable</strong> either using Process.GetProcessByName(yourAppName) when returns true and process id is different from current process, then most likely there is another instance of the app is running, unless name of your app for some reason, is the same as some other app running on the box. In that case you can use mutex to solve the problem. In fact using Mutex is a more robust approach. You can find implementations in <a href="http://www.codeproject.com/KB/cs/singleinstanceapplication.aspx?display=PrintAll&amp;fid=199729&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26" target="_blank">here</a>. </p><h5>2nd Problem</h5><p>Second problem turned out to be lengthy and requires use of SharedMemoryFile and a bunch of other APIs. You can see how it is solved in the same <a href="http://www.codeproject.com/KB/cs/singleinstanceapplication.aspx?display=PrintAll&amp;fid=199729&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26" target="_blank">article</a>. This article however does not address WPF issue, since it was written prior WPF release. </p><h5>3d Problem </h5><p>While easily solvable, it took me some time to figure it out.<br />When you have a code like this:</p><div style="BORDER-BOTTOM: silver 1px solid; TEXT-ALIGN: left; BORDER-LEFT: silver 1px solid; PADDING-BOTTOM: 4px; LINE-HEIGHT: 12pt; PADDING-LEFT: 4px; WIDTH: 97.5%; PADDING-RIGHT: 4px; DIRECTION: ltr; MAX-HEIGHT: 200px; OVERFLOW: auto; BORDER-TOP: silver 1px solid; CURSOR: text; BORDER-RIGHT: silver 1px solid; PADDING-TOP: 4px; BACKGROUND-: 20px 0px 10pxfont-family:'Courier New', courier, monospace;font-size:8pt;color:#f4f4f4;" id="codeSnippetWrapper"   ><pre style="BORDER-BOTTOM-STYLE: none; TEXT-ALIGN: left; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: #f4f4f4; MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 126.48%; PADDING-RIGHT: 0px; DIRECTION: ltr; BORDER-TOP-STYLE: none; HEIGHT: 368px; BORDER-LEFT-STYLE: none; OVERFLOW: visible; PADDING-TOP: 0pxfont-family:'Courier New', courier, monospace;font-size:8pt;color:black;" id="codeSnippet"   ><span style="color:#008000;">'' if mutex was not created that means other instance is running, </span><br /><span style="color:#008000;">'' so we need to restore window of other application. </span><br /><span style="color:#0000ff;">If</span> <span style="color:#0000ff;">Not</span> IsMutexCreated <span style="color:#0000ff;">Then</span><br />    <span style="color:#0000ff;">Try</span><br />        <span style="color:#0000ff;">Dim</span> mainWindowHanle <span style="color:#0000ff;">As</span> IntPtr = System.IntPtr.Zero<br /><br />        <span style="color:#0000ff;">SyncLock</span> <span style="color:#0000ff;">GetType</span>(FilesView)<br />            mainWindowHanle = MemoryMappedFile.ReadHandle(<span style="color:#006080;">"LocalsharedMemoryFilesView"</span>)<br />        <span style="color:#0000ff;">End</span> <span style="color:#0000ff;">SyncLock</span><br /><br />        <span style="color:#0000ff;">If</span> mainWindowHanle &lt;&gt; IntPtr.Zero <span style="color:#0000ff;">Then</span><br />            <span style="color:#0000ff;">Dim</span> result <span style="color:#0000ff;">As</span> <span style="color:#0000ff;">Boolean</span><br />            result = ShowWindowAsync(mainWindowHanle, SW_SHOWDEFAULT)<br />            result = SetForgroundWindow(mainWindowHanle)<br />            result = UpdateWindow(mainWindowHanle)<br />            SetFocus(mainWindowHanle)<br />        <span style="color:#0000ff;">End</span> <span style="color:#0000ff;">If</span><br />    <span style="color:#0000ff;">Catch</span> ex <span style="color:#0000ff;">As</span> Exception<br /><br />    <span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Try</span><br />    Application.Current.Shutdown()<br /><br />    <span style="color:#0000ff;">Try</span><br />        _mutex.ReleaseMutex()<br />    <span style="color:#0000ff;">Catch</span> ex <span style="color:#0000ff;">As</span> Exception<br /><br />    <span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Try</span><br /><span style="color:#0000ff;">End</span> If</pre><br /></div><p>the ShowWindow or ShowWindowAsync function will indeed restore the window, only with a little problem. It is going to be black. As WPF rendering runs on a separate thread and apparently not listening for main window events :(. Notice that I am not using GC.KeepAlive and GC.Collect like in the original article, but I declared mutex as a class member of Application class, which is a main class in WPF applications. In my case reference to mutex object is kept until Application class is disposed, which is when application shuts down. So GC (Garbage Collector) will not reclaim memory occupied by object mutex  because it would have active reference. </p><p><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/SrF5yl-DL6I/AAAAAAAAACo/0zKUe3qxUcs/s1600-h/blackWindow%5B3%5D.jpg"><img style="BORDER-RIGHT-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px" title="blackWindow" border="0" alt="blackWindow" src="http://lh3.ggpht.com/_AMGIYGGdLVY/SrF5zEnd6JI/AAAAAAAAACs/XgSouBfBHa0/blackWindow_thumb%5B1%5D.jpg?imgmax=800" width="316" height="183" /></a> </p><p>So WPF thread is silent when some other process calls window restore or window show. Well, here is a good thing I mentioned in the beginning. I have complete control of the source code. And it means I can include event listener in the application main message loop and from there restore WPF window.<br /><br />Since I know I am calling ShowWindow and SetFocus I can concentrate on the events which are fired in those two cases. It is most likely would be GotFocus, Activated or IsVisibleChanged events for WPF window.<br />In there I call Show method, and … it works! </p><div style="BORDER-BOTTOM: silver 1px solid; TEXT-ALIGN: left; BORDER-LEFT: silver 1px solid; PADDING-BOTTOM: 4px; LINE-HEIGHT: 12pt; PADDING-LEFT: 4px; WIDTH: 97.5%; PADDING-RIGHT: 4px; DIRECTION: ltr; MAX-HEIGHT: 200px; OVERFLOW: auto; BORDER-TOP: silver 1px solid; CURSOR: text; BORDER-RIGHT: silver 1px solid; PADDING-TOP: 4px; BACKGROUND-: 20px 0px 10pxfont-family:'Courier New', courier, monospace;font-size:8pt;color:#f4f4f4;" id="codeSnippetWrapper"   ><br /><pre style="BORDER-BOTTOM-STYLE: none; TEXT-ALIGN: left; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: #f4f4f4; MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 186.88%; PADDING-RIGHT: 0px; DIRECTION: ltr; BORDER-TOP-STYLE: none; HEIGHT: 256px; BORDER-LEFT-STYLE: none; OVERFLOW: visible; PADDING-TOP: 0pxfont-family:'Courier New', courier, monospace;font-size:8pt;color:black;" id="codeSnippet"   ><br />    <span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> FilesView_Activated(<span style="color:#0000ff;">ByVal</span> sender <span style="color:#0000ff;">As</span> System.<span style="color:#0000ff;">Object</span>, <span style="color:#0000ff;">ByVal</span> e <span style="color:#0000ff;">As</span> System.EventArgs) <span style="color:#0000ff;">Handles</span> <span style="color:#0000ff;">MyBase</span>.Activated<br />        Application.Current.MainWindow.Show()<br />    <span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br />    <span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> FileView_GotFocus(<span style="color:#0000ff;">ByVal</span> sender <span style="color:#0000ff;">As</span> System.<span style="color:#0000ff;">Object</span>, <span style="color:#0000ff;">ByVal</span> e <span style="color:#0000ff;">As</span> System.Windows.RoutedEventArgs) <span style="color:#0000ff;">Handles</span> <span style="color:#0000ff;">MyBase</span>.GotFocus<br />        Application.Current.MainWindow.Show()<br />        <span style="color:#008000;">' or simply </span><br />        <span style="color:#008000;">' Me.Show() 'if you are already inside main window class</span><br />    <span style="color:#0000ff;">End</span> <span style="color:#0000ff;">Sub</span><br /><br />    <span style="color:#008000;">' this should also work</span><br />    <span style="color:#0000ff;">Private</span> <span style="color:#0000ff;">Sub</span> FilesView_IsVisibleChanged(<span style="color:#0000ff;">ByVal</span> sender <span style="color:#0000ff;">As</span> System.<span style="color:#0000ff;">Object</span>, <span style="color:#0000ff;">ByVal</span> e <span style="color:#0000ff;">As</span> System.Windows.DependencyPropertyChangedEventArgs) <span style="color:#0000ff;">Handles</span> <span style="color:#0000ff;">MyBase</span>.IsVisibleChanged<br />        <span style="color:#0000ff;">Me</span>.Show()<br />    <span style="color:#0000ff;">End</span> Sub</pre><br /></div><p>That’s it. A lot of sweat for a simple problem, but hey it is <strong>ISolvable</strong> :). </p>
]]>
		</document>
		<document id="98dc1b51a3f6124afdbadda8c4022dfe" url="http://isolvable.blogspot.com/2009/09/vbnet-short-circuit-if-statement-and.html"><![CDATA[<p>Now this was an interesting bug to find. May be it is not a bug, but I can’t explain this behavior otherwise. </p>  <p>When working with databases and trying to cover impedance mismatch cases it is common to use the following logic: </p>  <div id="codeSnippetWrapper">   <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">...<br /><span style="color: #0000ff">Dim</span> primaryUserId <span style="color: #0000ff">As</span> <span style="color: #0000ff">Integer</span>?<br />...<br />Using reader <span style="color: #0000ff">As</span> IDataReader = dataAccess.ExecuteReader(<span style="color: #006080">&quot;usp_CostCenter_Get&quot;</span>, params)<br />    <span style="color: #0000ff">With</span> reader<br />        <span style="color: #0000ff">While</span> .Read()<br />            returnResult = <span style="color: #0000ff">True</span><br />            costCenter = <span style="color: #0000ff">If</span>(.IsDBNull(0), <span style="color: #006080">&quot;&quot;</span>, .GetString(0))<br />            description = <span style="color: #0000ff">If</span>(.IsDBNull(1), <span style="color: #006080">&quot;&quot;</span>, .GetString(1))<br />            primaryUserId = <span style="color: #0000ff">If</span>(.IsDBNull(2), <span style="color: #0000ff">Nothing</span>, .GetInt32(2)) <span style="color: #008000">'' &lt;&lt;&lt;&lt;-- incorrect behavior,</span><br />            <span style="color: #008000">'' if condition is true primaryUserId will get 0 instead of Nothing.</span><br />            <span style="color: #008000">'' 0 - is default value for type Integer, but not for type Integer? or Nullable(of Integer) </span><br />            <span style="color: #008000">'' Nothing - should be the correct value in this case. </span><br />        <span style="color: #0000ff">End</span> <span style="color: #0000ff">While</span><br />    <span style="color: #0000ff">End</span> <span style="color: #0000ff">With</span><br /><span style="color: #0000ff">End</span> Using<br />...</pre><br /></div><br /><div id="codeSnippetWrapper">In case when condition is true you would expect true part of IF statement to execute, while something else happens and primaryUserId receives default value for type Integer not for type Nullable(of Integer) or Integer? . <br />  <br />This is how to correct such behavior:</div><div id="codeSnippetWrapper"><br />  <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">...<br />Using reader <span style="color: #0000ff">As</span> IDataReader = dataAccess.ExecuteReader(<span style="color: #006080">&quot;usp_CostCenter_Get&quot;</span>, params)<br />    <span style="color: #0000ff">With</span> reader<br />        <span style="color: #0000ff">While</span> .Read()<br />            returnResult = <span style="color: #0000ff">True</span><br />            costCenter = <span style="color: #0000ff">If</span>(.IsDBNull(0), <span style="color: #006080">&quot;&quot;</span>, .GetString(0))<br />            description = <span style="color: #0000ff">If</span>(.IsDBNull(1), <span style="color: #006080">&quot;&quot;</span>, .GetString(1))<br />            <br />            <span style="color: #008000">'' expanding IF statement</span><br />            <span style="color: #0000ff">If</span> .IsDBNull(2) <span style="color: #0000ff">Then</span><br />                primaryUserId = <span style="color: #0000ff">Nothing</span><br />            <span style="color: #0000ff">Else</span><br />                primaryUserId = .GetInt32(2)<br />            <span style="color: #0000ff">End</span> <span style="color: #0000ff">If</span><br /><br />        <span style="color: #0000ff">End</span> <span style="color: #0000ff">While</span><br />    <span style="color: #0000ff">End</span> <span style="color: #0000ff">With</span><br /><span style="color: #0000ff">End</span> Using<br />...</pre><br /></div><br /><div>Please let me know if you had experienced this before and agree or disagree with me. <br />  <br />Thank you!</div>  
]]>
		</document>
		<document id="93ec8232551f8ed3cd61e75919b0d671" url="http://isolvable.blogspot.com/2009/09/visual-studio-2008-xaml-designer.html"><![CDATA[<p>There are several reasons why Visual Studio can crash.    <br />- <a href="http://code.msdn.microsoft.com/KB963035">http://code.msdn.microsoft.com/KB963035</a>    <br />- <a href="http://code.msdn.microsoft.com/KB963676">http://code.msdn.microsoft.com/KB963676</a></p>  <p>and some other which I don’t remember now. But I am not going to talk about the above issues, rather about some other case when Visual Studio could crash. </p>  <p>Here is what happens.    <br />Visual Studio Designer could create instances of some of the controls if for example you placed a child control on a form the base class for that child would be instantiated, similar if you have referenced external assemblies which have controls that are on a form, those controls could be instantiated, it depends on a control logic. </p>  <p>If you are creating a control you have to check for Design time compilation versus run-time. See my previous blog on how to handle it in Win Forms and there is plenty of topics on the web how to handle a similar issue for WPF. </p>  <p>Now if control resides in an assembly which is located on a shared or networking folder, then logic of that control would be executed in a different security context, and AccessDenied exception could be thrown. In my case Visual Studio was not handling this exception properly and was crashing. DWatson was executing and collecting crash data but that did help.    <br />    <br />What should happen is VS IDE should handle such exception and cancel rendering with a proper message and type of the exception.     <br />    <br />I solved it by copying all referenced assemblies into local project folder, then recompiling project and restarting Visual Studio IDE.</p>  <p>   <br />I usually copy assemblies for real projects. I ran into this problem by trying to create real quick prototype and was lazy to transfer dlls locally.     <br /></p>  <p>Try and let me know.    <br />This was another ISolvable problem. I am sorry for being out of touch, but I will try to get back and post since I have a lot of things to share.     </p>  
]]>
		</document>
		<document id="bea10d978cfad35a07a1183c5d4590f" url="http://isolvable.blogspot.com/2010/01/uninstalling-clickonce.html"><![CDATA[<p>ClickOnce deployment model has many benefits, but it also has some deficiencies. One of these deficiencies is inability to uninstall ClickOnce applications for a different user. <br />Let’s take a look at the following scenario.<br />You are an departmental computer admin in a large enterprise where regular users do not have the ability to open “Add/Remove Programs”, but they can however install ClickOnce applications. When ClickOnce application is installed a folder is created in <strong><em>%USERPROFILE%Local SettingsApps</em></strong> for that application. There is also a registry entry added under <strong><em>HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionUninstall</em></strong>. This entry will have an UninstallString for a specific application. Something like this: <br /><strong><em>rundll32.exe dfshim.dll,ShArpMaintain MyClickOnceApplicationName.application, Culture=neutral, PublicKeyToken=9999999999999999, processorArchitecture=msil</em></strong></p><p>Let’s say there are some obsolete ClickOnce applications which need to be removed from a regular user profile. </p><p>If you try logging in under regular user account and SHIFT+RightClick on “Add/Remove Programs” you would be able to invoke “Run as…”, in this case you would attempt to use your admin credentials. But the list of installed applications will not have the one you are looking for, because “Add/Remove Programs” will list apps from CURRENT_MACHINE and admin user profile. Now there is a problem. You could of course give necessary privileges to that regular user and let him do it. But what if you can’t give such privileges to a user, because of a security concern you have or a company policy, or you lack required permissions? Then there is a better way. </p><p>You may create an uninstall.cmd script and place it into original application installation folder, like a shared drive or your IIS. Below is script content. Replace <strong><em>MyClickOnceApplication </em></strong>with the name of your application. Use uninstall command line from the registry (see above on how to get that command). </p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; padding-left: 4px; width: 97.5%; padding-right: 4px; direction: ltr; color: #f4f4f4; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px; background-: 20px 0px 10pxfont-family:&#39;Courier New&#39;, courier, monospace" id="codeSnippetWrapper"><div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum1">   1:</span> echo off</pre><br /><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum2">   2:</span>  </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum3">   3:</span> cls</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum4">   4:</span>  </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum5">   5:</span> Echo MyClickOnceApplication...</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum6">   6:</span>  </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum7">   7:</span> cd c:</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum8">   8:</span>  </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum9">   9:</span> taskkill /F /IM <span style="color: #006080">&quot;MyClickOnceApplication.exe&quot;</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum10">  10:</span>  </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum11">  11:</span> cls</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum12">  12:</span>  </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum13">  13:</span> Echo Uninstalling MyClickOnceApplication...</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum14">  14:</span>  </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum15">  15:</span> cd %USERPROFILE%Start MenuProgramsStartup </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum16">  16:</span>  </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum17">  17:</span> <span style="color: #0000ff">if</span> exist <span style="color: #006080">&quot;MyClickOnceApplication.appref-ms&quot;</span> del <span style="color: #006080">&quot;MyClickOnceApplication.appref-ms&quot;</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum18">  18:</span>  </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum19">  19:</span> cd c:windows</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible"><span style="color: #606060" id="lnum20">  20:</span> rundll32.exe dfshim.dll,ShArpMaintain MyClickOnceApplicationName.application, Culture=neutral, PublicKeyToken=0000000000000000, processorArchitecture=msil</pre><!--CRLF--></div></div>This is using VB script and SendKey to auto press OK button during uninstall. <div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.8%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; height: 189px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"><div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum1">   1:</span> <span style="color: #0000ff">On</span> <span style="color: #0000ff">Error</span> <span style="color: #0000ff">Resume</span> <span style="color: #0000ff">Next</span> </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum2">   2:</span> <span style="color: #0000ff">Set</span> objShell = WScript.CreateObject(<span style="color: #006080">&quot;WScript.Shell&quot;</span>)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum3">   3:</span> objShell.Run <span style="color: #006080">&quot;taskkill /f /im MyClickOnceApplication*&quot;</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum4">   4:</span> <span style="color: #0000ff">Dim</span> returnCode</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 201.57%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; height: 16px; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum5">   5:</span> returnCode = objShell.Run(<span style="color: #006080">&quot;cmd /K CD &quot;</span> + Chr(34) + <span style="color: #006080">&quot;%USERPROFILE%Start MenuProgramsStartup&quot;</span> + Chr(34)+<span style="color: #006080">&quot; &amp; del &quot;</span> + Chr(34)+<span style="color: #006080">&quot;MyClickOnceApplication.appref-ms&quot;</span> + Chr(34),0, <span style="color: #0000ff">false</span>)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 186.97%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; height: 14px; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum6">   6:</span> objShell.Run <span style="color: #006080">&quot;rundll32.exe dfshim.dll,ShArpMaintain MyClickOnceApplication.application, Culture=neutral, PublicKeyToken=0000000000000000, processorArchitecture=msil&quot;</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum7">   7:</span> <span style="color: #0000ff">Do</span> <span style="color: #0000ff">Until</span> Success = <span style="color: #0000ff">True</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum8">   8:</span>     Success = objShell.AppActivate(<span style="color: #006080">&quot;MyClickOnceApplication&quot;</span>)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum9">   9:</span>     Wscript.Sleep 200</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum10">  10:</span> <span style="color: #0000ff">Loop</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum11">  11:</span> objShell.SendKeys <span style="color: #006080">&quot;OK&quot;</span></pre><!--CRLF--></div></div><p>Then you may either send a link to the user, or issue required update which in turn calls one of the above scripts. If you are using script without SendKey command then user will see the following window and you would need to instruct user to click OK button. </p><p><a href="http://lh4.ggpht.com/_AMGIYGGdLVY/S0Tre-rY5hI/AAAAAAAAADI/vkEZvTIEJ0E/s1600-h/image%5B3%5D.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/_AMGIYGGdLVY/S0TrfH9-ZaI/AAAAAAAAADM/i8pKDSO1yjw/image_thumb%5B1%5D.png?imgmax=800" width="441" height="265" /></a>&#160;</p><h3>Conclusion </h3><p>Now you know how to remove ClickOnce apps for a different user. Although many of these commands are exposed via APIs you would still need to run ProcMon to monitor registry changes. Simply removing <strong><em>HKEY_USERS&lt;Retrieved User SID&gt;SoftwareMicrosoftWindowsCurrentVersionUninstall</em></strong>&#160; and related entries in “<strong><em>USERPROFILELocal SettingsApps..</em></strong>” folder corrupts ClickOnce cache. Removing the whole <strong><em>Apps</em></strong> store fixes it, but user looses all ClickOnce apps in that case and related settings. <br />This problem was somewhat <strong>ISolvable</strong> problem :). </p>  
]]>
		</document>
		<document id="913a60c2d3eee44291343ebdb80fbc9b" url="http://isolvable.blogspot.com/2010/03/attached-behaviors.html"><![CDATA[<div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:7a4e2923-3b28-4182-8566-b402e76cf230" class="wlWriterEditableSmartContent">Technorati Tags: <a href="http://technorati.com/tags/WPF" rel="tag">WPF</a>,<a href="http://technorati.com/tags/Attached+Behaviors" rel="tag">Attached Behaviors</a>,<a href="http://technorati.com/tags/XAML" rel="tag">XAML</a>,<a href="http://technorati.com/tags/DataGrid" rel="tag">DataGrid</a>,<a href="http://technorati.com/tags/SelectionChanged" rel="tag">SelectionChanged</a>,<a href="http://technorati.com/tags/ScrollIntoView" rel="tag">ScrollIntoView</a></div><p>It is kind of late in the game, but I thought I would cover how to bring WPF DataGrid selected item into view using Attached Behaviors. There is a nice <a href="http://www.codeproject.com/KB/WPF/AttachedBehaviors.aspx" target="_blank">article by Josh Smith</a> which covers Attached Behaviors in more details. I will just cover a specific case with DataGrid. </p><p>When you are using <a href="http://en.wikipedia.org/wiki/Model_View_ViewModel" target="_blank">MVVM</a> sometimes there is a business need to change selected item from ViewModel and when it happens occasionally users will need to manually scroll to that item. This could be very confusing to the user. The desired behavior would be to scroll selected item into the view automatically.&#160; </p><p>There are multiple ways to solve this problem:</p><p>- Create an event handler for DataGrid.SelectionChanged event. If you however have multiple DataGrids in your project your code behind file will be polluted with these handlers. This is exactly the case why we are using MVVM to avoid code in code behind files and have a clear separation of concerns. </p><p>- Second approach will require extending DataGrid class and adding desired behavior. This is an overkill, since now everybody on the project will need to remember to use custom DataGrid. And if there are many of them it requires changes. </p><p>- Third approach using Attached Behaviors is very lightweight, “XAML friendly” and preserves MVVM separation of concerns.&#160; All you need is to create a separate class which can be used sparingly as developers see fit, it can sit in your project and be handy when need arises. </p><p>Below is an example of such class I used for DataGrid. </p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"> <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">namespace</span> MyProject.AttachedBehaviors<br />{<br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> DataGridBehavior<br />    {<br />        <span style="color: #cc6633">#region</span> AutoScrollIntoView<br /><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">bool</span> GetAutoScrollIntoView(DataGrid dataGrid)<br />        {<br />            <span style="color: #0000ff">return</span> (<span style="color: #0000ff">bool</span>)dataGrid.GetValue(AutoScrollIntoViewProperty);<br />        }<br /><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">void</span> SetAutoScrollIntoView(<br />          DataGrid dataGrid, <span style="color: #0000ff">bool</span> <span style="color: #0000ff">value</span>)<br />        {<br />            dataGrid.SetValue(AutoScrollIntoViewProperty, <span style="color: #0000ff">value</span>);<br />        }<br /><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">readonly</span> DependencyProperty AutoScrollIntoViewProperty =<br />            DependencyProperty.RegisterAttached(<br />            <span style="color: #006080">&quot;AutoScrollIntoView&quot;</span>,<br />            <span style="color: #0000ff">typeof</span>(<span style="color: #0000ff">bool</span>),<br />            <span style="color: #0000ff">typeof</span>(DataGridBehavior),<br />            <span style="color: #0000ff">new</span> UIPropertyMetadata(<span style="color: #0000ff">false</span>, OnAutoScrollIntoViewWhenSelectionChanged));<br /><br />        <span style="color: #0000ff">static</span> <span style="color: #0000ff">void</span> OnAutoScrollIntoViewWhenSelectionChanged(<br />          DependencyObject depObj, DependencyPropertyChangedEventArgs e)<br />        {<br />            DataGrid dataGrid = depObj <span style="color: #0000ff">as</span> DataGrid;<br />            <span style="color: #0000ff">if</span> (dataGrid == <span style="color: #0000ff">null</span>)<br />                <span style="color: #0000ff">return</span>;<br /><br />            <span style="color: #0000ff">if</span> (!(e.NewValue <span style="color: #0000ff">is</span> <span style="color: #0000ff">bool</span>))<br />                <span style="color: #0000ff">return</span>;<br /><br />            <span style="color: #0000ff">if</span> ((<span style="color: #0000ff">bool</span>)e.NewValue)<br />                dataGrid.SelectionChanged += OnDataGridSelectionChanged;<br />            <span style="color: #0000ff">else</span><br />                dataGrid.SelectionChanged -= OnDataGridSelectionChanged;<br />        }<br /><br />        <span style="color: #0000ff">static</span> <span style="color: #0000ff">void</span> OnDataGridSelectionChanged(<span style="color: #0000ff">object</span> sender, RoutedEventArgs e)<br />        {<br />            <span style="color: #008000">// Only react to the SelectionChanged event raised by the DataGrid</span><br />            <span style="color: #008000">// Ignore all ancestors.</span><br />            <span style="color: #0000ff">if</span> (!Object.ReferenceEquals(sender, e.OriginalSource))<br />                <span style="color: #0000ff">return</span>;<br /><br />            DataGrid dataGrid = e.OriginalSource <span style="color: #0000ff">as</span> DataGrid;<br />            <span style="color: #0000ff">if</span> (dataGrid != <span style="color: #0000ff">null</span> &amp;&amp; dataGrid.SelectedItem != <span style="color: #0000ff">null</span>)<br />                dataGrid.ScrollIntoView(dataGrid.SelectedItem);<br />        }<br /><br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">// AutoScrollIntoView</span><br /><br />    }<br />}<br /></pre>  <br /></div><p></p><p>Now is XAML you will need to reference the above namespace:</p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 78.97%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; height: 30px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"> <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 89.06%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; height: 15px; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">xmlns:localBehaviors=&quot;clr-namespace:MyProject.AttachedBehaviors&quot;</pre></div><p></p><p>And use it in your DataGrid in the following manner whenever you like to see such behavior. </p><font color="#a31515" size="2"><font color="#a31515" size="2">    <div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper">     <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">&lt;</span><span style="color: #800000">wpfToolkit:DataGrid</span> <br />    <span style="color: #ff0000">EnableColumnVirtualization</span><span style="color: #0000ff">=&quot;True&quot;</span><br />    <span style="color: #ff0000">VirtualizingStackPanel</span>.<span style="color: #ff0000">VirtualizationMode</span><span style="color: #0000ff">=&quot;Recycling&quot;</span><br />    <span style="color: #ff0000">Grid</span>.<span style="color: #ff0000">Row</span><span style="color: #0000ff">=&quot;0&quot;</span><br />    <span style="color: #ff0000">DataContext</span><span style="color: #0000ff">=&quot;{Binding}&quot;</span><br />    <span style="color: #ff0000">ItemsSource</span><span style="color: #0000ff">=&quot;{Binding Path=Entities}&quot;</span><br />    <span style="color: #ff0000">SelectedItem</span><span style="color: #0000ff">=&quot;{Binding <br />                        Path=EntityNavigation.CurrentEntity,<br />                        UpdateSourceTrigger=PropertyChanged, <br />                        Mode=TwoWay, <br />                        Converter={StaticResource ChildToParentEntityViewModelConverter}}&quot;</span><br />    <span style="color: #ff0000">localBehaviors:DataGridBehavior</span>.<span style="color: #ff0000">AutoScrollIntoView</span><span style="color: #0000ff">=&quot;True&quot;</span><br /><br />...<br /><span style="color: #0000ff">/&gt;</span></pre>      <br /></div>  </font></font><p>This (<span style="color: #ff0000">localBehaviors:DataGridBehavior</span>.<span style="color: #ff0000">AutoScrollIntoView</span><span style="color: #0000ff">=&quot;True&quot;</span>) last line in the XAML markup above will do it. </p><p>This was another <font color="#2b91af" size="2"><font color="#2b91af" size="2">ISolvable</font></font><font size="2"><font color="#000000">&lt;TProblem&gt;</font></font>.</p><p>Happy Coding!</p>  
]]>
		</document>
		<document id="d9b4cb6b22c6296ff495cbdbc4116f61" url="http://isolvable.blogspot.com/2010/03/avoid-memory-leaks-in-net.html"><![CDATA[<p>There is enough said about memory leaks in .NET when using events. BING or Google for &quot;weak event&quot;. The problem is that when you have an observer for some object's event myObj.MyEvent when observer is no longer needed myObj.MyEvent still keeps reference to observer's event handling delegate. Thus preventing observer from being garbage collected. The solution is to always unsubscribe observer from any events it might listen to before disposing it. Well, this is easier said than done. </p>  <p>One way to deal with this issue is to create weak event references. There are many patterns and frameworks which support weak events such as EventAggregator in Prism or in WPF MVVM app template there is WeakEventReference. </p>  <p>The other way is to keep reference to event handler and always unsubscribe before disposing. This could be tricky. </p>  <p>The third way is very simple but covers only a subset of all possible event scenarios. This is what I will show in here. Suppose you have a handler which is no longer needed after event is fired. Then you can use lambda expression or anonymous delegate and keep reference to it only until it is in the scope. Here is an example. In this example I actually have two handlers which are not needed after either one of them is executed.&#160;&#160; </p> <div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper">  <div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum1">   1:</span> <span style="color: #008000">// declare a reference to event handler</span></pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum2">   2:</span> EventHandler myEvent1Result = <span style="color: #0000ff">null</span>;</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum3">   3:</span> EventHandler myEvent2Result = <span style="color: #0000ff">null</span>;</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum4">   4:</span>&#160; </pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum5">   5:</span> <span style="color: #008000">// when MyEvent1 fires we handle it like so </span></pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum6">   6:</span> myEvent1Result = (s, ea) =&gt;</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum7">   7:</span>     {</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum8">   8:</span>         <span style="color: #008000">// unsubscribe from events immedeately</span></pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum9">   9:</span>         (s <span style="color: #0000ff">as</span> MyObject).MyEvent1Event -= myEvent1Result;</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum10">  10:</span>         (s <span style="color: #0000ff">as</span> MyObject).MyEvent2Event -= myEvent2Result;</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum11">  11:</span>&#160; </pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum12">  12:</span>         <span style="color: #008000">// do some other processing</span></pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum13">  13:</span>         <span style="color: #008000">//....</span></pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum14">  14:</span>     };</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum15">  15:</span>&#160; </pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum16">  16:</span> <span style="color: #008000">// when MyEvent2 fires we handle it like so </span></pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum17">  17:</span> myEvent2Result = (s, ea) =&gt;</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum18">  18:</span>    {</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum19">  19:</span>        <span style="color: #008000">// unsubscribe from events immedeately</span></pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum20">  20:</span>        (s <span style="color: #0000ff">as</span> MyObject).MyEvent1Event -= myEvent1Result;</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum21">  21:</span>        (s <span style="color: #0000ff">as</span> MyObject).MyEvent2Event -= myEvent2Result;</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum22">  22:</span>&#160; </pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum23">  23:</span>        <span style="color: #008000">// do some other processing</span></pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum24">  24:</span>        <span style="color: #008000">//....</span></pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum25">  25:</span>    };</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum26">  26:</span>&#160; </pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum27">  27:</span> <span style="color: #008000">// once we created event handlers now we can subscribe them.</span></pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum28">  28:</span> myObject.MyEvent1Event += myEvent1Result;</pre><!--CRLF-->    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px"><span style="color: #606060" id="lnum29">  29:</span> myObject.MyEvent2Event += myEvent2Result; </pre><!--CRLF--></div></div><br /><p>Happy coding!</p>  
]]>
		</document>
		<document id="c7d0a1521bcf25ff49bc2cdbdd75a23f" url="http://isolvable.blogspot.com/2010/03/wpf-datagrid-scrollintoview.html"><![CDATA[<p>   <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:08782c84-0675-461e-8376-bbf21334054c" class="wlWriterEditableSmartContent">Technorati Tags: <a href="http://technorati.com/tags/WPF" rel="tag">WPF</a>,<a href="http://technorati.com/tags/DataGrid" rel="tag">DataGrid</a>,<a href="http://technorati.com/tags/ScrollIntoView" rel="tag">ScrollIntoView</a>,<a href="http://technorati.com/tags/bug" rel="tag">bug</a></div> </p>  <p>In my <a href="http://isolvable.blogspot.com/2010/03/attached-behaviors.html" target="_blank">previous post</a> I talked about using Attached Behaviors to scroll selected item into view. It turns out there is a bug in WPF DataGrid and ScrollIntoView could sometimes throw NullReferenceException when <font color="#ff0000" size="2"><font color="#ff0000" size="2">VirtualizingStackPanel.IsVirtualizing</font></font><font color="#0000ff" size="2"><font color="#0000ff" size="2">=&quot;True&quot; .</font></font></p>  <p>To avoid this exception there was a solution suggested on this forum <a href="http://wpf.codeplex.com/Thread/View.aspx?ThreadId=39458">http://wpf.codeplex.com/Thread/View.aspx?ThreadId=39458</a> which basically executes ScrollIntoView on a thread with a very low priority. </p>  <p>Here is my previous solution with suggested work around. </p>  <div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper">   <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> DataGridBehavior<br />{<br />    <span style="color: #cc6633">#region</span> AutoScrollIntoView<br /><br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">bool</span> GetAutoScrollIntoView(DataGrid dataGrid)<br />    {<br />        <span style="color: #0000ff">return</span> (<span style="color: #0000ff">bool</span>)dataGrid.GetValue(AutoScrollIntoViewProperty);<br />    }<br /><br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">void</span> SetAutoScrollIntoView(<br />      DataGrid dataGrid, <span style="color: #0000ff">bool</span> <span style="color: #0000ff">value</span>)<br />    {<br />        dataGrid.SetValue(AutoScrollIntoViewProperty, <span style="color: #0000ff">value</span>);<br />    }<br /><br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">readonly</span> DependencyProperty AutoScrollIntoViewProperty =<br />        DependencyProperty.RegisterAttached(<br />        <span style="color: #006080">&quot;AutoScrollIntoView&quot;</span>,<br />        <span style="color: #0000ff">typeof</span>(<span style="color: #0000ff">bool</span>),<br />        <span style="color: #0000ff">typeof</span>(DataGridBehavior),<br />        <span style="color: #0000ff">new</span> UIPropertyMetadata(<span style="color: #0000ff">false</span>, OnAutoScrollIntoViewWhenSelectionChanged));<br /><br />    <span style="color: #0000ff">static</span> <span style="color: #0000ff">void</span> OnAutoScrollIntoViewWhenSelectionChanged(<br />      DependencyObject depObj, DependencyPropertyChangedEventArgs e)<br />    {<br />        DataGrid dataGrid = depObj <span style="color: #0000ff">as</span> DataGrid;<br />        <span style="color: #0000ff">if</span> (dataGrid == <span style="color: #0000ff">null</span>)<br />            <span style="color: #0000ff">return</span>;<br /><br />        <span style="color: #0000ff">if</span> (!(e.NewValue <span style="color: #0000ff">is</span> <span style="color: #0000ff">bool</span>))<br />            <span style="color: #0000ff">return</span>;<br /><br />        <span style="color: #0000ff">if</span> ((<span style="color: #0000ff">bool</span>)e.NewValue)<br />            dataGrid.SelectionChanged += OnDataGridSelectionChanged;<br />        <span style="color: #0000ff">else</span><br />            dataGrid.SelectionChanged -= OnDataGridSelectionChanged;<br />    }<br /><br />    <span style="color: #0000ff">static</span> <span style="color: #0000ff">void</span> OnDataGridSelectionChanged(<span style="color: #0000ff">object</span> sender, RoutedEventArgs e)<br />    {<br />        <span style="color: #008000">// Only react to the SelectionChanged event raised by the DataGrid</span><br />        <span style="color: #008000">// Ignore all ancestors.</span><br />        <span style="color: #0000ff">if</span> (!Object.ReferenceEquals(sender, e.OriginalSource))<br />            <span style="color: #0000ff">return</span>;<br /><br />        DataGrid dataGrid = e.OriginalSource <span style="color: #0000ff">as</span> DataGrid;<br />        <span style="color: #0000ff">if</span> (dataGrid != <span style="color: #0000ff">null</span> &amp;&amp; dataGrid.SelectedItem != <span style="color: #0000ff">null</span>)<br />        {<br />            <span style="color: #008000">// this is a workaround to fix the layout issue.</span><br />            <span style="color: #008000">// otherwise ScrollIntoView should work directly. </span><br />            dataGrid.Dispatcher.BeginInvoke(DispatcherPriority.Loaded, <span style="color: #0000ff">new</span> DispatcherOperationCallback(ScrollItemIntoView),dataGrid); <br />        }<br />    }<br /><br />    <span style="color: #0000ff">static</span> <span style="color: #0000ff">object</span> ScrollItemIntoView(<span style="color: #0000ff">object</span> sender)<br />    {<br />        DataGrid dataGrid = sender <span style="color: #0000ff">as</span> DataGrid;<br />        <span style="color: #0000ff">if</span> (dataGrid != <span style="color: #0000ff">null</span> &amp;&amp; dataGrid.SelectedItem != <span style="color: #0000ff">null</span>)<br />        {<br />            dataGrid.ScrollIntoView(dataGrid.SelectedItem);<br />        }<br />        <span style="color: #0000ff">return</span> <span style="color: #0000ff">null</span>; <br />    }<br /><br />    <span style="color: #cc6633">#endregion</span> // AutoScrollIntoView</pre><br /><br />  <br /></div><br /><br /><p>Happy Coding! </p>  
]]>
		</document>
		<document id="f394b57b1971645d036fefafdf04f5ff" url="http://isolvable.blogspot.com/2010/12/code-metrics.html"><![CDATA[<p>This is continuation of my previous post on MVVM project I recently completed. </p>  <p>I decided to analyze some of the code metrics. I really like <a href="http://www.ndepend.com/" target="_blank">NDepend</a> add-in for Visual Studio, but it is not a free tool. So I had to resort to .NET Reflector and multiple community developed add-ins. </p>  <p>Here is a screen shot from <a href="http://reflectoraddins.codeplex.com/wikipage?title=CodeMetrics&amp;referringTitle=Home" target="_blank">CodeMetrics</a> add-in for <a href="http://www.red-gate.com/products/dotnet-development/reflector/" target="_blank">.NET Reflector</a>. </p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TQ_8sj8QWrI/AAAAAAAAAGs/meWu2lmdEVQ/image%5B6%5D.png?imgmax=800" width="650" height="314" /> </p>  <p>This tool also provides nice statistics for classes, methods&#160; or modules from IL assemblies.    <br />Some people like to talk a lot about <a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity" target="_blank">Cyclomatic Complexity</a>, while it is useful only on a per method basis. Cyclomatic Complexity of the whole project grows dramatically as your project grows and becomes inadequate in such cases. The rule of thumb is if Cyclomatic Complexity greater than 15 the project will have increased difficulty in knowledge transfer, testing, debugging and maintenance. Additionally such code tends to be more rigid which means changes are more difficult to implement. </p>  <p>Below is a recommendation given by NDepend: </p>  <p><u><i>Recommendations</i></u>: Methods where CC is higher than 15 are hard to understand and maintain. Methods where CC is higher than 30 are extremely complex and should be split in smaller methods (except if they are automatically generated by a tool). </p>  <p>In my project there are 14 193 methods, most of the ones with higher cyclomatic complexity were generated and the rest 13 923 have cyclomatic complexity of 9 or less, which is about 98% of all code base. </p>  <p>Another useful metrics for types (classes) is “<a href="http://www.ndepend.com/Metrics.aspx#DIT" target="_blank">Depth of Inheritance Tree</a>”. Here is a recommendation given by NDepend about depth of inheritance tree:</p>  <p><b><a name="DIT">Depth of Inheritance Tree (DIT):</a></b> The Depth of Inheritance Tree for a class or a structure is its number of base classes (including the <i>System.Object</i> class thus DIT &gt;= 1).     <br /><u><i>Recommendations</i></u>: Types where DepthOfInheritance is higher or equal than 6 might be hard to maintain. However it is not a rule since sometime your classes might inherit from tier classes which have a high value for depth of inheritance. For example, the average depth of inheritance for framework classes which derive from <i>System.Windows.Forms.Control</i> is 5.3. </p>  <p>In SHMMP Manager Average Depth of Inheritance Tree is 4.08, which is very good. </p>  <p>There are other numbers CodeMetrics add-in provides, some you may use to impress some people, usually those unfamiliar with programming :). Such as number of lines of code. In SHMMP Manager there are about 200 000 lines of code. This number is even greater if taken straight from IL disassembler and is 1 295 965, which, if printed, translates to roughly 43 000 pages. Of course 90% of these lines were generated by the compiler :)</p>  <p>NDepend can also analyze code for testability and compositionality and provides nice dependency graphs and matrices. Based on Dependency Matrix, for an example, one may start refactoring process. Keeping track of dependencies especially important when building common class libraries or frameworks. </p>  <p>So try these tools and see if they are helpful.</p>  
]]>
		</document>
		<document id="7328e8a7b99cd86811828e722b4cf774" url="http://isolvable.blogspot.com/2010/12/inotifypropertychanged-anti-pattern.html"><![CDATA[<p>In this post I will write about some problems I faced with INotifyPropertyChanged while using <a href="http://en.wikipedia.org/wiki/Model_View_ViewModel">MVVM</a> and some solutions available. </p><p>Let’s first examine the problem. </p><p><strong>Is INotifyPropertyChanged an anti-pattern or not? </strong></p><p>The short answer is <strong>yes</strong>? But it really depends on how big is the project. It is very common to use PropertyChanged events inside ViewModels of an MVVM application to propagate changes occurring in your classes back to presentation layer via WPF data binding mechanism. </p><p>So why the size of the project matters. Well, it all comes down to maintainability of the code base.&#160; PropertyChange events are usually raised by passing property names as string constants (that’s a bummer). If the number of view models and their properties is large, the project will have too many hard coded strings. Yes, it is possible to move these strings at the beginning of the class file, and there are very nice tools which can do that for you, such as <a href="http://www.devexpress.com/Products/Visual_Studio_Add-in/Refactoring/">Refactor!</a> from DevExpress or even Visual Studio itself. But still if you are changing schema and your data model is regenerated then most likely corresponding view models will require changes as well and that is where maintenance becomes a nightmare on projects with more than 10 view models. Add to it all the business complexities and tracking control flow will be almost impossible. So the question basically is do you want to pollute your code with hardcoded string? If code is large – then probably NO, if code is small then I guess it’s OK. </p><p>Now let’s see what are the options (this list is not extensive). </p><p>1. Why not use reflection to get property names, when property names change we can simply recompile? So <a href="http://karlshifflett.wordpress.com/2009/08/02/inotifypropertychanged-how-to-remove-the-property-name-string-code-smell/">such solution</a> was proposed by Karl Shifflett – a Program Manager on Patterns and Practices Prism Team, Microsoft Corporation. But later <a href="http://wpfdisciples.wordpress.com/bios/sacha-barber/">Sacha Barber</a> found a flaw in such approach with Stack Frames. Karl since updated his post and commented on this problem. Basically if you compile your code for release and remove pdb (debug database with initial method and property names) files, due to compiler optimization the property names will not be properly resolved and some calls will end up in the wrong place inside the stack :(. Sacha since proposed his own framework for MVVM called <a href="http://www.codeproject.com/KB/WPF/Cinch.aspx">Cinch</a>. While it sounds like a solid piece of work it doesn’t really address PropertyChanged problem. </p><p>2. Josh Smith <a href="http://joshsmithonwpf.wordpress.com/2009/07/11/one-way-to-avoid-messy-propertychanged-event-handling/">blogged about this problem</a> as well and proposed using lambda expressions to validate property names at compile time, thus avoiding StackFrame problem. He used a property observer pattern and created a generic class (PropertyObserver&lt;TPropertySource&gt;) to handle it along with weak event listeners. Still this approach requires changes to be propagates when properties change. While again there are tools which can do this in semi-automated fashion it could be error prone when there are too many dependencies between properties within and outside of the class. </p><p>3. Another approach is to use weak event referencing for all independent properties. Such solution called <a href="http://updatecontrols.net/doc/tips/notinotifypropertychanged">UpdateControls</a> was proposed by Michael Perry. He has a great <a href="http://updatecontrols.net/cs/videos.shtml">set of videos</a> on his web site explaining this approach. And this is wonderful, but it because an overkill when working with large collections. It takes up too much memory to register for every single independent property in let’s say a list of 100 000 records. </p><p>4. My approach. I decided to use a mix of things from the above.    <br />&#160;&#160; - All my Data Model classes are generated and use Property Changed events. Since there is no business logic which resides in these classes there is no complexity associated in maintaining custom event handlers or raising of events. Everything is generated and regenerated automatically when database schema changes.     <br />&#160;&#160; - For my view models I used a similar approach. But use UpdateControl for the properties. Partial view model classes are generated based off of a database schema (dbml XML model file) using slightly modified T4 template provided by <a href="http://damieng.com/blog/2008/09/14/linq-to-sql-template-for-visual-studio-2008">Damien</a>. Here is my template below. </p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">&lt;# <span style="color: #008000">// L2ST4 - LINQ to SQL templates for T4 v0.85 - http://www.codeplex.com/l2st4</span><br /><span style="color: #008000">// Copyright (c) Microsoft Corporation.  All rights reserved.</span><br /><span style="color: #008000">// This source code is made available under the terms of the Microsoft Public License (MS-PL)</span><br />#&gt;&lt;#@ template language=<span style="color: #006080">&quot;C#v3.5&quot;</span> hostspecific=<span style="color: #006080">&quot;True&quot;</span><br />#&gt;&lt;#@ include file=<span style="color: #006080">&quot;../DataModels/L2ST4.ttinclude&quot;</span><br />#&gt;&lt;#@ assembly name=<span style="color: #006080">&quot;..My DocumentsVisual Studio 2008ProjectsSHMMPShmmpManagerShmmpManager inDebugShmmpManager.exe&quot;</span> <br />#&gt;&lt;#@ import <span style="color: #0000ff">namespace</span>=<span style="color: #006080">&quot;ShmmpManager.ViewModels&quot;</span><br />#&gt;&lt;#@ output extension=<span style="color: #006080">&quot;.generated.cs&quot;</span><br />#&gt;&lt;# <span style="color: #008000">// Set options here</span><br />var options = <span style="color: #0000ff">new</span> {<br />DbmlFileName = Host.TemplateFile.Replace(<span style="color: #006080">&quot;ViewModel.tt&quot;</span>,<span style="color: #006080">&quot;Data.dbml&quot;</span>).Replace(<span style="color: #006080">&quot;ViewModels&quot;</span>,<span style="color: #006080">&quot;DataModels&quot;</span>), <span style="color: #008000">// Which DBML file to operate on (same filename as template)</span><br />SerializeDataContractSP1 = <span style="color: #0000ff">false</span>, <span style="color: #008000">// Emit SP1 DataContract serializer attributes</span><br />FilePerEntity = <span style="color: #0000ff">true</span>, <span style="color: #008000">// Put each class into a separate file</span><br />StoredProcedureConcurrency = <span style="color: #0000ff">false</span>, <span style="color: #008000">// Table updates via an SP require @@rowcount to be returned to enable concurrency</span><br />};<br />var code = <span style="color: #0000ff">new</span> CSharpCodeLanguage();<br />var data = <span style="color: #0000ff">new</span> Data(options.DbmlFileName);<br />var manager = Manager.Create(Host, GenerationEnvironment);<br />data.ContextNamespace = (<span style="color: #0000ff">new</span> <span style="color: #0000ff">string</span>[] { manager.DefaultProjectNamespace }).FirstOrDefault(s =&gt; !String.IsNullOrEmpty(s));<br />data.EntityNamespace = (<span style="color: #0000ff">new</span> <span style="color: #0000ff">string</span>[] { manager.DefaultProjectNamespace }).FirstOrDefault(s =&gt; !String.IsNullOrEmpty(s));<br /><span style="color: #0000ff">string</span> baseClassName = <span style="color: #006080">&quot;EntityViewModelBase&quot;</span>;<br /><span style="color: #0000ff">string</span> entityBase = <span style="color: #006080">&quot;ViewModelBase&quot;</span>;<br />manager.StartHeader();<br />#&gt;#pragma warning disable 1591<br /><span style="color: #008000">//------------------------------------------------------------------------------</span><br /><span style="color: #008000">// &lt;auto-generated&gt;</span><br /><span style="color: #008000">//     This code was generated by LINQ to SQL template for T4 C#</span><br /><span style="color: #008000">//     Generated at &lt;#=DateTime.Now#&gt;</span><br /><span style="color: #008000">//       The original template was modified by Ivan to meet certain </span><br /><span style="color: #008000">//        project related requirements. </span><br /><span style="color: #008000">//</span><br /><span style="color: #008000">//     Changes to this file may cause incorrect behavior and will be lost if</span><br /><span style="color: #008000">//     the code is regenerated.</span><br /><span style="color: #008000">// &lt;/auto-generated&gt;</span><br /><span style="color: #008000">//------------------------------------------------------------------------------</span><br /><span style="color: #0000ff">using</span> System;<br /><span style="color: #0000ff">using</span> System.Text;<br /><span style="color: #0000ff">using</span> System.Linq;<br /><span style="color: #0000ff">using</span> System.Data.Linq;<br /><span style="color: #0000ff">using</span> System.Data.Linq.Mapping;<br /><span style="color: #0000ff">using</span> System.Collections.Generic;<br /><span style="color: #0000ff">using</span> ShmmpManager.DataModels;<br />&lt;#<span style="color: #0000ff">if</span> (data.Functions.Count &gt; 0) {#&gt;<br /><span style="color: #0000ff">using</span> System.Reflection;<br />&lt;#}<br /><span style="color: #0000ff">string</span> dataContractAttributes = (options.SerializeDataContractSP1) ? <span style="color: #006080">&quot;IsReference=true&quot;</span> : <span style="color: #006080">&quot;&quot;</span>;<br /><span style="color: #0000ff">if</span> (data.Serialization) {#&gt;<br /><span style="color: #0000ff">using</span> System.Runtime.Serialization;<br />&lt;#}#&gt;<br /><span style="color: #0000ff">using</span> UpdateControls;<br /><br />&lt;# manager.EndBlock();<br /><span style="color: #0000ff">foreach</span>(Table table <span style="color: #0000ff">in</span> data.Tables) {<br /><span style="color: #0000ff">foreach</span>(TableClass class1 <span style="color: #0000ff">in</span> table.Classes) {<br />manager.StartNewFile(Path.ChangeExtension(class1.Name + <span style="color: #006080">&quot;ViewModel&quot;</span>,<span style="color: #006080">&quot;.generated.cs&quot;</span>));<br /><span style="color: #0000ff">if</span> (!String.IsNullOrEmpty(data.EntityNamespace)) {#&gt;<br /><br /><span style="color: #0000ff">namespace</span> &lt;#=data.EntityNamespace#&gt;.ViewModels<br />{    <br />&lt;#        }<br /><span style="color: #0000ff">if</span> (data.Serialization &amp;&amp; class1.IsSerializable) {<br />#&gt;    [DataContract(&lt;#=dataContractAttributes#&gt;)]<br />&lt;#        }<br /><span style="color: #0000ff">if</span> (class1 == table.BaseClass) {#&gt;<br />&lt;#            <span style="color: #0000ff">foreach</span>(TableClass subclass <span style="color: #0000ff">in</span> data.TableClasses.Where(c =&gt; c.Table == table)) {<br /><span style="color: #0000ff">if</span> (!String.IsNullOrEmpty(subclass.InheritanceCode)) {#&gt;<br />[InheritanceMapping(Code=<span style="color: #006080">@&quot;&lt;#=subclass.InheritanceCode#&gt;&quot;</span>, Type=<span style="color: #0000ff">typeof</span>(&lt;#=subclass.Name#&gt;)&lt;# <span style="color: #0000ff">if</span> (subclass.IsInheritanceDefault) {#&gt;, IsDefault=<span style="color: #0000ff">true</span>&lt;#}#&gt;)]<br />&lt;#                }<br /><span style="color: #0000ff">if</span> (data.Serialization &amp;&amp; subclass.IsSerializable) {#&gt;[KnownType(<span style="color: #0000ff">typeof</span>(&lt;#=subclass.Name#&gt;))]&lt;#}<br />}<br />#&gt;    &lt;#=code.Format(class1.TypeAttributes)#&gt;<span style="color: #0000ff">partial</span> <span style="color: #0000ff">class</span> &lt;#=class1.Name#&gt;ViewModel : &lt;#<br /><span style="color: #0000ff">if</span> (class1.Name == <span style="color: #006080">&quot;EquipmentPremiumRisk&quot;</span> <br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumManaged&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumShared&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumCapped&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumDirectedService&quot;</span>){ #&gt; EquipmentPremiumViewModelBase &lt;#}<br /><span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (class1.Name == <span style="color: #006080">&quot;EquipmentPremiumAdjustmentRisk&quot;</span> <br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumAdjustmentManaged&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumAdjustmentShared&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumAdjustmentCapped&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumAdjustmentDirectedService&quot;</span>){ #&gt; EquipmentPremiumAdjustmentViewModelBase &lt;#}                        <br /><span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (!String.IsNullOrEmpty(entityBase)) {#&gt; &lt;#=baseClassName#&gt; &lt;# }#&gt;<br />&lt;#         <span style="color: #0000ff">else</span> { #&gt;&lt;#=class1.SuperClass.Name#&gt; &lt;#}}#&gt;<br />{        <br /><span style="color: #cc6633">#region</span> Fields<br /><span style="color: #008000">// list to support error validations</span><br /><span style="color: #0000ff">protected</span> <span style="color: #0000ff">new</span> <span style="color: #0000ff">static</span> List&lt;PropertyRuleBase&lt;ViewModelBase&gt;&gt; _propertiesRules = <span style="color: #0000ff">new</span> List&lt;PropertyRuleBase&lt;ViewModelBase&gt;&gt;();<br /><br /><span style="color: #008000">// list to support warnings validations. </span><br /><span style="color: #0000ff">protected</span> <span style="color: #0000ff">new</span> <span style="color: #0000ff">static</span> List&lt;PropertyRuleBase&lt;ViewModelBase&gt;&gt; _propertiesWarnings = <span style="color: #0000ff">new</span> List&lt;PropertyRuleBase&lt;ViewModelBase&gt;&gt;();<br /><br /><span style="color: #008000">// static list to support singleton pattern. </span><br /><span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> List&lt;&lt;#=class1.Name#&gt;ViewModel&gt; _instances = <span style="color: #0000ff">new</span> List&lt;&lt;#=class1.Name#&gt;ViewModel&gt;();<br /><br /><span style="color: #cc6633">#endregion</span><br /><br /><span style="color: #cc6633">#region</span> Data Members<br /><span style="color: #0000ff">private</span> &lt;#=class1.Name#&gt; _&lt;#= class1.Name #&gt;;<br /><span style="color: #cc6633">#endregion</span><br /><br /><span style="color: #cc6633">#region</span> Properties<br /><br /><span style="color: #0000ff">public</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">bool</span> IsNew<br />{<br />get<br />{<br />&lt;#              <span style="color: #0000ff">if</span> (class1.Name == <span style="color: #006080">&quot;Agent&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;Message&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;TypeCoverageDetail&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;ErrorLog&quot;</span> <br />|| class1.Name.StartsWith(<span style="color: #006080">&quot;vw&quot;</span>)<br />){#&gt;<br /><span style="color: #0000ff">return</span> _&lt;#= class1.Name #&gt;.&lt;#= class1.PrimaryKey[0].Name #&gt; == <span style="color: #0000ff">default</span>(&lt;#= class1.PrimaryKey[0].Type #&gt;);<br />&lt;#                }<span style="color: #0000ff">else</span>{#&gt;                <br /><span style="color: #0000ff">return</span> String.IsNullOrEmpty(_&lt;#= class1.Name #&gt;.AddedByStaffCode);<br />&lt;#                }#&gt;                <br />}<br />}<br /><br />&lt;#         <span style="color: #0000ff">if</span> (class1.Name != <span style="color: #006080">&quot;ErrorLog&quot;</span> <br />&amp;&amp; !class1.Name.StartsWith(<span style="color: #006080">&quot;vw&quot;</span>)<br />) <br />{<br />#&gt;    <br /><br /><span style="color: #0000ff">private</span> Independent _indAudit = <span style="color: #0000ff">new</span> Independent(); <br /><span style="color: #0000ff">public</span> IQueryable&lt;&lt;#= class1.Name #&gt;Audit&gt; Audit<br />{<br />get <br />{<br />_indAudit.OnGet();<br /><span style="color: #0000ff">return</span> from &lt;#=class1.Name#&gt;Audit c <span style="color: #0000ff">in</span> ShmmpAudit.&lt;#=class1.Name#&gt;Audits<br /><span style="color: #0000ff">where</span> c.&lt;#= class1.PrimaryKey[0].Name #&gt; == _&lt;#= class1.Name #&gt;.&lt;#= class1.PrimaryKey[0].Name #&gt;<br />orderby c.DateStamp descending<br />select c;<br />}<br />}<br /><br /><span style="color: #0000ff">private</span> Independent _indHistory = <span style="color: #0000ff">new</span> Independent();<br /><span style="color: #0000ff">public</span> IQueryable&lt;&lt;#= class1.Name #&gt;Audit&gt; History<br />{<br />get<br />{<br />_indHistory.OnGet();<br /><br /><span style="color: #0000ff">return</span> (<span style="color: #0000ff">new</span> List&lt;&lt;#= class1.Name #&gt;Audit&gt;()).AsQueryable();<br /><br /><span style="color: #008000">// TODO: write history query, needs to return IEnumerable&lt;ENTITYHistory&gt;</span><br />}<br />}<br /><br /><span style="color: #0000ff">public</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">string</span> HistoryMessage<br />{<br />get<br />{<br /><span style="color: #0000ff">string</span> historyMessage = String.Empty; <br /><br /><span style="color: #008000">// getting  &lt;#=class1.Name#&gt; Audit </span><br />&lt;#=class1.QualifiedName#&gt;Audit  auditRecord = (AuditRecord <span style="color: #0000ff">as</span> &lt;#=class1.QualifiedName#&gt;Audit);<br /><br /><span style="color: #0000ff">if</span> (auditRecord != <span style="color: #0000ff">null</span>)<br />{<br />historyMessage = String.Format(<span style="color: #006080">&quot;Historical reference for: 
Date - ({0:d}), Time - ({1:T}), Operation - ({2}), Staff - ({3}).&quot;</span>,<br />auditRecord.DateStamp.Date,<br />auditRecord.DateStamp,<br />auditRecord.TableOperation.Description,<br />auditRecord.StaffCode);<br />}<br /><br /><span style="color: #008000">//&lt;#=class1.Name#&gt;History historyRecord = (HistoryRecord as &lt;#=class1.Name#&gt;History);</span><br /><br /><span style="color: #008000">//if (historyRecord != null)</span><br /><span style="color: #008000">//{</span><br /><span style="color: #008000">//    historyMessage = String.Format(&quot;Historical reference for: 
Bill Period - ({0}).&quot;,</span><br /><span style="color: #008000">//        historyRecord.BillPeriod.Date);                        </span><br /><span style="color: #008000">//}</span><br /><br /><span style="color: #0000ff">return</span> historyMessage;<br />}<br />}<br />&lt;#         } #&gt;<br /><span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Properties</span><br /><br /><span style="color: #cc6633">#region</span> Construction<br /><br /><span style="color: #008000">/// &lt;summary&gt;</span><br /><span style="color: #008000">/// This is static constructor to emulate singleton pattern. </span><br /><span style="color: #008000">/// &lt;/summary&gt;</span><br /><span style="color: #008000">/// &lt;param name=&quot;&lt;#=class1.Name.ToLower()#&gt;&quot;&gt;Entity record.&lt;/param&gt;</span><br /><span style="color: #008000">/// &lt;param name=&quot;baseTable&quot;&gt;Base Table which stores current entity.&lt;/param&gt;</span><br /><span style="color: #008000">/// &lt;returns&gt;&lt;/returns&gt;</span><br /><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> &lt;#=class1.Name#&gt;ViewModel Create(&lt;#=class1.Name#&gt; &lt;#=class1.Name.ToLower()#&gt;,ITable baseTable)<br />{<br />&lt;#=class1.Name#&gt;ViewModel instance =<span style="color: #0000ff">null</span>; <span style="color: #008000">//= _instances.FirstOrDefault(i=&gt; i.DataEntity == &lt;#=class1.Name.ToLower()#&gt;);</span><br /><br /><span style="color: #008000">//if (instance == null) </span><br /><span style="color: #008000">//{</span><br /><span style="color: #0000ff">if</span> (&lt;#=class1.Name.ToLower()#&gt; != <span style="color: #0000ff">null</span>)<br />{<br /><span style="color: #0000ff">if</span> (_propertiesRules == <span style="color: #0000ff">null</span>)<br />{<br />_propertiesRules = <span style="color: #0000ff">new</span> List&lt;PropertyRuleBase&lt;ViewModelBase&gt;&gt;();<br />}<br /><br /><span style="color: #0000ff">if</span> (_propertiesWarnings == <span style="color: #0000ff">null</span>)<br />{<br />_propertiesWarnings = <span style="color: #0000ff">new</span> List&lt;PropertyRuleBase&lt;ViewModelBase&gt;&gt;();<br />}<br /><br />instance = <span style="color: #0000ff">new</span> &lt;#=class1.Name#&gt;ViewModel(&lt;#=class1.Name.ToLower()#&gt;, baseTable);<br /><span style="color: #008000">//_instances.Add(instance); </span><br />}<br /><span style="color: #008000">//}</span><br /><span style="color: #0000ff">return</span> instance;<br />}<br /><br /><br /><span style="color: #0000ff">private</span> &lt;#=class1.Name#&gt;ViewModel(&lt;#=class1.Name#&gt; &lt;#=class1.Name.ToLower()#&gt;,ITable baseTable)<br />{<br />BaseTable = baseTable; <br />DataEntity = &lt;#=class1.Name.ToLower()#&gt;;<br />_&lt;#= class1.Name#&gt; = &lt;#=class1.Name.ToLower()#&gt;;<br /><br />&lt;#            <span style="color: #0000ff">if</span> (class1.HasPrimaryKey){#&gt;<br /><span style="color: #008000">// initializing primary and foreign keys</span><br />&lt;#                <span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns) {<br />#&gt;<br />&lt;#=column.Storage #&gt; = _&lt;#= class1.Name#&gt;.&lt;#= column.Member #&gt;;<br />&lt;#                    <br />}<br />}#&gt;<br /><br /><span style="color: #008000">// initializing data context</span><br />DataContext = baseTable.Context <span style="color: #0000ff">as</span> &lt;#=data.ContextName#&gt;; <br /><br />_propertyChangedHandler = <span style="color: #0000ff">new</span> System.ComponentModel.PropertyChangedEventHandler(DataEntity_PropertyChanged);<br /><br />_&lt;#= class1.Name#&gt;.PropertyChanged += _propertyChangedHandler; <br />Initialize();<br /><br />&lt;#            <span style="color: #0000ff">if</span>(class1.Name != <span style="color: #006080">&quot;ErrorLog&quot;</span> <br />&amp;&amp; !class1.Name.StartsWith(<span style="color: #006080">&quot;vw&quot;</span>)<br />)<br />{#&gt;<br />_saveHandler = OnSaveEvent; <br /><span style="color: #0000ff">this</span>.SavedEvent += _saveHandler;<br />&lt;#            }#&gt;            <br />}<br /><br /><span style="color: #0000ff">partial</span> <span style="color: #0000ff">void</span> Initialize();<br /><span style="color: #cc6633">#endregion</span><br /><br />&lt;#        <span style="color: #0000ff">int</span> dataMemberIndex = 1;<br /><span style="color: #0000ff">if</span> (class1.Columns.Count &gt; 0) {<br />#&gt;        <span style="color: #cc6633">#region</span> Column Mappings<br />&lt;#            <span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns) { #&gt;<br /><span style="color: #008000">//data member</span><br /><span style="color: #0000ff">private</span> &lt;#=code.Format(column.StorageType)#&gt; &lt;#=column.Storage#&gt;&lt;# <span style="color: #0000ff">if</span> (column.IsReadOnly ) {#&gt; = <span style="color: #0000ff">default</span>(&lt;#=code.Format(column.StorageType)#&gt;)&lt;#}#&gt;;<br /><span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> PropertyRuleBase&lt;ViewModelBase&gt; &lt;#=column.Member#&gt;PropertyRules;<br /><span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> PropertyRuleBase&lt;ViewModelBase&gt; &lt;#=column.Member#&gt;PropertyWarnings;<br />&lt;#        <span style="color: #0000ff">if</span> (!column.IsPrimaryKey &amp;&amp; !column.IsReadOnly){#&gt;        <br /><span style="color: #0000ff">private</span> Independent _ind&lt;#=column.Member#&gt; = <span style="color: #0000ff">new</span> Independent();<br />&lt;#        }#&gt;<br />&lt;#<br />#&gt;        &lt;#=code.Format(column.MemberAttributes)#&gt;&lt;# <br /><span style="color: #0000ff">if</span> (((class1.Name == <span style="color: #006080">&quot;EquipmentPremiumRisk&quot;</span> <br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumManaged&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumShared&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumCapped&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumDirectedService&quot;</span>)<br />&amp;&amp;(<span style="color: #0000ff">typeof</span>(EquipmentPremiumViewModelBase)<br />.GetMember(column.Member).FirstOrDefault() != <span style="color: #0000ff">null</span>))<br />||<br />((class1.Name == <span style="color: #006080">&quot;EquipmentPremiumAdjustmentRisk&quot;</span> <br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumAdjustmentManaged&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumAdjustmentShared&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumAdjustmentCapped&quot;</span><br />|| class1.Name == <span style="color: #006080">&quot;EquipmentPremiumAdjustmentDirectedService&quot;</span>)<br />&amp;&amp;(<span style="color: #0000ff">typeof</span>(EquipmentPremiumAdjustmentViewModelBase)<br />.GetMember(column.Member).FirstOrDefault() != <span style="color: #0000ff">null</span>)))<br />{#&gt;<span style="color: #0000ff">override</span> &lt;#}#&gt;&lt;#=code.Format(column.Type)#&gt; &lt;#=column.Member#&gt;<br />{<br />get <br />{ <br />&lt;#                <span style="color: #0000ff">if</span> (!column.IsPrimaryKey &amp;&amp; !column.IsReadOnly){#&gt;<br />_ind&lt;#=column.Member#&gt;.OnGet(); <br />&lt;#                }<br /><span style="color: #0000ff">if</span> (column.CanBeNull){#&gt;<br /><span style="color: #0000ff">if</span> (<span style="color: #0000ff">this</span>.IsDisposed <br />|| <span style="color: #0000ff">this</span>.DataContext == <span style="color: #0000ff">null</span> <br />|| <span style="color: #0000ff">this</span>.DataContext.IsDisposed)<br /><span style="color: #0000ff">return</span> <span style="color: #0000ff">null</span>;<br />&lt;#                 } <br /><span style="color: #0000ff">if</span>(class1.Name == <span style="color: #006080">&quot;ErrorLog&quot;</span> <br />|| class1.Name.StartsWith(<span style="color: #006080">&quot;vw&quot;</span>)<br />)<br />{#&gt;<br /><span style="color: #0000ff">return</span> _&lt;#= class1.Name#&gt;.&lt;#=column.Member#&gt;;<br />&lt;#                }<br /><span style="color: #0000ff">else</span><br />{#&gt;<br /><span style="color: #0000ff">return</span> &lt;#=column.StorageValue#&gt;;<br />&lt;#                }#&gt;                <br />}<br />&lt;#                <span style="color: #0000ff">if</span> (!column.IsReadOnly &amp;&amp; !column.IsPrimaryKey) { #&gt;<br />set {<br /><span style="color: #0000ff">if</span> (&lt;#=column.StorageValue#&gt; != <span style="color: #0000ff">value</span>) {<br />_ind&lt;#=column.Member#&gt;.OnSet();<br />&lt;#=column.StorageValue#&gt; = <span style="color: #0000ff">value</span>;<br />OnPropertyChanged(<span style="color: #006080">&quot;&lt;#=column.Member#&gt;&quot;</span>);<br />}<br />}<br />&lt;#                }#&gt;<br />}<br /><br />&lt;#            }#&gt;<br /><span style="color: #cc6633">#endregion</span><br /><br /><span style="color: #cc6633">#region</span> Column Validation Warnings<span style="color: #006080">' Registration<br /><br />public override List&lt;PropertyRuleBase&lt;ViewModelBase&gt;&gt; PropertiesWarnings <br />{<br />get {return _propertiesWarnings;}<br />protected set {_propertiesWarnings = value;}<br />}<br /><br />protected override void AddAllPropertyWarningsDefinitions(&lt;#=entityBase#&gt; obj)<br />{<br />if (_propertiesWarnings == null)<br />{<br />_propertiesWarnings = new List&lt;PropertyRuleBase&lt;ViewModelBase&gt;&gt;();<br />}<br /><br />if (_propertiesWarnings.Count == 0) // checking this condition twice to prevent dead locks. <br />{<br />lock (obj)<br />{<br />if (_propertiesWarnings.Count == 0)<br />{<br />// adding properties'</span> warnings collections<br />&lt;#                        <span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns) {#&gt;<br />&lt;#=column.Member#&gt;PropertyWarnings = <span style="color: #0000ff">new</span> PropertyRuleBase&lt;ViewModelBase&gt; { PropertyName = <span style="color: #006080">&quot;&lt;#=column.Member#&gt;&quot;</span> };<br />_propertiesWarnings.Add(&lt;#=column.Member#&gt;PropertyWarnings);<br /><br />&lt;#                        } #&gt;<br />AddPropertyWarnings();<br />}<br />}<br />}<br />}<br /><span style="color: #cc6633">#endregion</span><br /><br /><span style="color: #cc6633">#region</span> Column Validation Rules<span style="color: #006080">' Registration<br /><br />public override List&lt;PropertyRuleBase&lt;ViewModelBase&gt;&gt; PropertiesRules <br />{<br />get {return _propertiesRules;}<br />protected set {_propertiesRules = value;}<br />}<br /><br />protected override void AddAllPropertyRulesDefinitions(&lt;#=entityBase#&gt; obj)<br />{<br />if (_propertiesRules == null)<br />{<br />_propertiesRules = new List&lt;PropertyRuleBase&lt;ViewModelBase&gt;&gt;();<br />}<br /><br />if (_propertiesRules.Count == 0) // checking this condition twice to prevent dead locks. <br />{<br />lock (obj)<br />{<br />if (_propertiesRules.Count == 0)<br />{<br />// adding properties'</span> rules collections<br />&lt;#                        <span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns) {#&gt;<br />&lt;#=column.Member#&gt;PropertyRules = <span style="color: #0000ff">new</span> PropertyRuleBase&lt;ViewModelBase&gt; { PropertyName = <span style="color: #006080">&quot;&lt;#=column.Member#&gt;&quot;</span> };<br />_propertiesRules.Add(&lt;#=column.Member#&gt;PropertyRules);<br /><br />&lt;#                        } #&gt;<br />AddPropertyRules();<br />}<br />}<br />}<br />}<br /><span style="color: #cc6633">#endregion</span><br /><br /><span style="color: #cc6633">#region</span> Methods <br /><br /><span style="color: #0000ff">protected</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">bool</span> HasChanged()<br />{<br /><span style="color: #0000ff">return</span> (<br />&lt;#                 <span style="color: #0000ff">int</span> columnIndex = 0;<br /><span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns){<br /><span style="color: #0000ff">if</span>(columnIndex!=0){#&gt;             || &lt;# }#&gt;                <br />&lt;#= column.Member #&gt; != _&lt;#= class1.Name #&gt;.&lt;#= column.Member #&gt;<br />&lt;#                    columnIndex++;<br />}#&gt;    <br />|| <span style="color: #0000ff">base</span>.HasChanged()<br />);<br />}<br />&lt;#        <span style="color: #0000ff">if</span>(class1.Name != <span style="color: #006080">&quot;ErrorLog&quot;</span> <br />&amp;&amp; !class1.Name.StartsWith(<span style="color: #006080">&quot;vw&quot;</span>)<br />)<br />{#&gt;        <br /><span style="color: #0000ff">private</span> <span style="color: #0000ff">void</span> OnSaveEvent(<span style="color: #0000ff">object</span> sender, EventArgs e)<br />{<br />_indAudit.OnSet();<br />}<br />&lt;#        }#&gt;        <br /><span style="color: #cc6633">#endregion</span><br /><br /><span style="color: #cc6633">#region</span> Commands <br /><br /><span style="color: #cc6633">#region</span> ReviewAuditCommand<br /><br />&lt;#        <span style="color: #0000ff">if</span>(class1.Name != <span style="color: #006080">&quot;ErrorLog&quot;</span> <br />&amp;&amp; !class1.Name.StartsWith(<span style="color: #006080">&quot;vw&quot;</span>))<br />{#&gt;        <br /><span style="color: #0000ff">protected</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">void</span> DoReviewAuditRefresh() <br />{<br />&lt;#            <span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns) {<br /><span style="color: #0000ff">if</span> (!column.IsPrimaryKey &amp;&amp; !column.IsReadOnly)<br />{#&gt;            <br />&lt;#=column.Member#&gt; = (AuditRecord <span style="color: #0000ff">as</span> &lt;#=class1.Name#&gt;Audit).&lt;#=column.Member#&gt;&lt;#<br /><span style="color: #0000ff">if</span>(column.Type.FullName == <span style="color: #006080">&quot;System.Int32&quot;</span> <br />|| column.Type.FullName == <span style="color: #006080">&quot;System.Boolean&quot;</span><br />|| column.Type.FullName == <span style="color: #006080">&quot;System.DateTime&quot;</span> <br />|| column.Type.FullName == <span style="color: #006080">&quot;System.Decimal&quot;</span> <br />|| column.Type.FullName == <span style="color: #006080">&quot;System.Byte&quot;</span> ){#&gt;.Value&lt;#}#&gt;;<br />&lt;#              }<br />}#&gt;        <br />}<br />&lt;#        }#&gt;<br /><span style="color: #cc6633">#endregion</span><br /><br /><span style="color: #cc6633">#region</span> CurrentRecordCommand <br /><br />&lt;#        <span style="color: #0000ff">if</span>(class1.Name != <span style="color: #006080">&quot;ErrorLog&quot;</span> <br />&amp;&amp; !class1.Name.StartsWith(<span style="color: #006080">&quot;vw&quot;</span>))<br />{#&gt;            <br /><span style="color: #0000ff">protected</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">void</span> DoCurrentRecordRefresh()<br />{<br /><span style="color: #0000ff">base</span>.DoCurrentRecordRefresh(); <br /><br />&lt;#            <span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns) {<br /><span style="color: #0000ff">if</span> (!column.IsPrimaryKey &amp;&amp; !column.IsReadOnly)<br />{#&gt;<br />&lt;#=column.Member#&gt; = _&lt;#= class1.Name #&gt;.&lt;#= column.Member #&gt;;<br />&lt;#              }<br />}#&gt;<br />}        <br />&lt;#        }#&gt;<br /><span style="color: #cc6633">#endregion</span> <br /><br /><span style="color: #cc6633">#region</span> CancelCommand<br /><br /><span style="color: #0000ff">protected</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">void</span> DoCancel()<br />{<br /><span style="color: #0000ff">base</span>.DoCancel();<br /><span style="color: #008000">// restore values for all properties</span><br />&lt;#            <span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns){<br /><span style="color: #0000ff">if</span> (!column.IsReadOnly &amp;&amp; !column.IsPrimaryKey){#&gt;<br />&lt;#= column.Member #&gt; = _&lt;#= class1.Name #&gt;.&lt;#= column.Member #&gt;; <br />&lt;#                }<br />}#&gt;<br />}<br /><br /><span style="color: #cc6633">#endregion</span><br /><br /><span style="color: #cc6633">#region</span> SaveCommand<br /><br /><span style="color: #0000ff">protected</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">void</span> DoSave()<br />{<br />IsUpdating = <span style="color: #0000ff">true</span>; <br /><span style="color: #008000">// set values for all properties</span><br />&lt;#            <span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns){<br /><span style="color: #0000ff">if</span> (!column.IsReadOnly <br />&amp;&amp; !column.IsPrimaryKey <br />&amp;&amp; class1.Associations.Where(association =&gt; association.ThisKey.FirstOrDefault().Name == column.Name).Count()==0){#&gt;<br />_&lt;#= class1.Name #&gt;.&lt;#= column.Member #&gt; = &lt;#<span style="color: #0000ff">if</span>(column.Type.FullName == <span style="color: #006080">&quot;System.String&quot;</span>) {#&gt; ((&lt;#=column.Member#&gt; == <span style="color: #0000ff">null</span>)?String.Empty : &lt;#= column.Member #&gt;);&lt;#} <span style="color: #0000ff">else</span> {#&gt; &lt;#=column.Member #&gt;;&lt;# } #&gt; <br />&lt;#                }<br />}#&gt;<br /><span style="color: #0000ff">bool</span> isNew = <span style="color: #0000ff">this</span>.IsNew;<br />&lt;#            <span style="color: #0000ff">foreach</span>(Association association <span style="color: #0000ff">in</span> class1.Associations){<br /><span style="color: #0000ff">if</span>(!association.IsMany &amp;&amp; association.IsForeignKey){#&gt;    <br /><span style="color: #0000ff">if</span>(&lt;#=association.ThisKey.FirstOrDefault().Member#&gt;!= _&lt;#= class1.Name #&gt;.&lt;#= association.ThisKey.FirstOrDefault().Member #&gt;)<br />{<br /><span style="color: #0000ff">if</span>(isNew)<br />{<br />_&lt;#= class1.Name #&gt;.&lt;#= association.ThisKey.FirstOrDefault().Member #&gt; = _&lt;#=association.ThisKey.FirstOrDefault().Member#&gt;;<br />}<br /><span style="color: #0000ff">else</span><br />{<br />_&lt;#= class1.Name #&gt;.&lt;#= association.Member#&gt; = DataContext.&lt;#= association.Type.Table.Member#&gt;.Where(entity =&gt; entity.&lt;#= association.OtherKey.FirstOrDefault().Member#&gt; == &lt;#=association.ThisKey.FirstOrDefault().Member#&gt;).FirstOrDefault();<br />}<br />}<br />&lt;#                }<br />}#&gt;<br /><span style="color: #0000ff">base</span>.DoSave(); <br />IsUpdating = <span style="color: #0000ff">false</span>; <br />}<br /><br /><span style="color: #0000ff">protected</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">void</span> DoErase()<br />{<br />IsUpdating = <span style="color: #0000ff">true</span>; <br /><span style="color: #008000">// set values for all properties</span><br />&lt;#            <span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns){<br /><span style="color: #0000ff">if</span> (!column.IsReadOnly &amp;&amp; !column.IsPrimaryKey){#&gt;<br />_&lt;#= class1.Name #&gt;.&lt;#= column.Member #&gt; = <span style="color: #0000ff">default</span>(&lt;#=code.Format(column.Type)#&gt;); <br />&lt;#                }<br />}#&gt;    <br />IsUpdating = <span style="color: #0000ff">false</span>; <br />}<br /><br /><span style="color: #cc6633">#endregion</span><br /><br /><span style="color: #cc6633">#region</span> RefreshCommand <br /><br /><span style="color: #0000ff">protected</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">void</span> DoRefresh(<span style="color: #0000ff">bool</span> fromDatabase)<br />{<br /><span style="color: #0000ff">if</span> (fromDatabase)<br />{<br /><span style="color: #008000">//refresh values from database.</span><br />DataContext.Refresh(RefreshMode.OverwriteCurrentValues, DataEntity);<br />}<br />&lt;#            <span style="color: #0000ff">foreach</span>(Column column <span style="color: #0000ff">in</span> class1.Columns){<br /><span style="color: #0000ff">if</span>(!column.IsReadOnly &amp;&amp; !column.IsPrimaryKey){#&gt;<br />&lt;#=column.Member#&gt; = _&lt;#= class1.Name#&gt;.&lt;#=column.Member#&gt;;<br />&lt;#                }<br /><span style="color: #0000ff">if</span>(column.IsReadOnly &amp;&amp; !column.IsPrimaryKey)<br />{#&gt;<br />&lt;#=column.Storage#&gt; = _&lt;#= class1.Name #&gt;.&lt;#= column.Member #&gt;;<br />&lt;#                 }<br />}#&gt;        <br /><br />&lt;#            <span style="color: #0000ff">foreach</span>(Association association <span style="color: #0000ff">in</span> class1.Associations){<br /><span style="color: #0000ff">if</span>(!association.IsMany &amp;&amp; association.IsForeignKey){#&gt;    <br />_&lt;#= class1.Name #&gt;.&lt;#= association.Member#&gt; = DataContext.&lt;#= association.Type.Table.Member#&gt;.Where(entity =&gt; entity.&lt;#= association.OtherKey.FirstOrDefault().Member#&gt; == _&lt;#=association.ThisKey.FirstOrDefault().Member#&gt;).FirstOrDefault();<br />&lt;#                }<br />}#&gt;<br />}<br /><br /><span style="color: #cc6633">#endregion</span> <br /><br /><span style="color: #cc6633">#endregion</span>    <br /><br /><span style="color: #cc6633">#region</span> Cleanup <br /><span style="color: #0000ff">protected</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">void</span> Cleanup()<br />{<br /><span style="color: #0000ff">if</span> (_saveHandler != <span style="color: #0000ff">null</span>)<br />{<br /><span style="color: #0000ff">this</span>.SavedEvent -= _saveHandler; <br />_saveHandler = <span style="color: #0000ff">null</span>; <br />}<br /><span style="color: #0000ff">if</span> (_propertyChangedHandler != <span style="color: #0000ff">null</span> &amp;&amp; _&lt;#= class1.Name#&gt; != <span style="color: #0000ff">null</span>) <br />{<br /><span style="color: #0000ff">this</span>._&lt;#= class1.Name  #&gt;.PropertyChanged -= _propertyChangedHandler;<br />_propertyChangedHandler = <span style="color: #0000ff">null</span>; <br />}<br /><span style="color: #008000">//_&lt;#= class1.Name #&gt; = null; </span><br /><span style="color: #0000ff">base</span>.Cleanup();<br />}<br /><span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Cleanup </span><br />&lt;#        }<br /><br /><span style="color: #0000ff">if</span> (class1.Associations.Count &gt; 0) {<br />#&gt;        <br /><span style="color: #cc6633">#region</span> Associations<br />&lt;#            <span style="color: #0000ff">foreach</span>(Association association <span style="color: #0000ff">in</span> class1.Associations) {#&gt;<br /><span style="color: #0000ff">private</span> &lt;# <span style="color: #0000ff">if</span> (association.IsMany) { #&gt;IEnumerable&lt; &lt;#= association.Type.Name#&gt;ViewModel&gt;&lt;# } <span style="color: #0000ff">else</span> {#&gt; &lt;#= association.Type.Name#&gt;ViewModel&lt;#}#&gt; _&lt;#=association.Member#&gt;;<br /><span style="color: #008000">//private Independent _ind&lt;#=association.Member#&gt; = new Independent();</span><br /><br />&lt;#=code.Format(association.MemberAttributes)#&gt;&lt;#<span style="color: #0000ff">if</span> (association.IsMany) { #&gt;IEnumerable&lt;&lt;#=association.Type.Name#&gt;ViewModel&gt;&lt;# } <span style="color: #0000ff">else</span> {#&gt; &lt;#= association.Type.Name#&gt;ViewModel&lt;#} #&gt; &lt;#=association.Member#&gt;<br />{<br />get <br />{<br /><span style="color: #0000ff">if</span> (<span style="color: #0000ff">this</span>.IsDisposed<br />|| <span style="color: #0000ff">this</span>.DataContext == <span style="color: #0000ff">null</span> <br />|| <span style="color: #0000ff">this</span>.DataContext.IsDisposed)<br /><span style="color: #0000ff">return</span> <span style="color: #0000ff">null</span>;<br />&lt;#<br /><span style="color: #0000ff">if</span> (class1.Name.StartsWith(<span style="color: #006080">&quot;vw&quot;</span>) || class1.Name == <span style="color: #006080">&quot;ErrorLog&quot;</span>)<br />{#&gt;<br /><span style="color: #0000ff">if</span> (_&lt;#=association.Member#&gt;==<span style="color: #0000ff">null</span> <br />|| <span style="color: #0000ff">this</span>.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt; != <span style="color: #0000ff">this</span>._&lt;#=class1.Name#&gt;.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt;<br />&lt;#                    <span style="color: #0000ff">if</span> (!association.IsMany){#&gt;                || _&lt;#=association.Member#&gt;.&lt;#=association.OtherKey.FirstOrDefault().Name#&gt; != <span style="color: #0000ff">this</span>._&lt;#=class1.Name#&gt;.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt;&lt;#}#&gt;)<br />{<br />&lt;#                    <span style="color: #0000ff">if</span>(association.IsMany)<br />{#&gt;<br />List&lt;&lt;#= association.Type.Name#&gt;ViewModel&gt; list = <span style="color: #0000ff">new</span> List&lt;&lt;#= association.Type.Name#&gt;ViewModel&gt;(); <br /><span style="color: #0000ff">foreach</span>(&lt;#=association.Type.Name#&gt; entity <span style="color: #0000ff">in</span> DataContext.&lt;#=association.Type.Table.Member#&gt;.Where(t=&gt; t.&lt;#=association.OtherKey.FirstOrDefault().Name#&gt;==<span style="color: #0000ff">this</span>.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt;)&lt;#<span style="color: #0000ff">if</span>(!association.IsMany){#&gt;.FirstOrDefault()&lt;#}<span style="color: #0000ff">else</span>{#&gt;&lt;#}#&gt;)<br />{<br />list.Add(&lt;#=association.Type.Name#&gt;ViewModel.Create(entity, DataContext.&lt;#=association.Type.Table.Member#&gt;));<br />}<br />_&lt;#=association.Member#&gt; = list.AsEnumerable();<br />&lt;#                    }<br /><span style="color: #0000ff">else</span><br />{#&gt;                    <br />_&lt;#=association.Member#&gt; = &lt;#=association.Type.Name#&gt;ViewModel.Create(DataContext.&lt;#=association.Type.Table.Member#&gt;.Where(t=&gt; t.&lt;#=association.OtherKey.FirstOrDefault().Name#&gt;==<span style="color: #0000ff">this</span>.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt;)&lt;#<span style="color: #0000ff">if</span>(!association.IsMany){#&gt;.FirstOrDefault()&lt;#}<span style="color: #0000ff">else</span>{#&gt;&lt;#}#&gt;,DataContext.&lt;#=association.Type.Table.Member#&gt;);<br />&lt;#                     } #&gt;                                        <br />}<br /><span style="color: #0000ff">return</span> _&lt;#=association.Member#&gt;;<br />&lt;#                }        <br /><span style="color: #0000ff">else</span> <br />{#&gt;<br /><span style="color: #008000">//_ind&lt;#=association.Member#&gt;.OnGet();</span><br /><span style="color: #008000">//*(HistoryRecord as &lt;#=class1.Name#&gt;History).&lt;#=association.Member#&gt;*/</span><br /><span style="color: #0000ff">if</span> (_&lt;#=association.Member#&gt;==<span style="color: #0000ff">null</span> <br />|| <span style="color: #0000ff">this</span>.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt; != <span style="color: #0000ff">this</span>._&lt;#=class1.Name#&gt;.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt;<br />&lt;#                    <span style="color: #0000ff">if</span> (!association.IsMany){#&gt;                    || _&lt;#=association.Member#&gt;.&lt;#=association.OtherKey.FirstOrDefault().Name#&gt; != <span style="color: #0000ff">this</span>._&lt;#=class1.Name#&gt;.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt;&lt;#}#&gt;)<br />{<br />&lt;#                    <span style="color: #0000ff">if</span>(association.IsMany)<br />{#&gt;<br />List&lt;&lt;#= association.Type.Name#&gt;ViewModel&gt; list = <span style="color: #0000ff">new</span> List&lt;&lt;#= association.Type.Name#&gt;ViewModel&gt;(); <br /><span style="color: #0000ff">foreach</span>(&lt;#=association.Type.Name#&gt; entity <span style="color: #0000ff">in</span> DataContext.&lt;#=association.Type.Table.Member#&gt;.Where(t=&gt; t.&lt;#=association.OtherKey.FirstOrDefault().Name#&gt;==<span style="color: #0000ff">this</span>.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt;)&lt;#<span style="color: #0000ff">if</span>(!association.IsMany){#&gt;.FirstOrDefault()&lt;#}<span style="color: #0000ff">else</span>{#&gt;&lt;#}#&gt;)<br />{<br />list.Add(&lt;#=association.Type.Name#&gt;ViewModel.Create(entity, DataContext.&lt;#=association.Type.Table.Member#&gt;));<br />}<br />_&lt;#=association.Member#&gt; = list.AsEnumerable();<br />&lt;#                    }<br /><span style="color: #0000ff">else</span><br />{#&gt;                    <br />_&lt;#=association.Member#&gt; = &lt;#=association.Member#&gt;ViewModel.Create(DataContext.&lt;#=association.Type.Table.Member#&gt;.Where(t=&gt; t.&lt;#=association.OtherKey.FirstOrDefault().Name#&gt;==<span style="color: #0000ff">this</span>.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt;)&lt;#<span style="color: #0000ff">if</span>(!association.IsMany){#&gt;.FirstOrDefault()&lt;#}<span style="color: #0000ff">else</span>{#&gt;&lt;#}#&gt;,DataContext.&lt;#=association.Type.Table.Member#&gt;);<br />&lt;#                     } #&gt;                                        <br />}<br />&lt;#                <span style="color: #0000ff">if</span>(!association.Member.StartsWith(<span style="color: #006080">&quot;vw&quot;</span>) &amp;&amp; association.Member != <span style="color: #006080">&quot;ErrorLog&quot;</span>)<br />{#&gt;<br />&lt;#=class1.Name#&gt;Audit auditRecord = (AuditRecord <span style="color: #0000ff">as</span> &lt;#=class1.Name#&gt;Audit);<br /><span style="color: #0000ff">if</span> (auditRecord != <span style="color: #0000ff">null</span>)<br />{<br />var key =  <br />auditRecord.&lt;#=association.ThisKey.FirstOrDefault().Name#&gt;&lt;#<br /><span style="color: #0000ff">if</span>(association.ThisKey.FirstOrDefault().Type.FullName == <span style="color: #006080">&quot;System.Int32&quot;</span> <br />|| association.ThisKey.FirstOrDefault().Type.FullName == <span style="color: #006080">&quot;System.Boolean&quot;</span><br />|| association.ThisKey.FirstOrDefault().Type.FullName == <span style="color: #006080">&quot;System.DateTime&quot;</span> <br />|| association.ThisKey.FirstOrDefault().Type.FullName == <span style="color: #006080">&quot;System.Decimal&quot;</span> <br />|| association.ThisKey.FirstOrDefault().Type.FullName == <span style="color: #006080">&quot;System.Byte&quot;</span> ){#&gt;.Value&lt;#}#&gt;;        <br />&lt;#                    <span style="color: #0000ff">if</span> (association.IsMany)<br />{#&gt;<br /><span style="color: #008000">//foreach(&lt;#=association.Type.Name#&gt;ViewModel vm in _&lt;#=association.Member#&gt;)</span><br /><span style="color: #008000">//{</span><br /><span style="color: #008000">//    DataModelAuditBase ar = ShmmpAudit.&lt;#=association.Type.Name#&gt;Audits</span><br /><span style="color: #008000">//                        .Where(t=&gt;t.&lt;#=association.OtherKey.FirstOrDefault().Name#&gt; == key</span><br /><span style="color: #008000">//                            &amp;&amp; t.DateStamp &lt;= auditRecord.DateStamp).FirstOrDefault();</span><br /><span style="color: #008000">//    if (ar != null)</span><br /><span style="color: #008000">//        vm.AuditRecord = ar; </span><br /><span style="color: #008000">//}</span><br />List&lt;&lt;#= association.Type.Name#&gt;ViewModel&gt; list = <span style="color: #0000ff">new</span> List&lt;&lt;#= association.Type.Name#&gt;ViewModel&gt;(); <br /><span style="color: #0000ff">foreach</span>(&lt;#=association.Type.Name#&gt; entity <span style="color: #0000ff">in</span> DataContext.&lt;#=association.Type.Table.Member#&gt;.Where(t=&gt; t.&lt;#=association.OtherKey.FirstOrDefault().Name#&gt;==key)&lt;#<span style="color: #0000ff">if</span>(!association.IsMany){#&gt;.FirstOrDefault()&lt;#}<span style="color: #0000ff">else</span>{#&gt;&lt;#}#&gt;)<br />{<br />list.Add(&lt;#=association.Type.Name#&gt;ViewModel.Create(entity, DataContext.&lt;#=association.Type.Table.Member#&gt;));<br />}<br />_&lt;#=association.Member#&gt; = list.AsEnumerable();<br />&lt;#                    }<br /><span style="color: #0000ff">else</span><br />{#&gt;<br />DataModelAuditBase ar = ShmmpAudit.&lt;#=association.Type.Name#&gt;Audits<br />.Where(t=&gt;t.&lt;#=association.OtherKey.FirstOrDefault().Name#&gt; == key<br />&amp;&amp; ((t.TransactionId == auditRecord.TransactionId &amp;&amp; (t.DateStamp - auditRecord.DateStamp).Minutes &lt; 60 )<br />|| (t.DateStamp &gt;= auditRecord.DateStamp))<br />).FirstOrDefault();<br /><span style="color: #0000ff">if</span> (ar != <span style="color: #0000ff">null</span>)<br />{<br /><span style="color: #0000ff">if</span>(_&lt;#=association.Member#&gt;.AuditRecord != ar)<br />{<br />_&lt;#=association.Member#&gt;.AuditRecord = ar; <br />}<br />}<br /><span style="color: #0000ff">else</span><br />_&lt;#=association.Member#&gt; = &lt;#=association.Member#&gt;ViewModel.Create(<br />DataContext.&lt;#=association.Type.Table.Member#&gt;.<br />Where(t=&gt; t.&lt;#=association.OtherKey.FirstOrDefault().Name#&gt;==key)&lt;#<span style="color: #0000ff">if</span>(!association.IsMany){#&gt;.FirstOrDefault()&lt;#}<span style="color: #0000ff">else</span>{#&gt;&lt;#}#&gt;,DataContext.&lt;#=association.Type.Table.Member#&gt;);<br />&lt;#                    }#&gt;                        <br />}<br />&lt;#                }#&gt;                <br /><span style="color: #0000ff">return</span> _&lt;#=association.Member#&gt;;<br />&lt;#                }#&gt;    <br />}<br />}<br /><br />&lt;#            }#&gt;<br /><span style="color: #cc6633">#endregion</span><br />&lt;#        }<br /><br /><br />#&gt;    }<br />&lt;#        <span style="color: #0000ff">if</span> (!String.IsNullOrEmpty(data.EntityNamespace)) {#&gt;<br />}<br />&lt;#        }<br />manager.EndBlock();<br />}<br />}<br />manager.StartFooter();#&gt;<br /><span style="color: #cc6633">#pragma</span> warning restore 1591<br />&lt;#manager.EndBlock(); <br />manager.Process(options.FilePerEntity);#&gt;</pre></div><p>These templates are very similar to ASP, but reading such templates is very hard. So to read them easily there is a special and FREE <a href="http://t4-editor.tangible-engineering.com/Download_T4Editor_Plus_ModelingTools.html">markup tool</a> developed by Tangible Engineering and a nice <a href="http://www.olegsych.com/2007/12/text-template-transformation-toolkit/">intro article</a> written by Oleg Sych. </p><blockquote><p>- For collections I use ObservableCollections thus disabling UpdateControls for them and preventing creation of millions of event handlers and events for large collections. </p><p>- For every object which gets into the view or somehow selected by a user a view model is generated. This dramatically improves performance of UpdateControls while still gives me a no worry approach for my PropertyChange events. Each view model may have custom validation logic or anything else since all classes are generated as partial. </p><p>- Having business logic in model views also helps working around some limitations of LINQ to SQL 3.5. Such as inability to detach entities, undo operations or working in concurrent scenarios with multiple threads.&#160; </p></blockquote><p>Having being able to find solution to all these problems I realized that such approach brings many additional benefits to the table. In simple words in my application:</p><p>- all lists are ObservableCollections of data models. Since data models are also partial classes, they can be easily extended with additional functionality. <br />- users make changes only to view models. Thus having the ability to roll back changes if database errors occur or having the ability to change multiple objects at the same time. Both of these things are impossible with current LINQ to SQL, since all the changes are made directly to the model and there is no way to detach any objects. The whole model needs to be disposed. While disposing the whole model means all change tracking that is built into LINQ to SQL classes is useless. Now in my model I get to enjoy the benefits of change tracking, and the ability to roll back changes. When objects need to be saved (persisted) to a data store, it is done in a separate instance of database DataContext. If errors occur I throw away such temporary data context, since I can’t detach entity from the model. And notify users about the error. If everything is fine, the new entity gets attached to the current model, or changed entity is refreshed from the data store. <br />- another benefit is data mining. Since I am using only one data context internally I am able to do joins between multiple lists and run queries of different complexities. Current LINQ to SQL doesn’t allow queries to overlap collections from different instances of the same data context. </p><p>So this was another not so easy, but still ISolvable&lt;TProblem&gt;. </p><p>Happy Coding and have a wonderful New Year! </p>
]]>
		</document>
		<document id="b3e1e1a23d220fbdf60eab1b2792bf90" url="http://isolvable.blogspot.com/2010/12/one-of-my-recent-mvvm-projects.html"><![CDATA[<p>I decided to start a small series of post related to one of my recent MVVM projects and the issues I faced and the solutions I found while working on this project. </p>  <p>First let me give a little bit of history and an overview.</p>  <p>I work at Biomedical Engineering Center and about year and a half ago our company put a freeze on spending as a result multiple project were shelved. This project, let’s call it SHMMP Manager, was supposed to be developed by an outside vendor, which we already picked and provided with functional specifications. After the freeze we had to scramble and bail out of the contract. Likely the vendor was very accommodative even though they were loosing a big chunk of money.</p>  <p>The decision was made to develop application internally, but only after all the issues with the current application were resolved. Current (now previous) application was developed 10 years ago in Access VBA with SQL Server back end. So it took several month to close outstanding issues and in October of 2009 we began planning and requirements gathering. Even though we had most of the specs developed we felt it would be wise to revisit the document once again and make any changes if necessary. </p>  <p>A month after talking to subject matter experts I decided the document was sufficiently complete and started working on designing the application’s architecture. Several month into the project I realized that my interrogation of subject matter experts was not thorough enough and had to make multiple adjustments to the application’s design. </p>  <p>Here is a high level overview of application features: </p>  <p>- Automatic PDF web reports generation    <br />- Flexible permissions manager for report users     <br />- Document imaging, context search and retrieval     <br />- Flexible error validations     <br />- Robust billing     <br />- Full auditing     <br />- Automation of business processes which were not automated in the current application.     <br />- Better data mining. </p>  <p>After requirements, functional specs and database design the next step was to develop data migration module. This module was suppose to convert old data to new structure. While this sounds simple it didn’t turn out to be. Old data was dirty, not normalized and had completely different structure. So this step turned into a major cleaning project with multiple corrections to database design. Most of the changes were related to improving enforcement of data integrity. Additional steps were taking to split database into 3 parts:</p>  <blockquote>   <p>- online processing (tuned for making changes INSERTs and UPDATEs)      <br />- analytical processing (tuned for fast retrieval, for reports)       <br />- auditing (tracking changes made to the first database) </p> </blockquote>  <p>Such separation allowed us to maintain high performance for data entry and reporting, and as a positive side effect this design also helped us to improved our disaster recovery procedures. For example if one database crashes the other two are not affected and may continue operating. On top of this we also have multiple hardware and software redundancies, such as back ups, transaction log shipping, extra server and HDD mirroring. At times it is easier to restore a single incorrect user operation from one of the two extra databases. </p>  <p>Constant change requests early on in the project forced me to use code generation techniques. </p>  <p>For SQL Server it was pretty straight forward as T-SQL allows to walk the structure of the database. So all the triggers, many stored procedures and two extra databases were automatically generated by a piece of code which was much smaller. This allowed me to rapidly introduce structural changes and generate about 50K lines of code in couple of minutes. It also improved robustness as code was tested and evaluated very frequently while it’s foot print was very small. </p>  <p>For C# generation I had to use Text Templating Transformation Toolkit (T4) provided by Microsoft as part of Visual Studio IDE. Microsoft was already using a <a href="http://l2st4.codeplex.com/" target="_blank">script for it’s LINQ to SQL classes</a> and I decided to use it as a base example to generate view model (business layer) for the application. It turned out to be very helpful. Now it generates about 80K lines of code for all the tables, views and functions in data model. </p>  <p>Here is a list of several screen shots from the application. </p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="Release Notes" border="0" alt="Release Notes" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TQ-yn4uvWOI/AAAAAAAAAFc/GByYC9QhbVE/image%5B19%5D.png?imgmax=800" width="504" height="330" />&#160; <br />Application Release Notes</p>  <p>&#160;</p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TQ-yocweK9I/AAAAAAAAAFg/pSKS2giKlr0/image%5B18%5D.png?imgmax=800" width="553" height="369" />&#160;&#160; <br />Users have the ability to change Welcome message, which appears on the reports web site.</p>  <p>&#160;</p>  <p><a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TQ-z8xmeC0I/AAAAAAAAAGU/70cgOM0l2Xc/s1600-h/image%5B24%5D.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/_AMGIYGGdLVY/TQ-z9CqM9NI/AAAAAAAAAGY/qmxITtq8A-A/image_thumb%5B26%5D.png?imgmax=800" width="568" height="462" /></a>     <br />Web reports web site is auto generated as well. Once report is designed in SQL Server Report Designed it is dropped into Report Server, then using SHMMP Manager authorized users decide who may see what reports and what data on the reports. An external user who received permissions to view particular datasets and reports will see it appear in available reports section.     <br />All report parameters are automatically generated based on the XML structure of the selected report. </p>  <p><a href="http://lh6.ggpht.com/_AMGIYGGdLVY/TQ-z9TD9T7I/AAAAAAAAAGc/QvqtWyLbQvo/s1600-h/image%5B30%5D.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TQ-z9vNYzTI/AAAAAAAAAGg/83YIHhiVXBg/image_thumb%5B33%5D.png?imgmax=800" width="567" height="461" /></a>&#160;&#160; <br />An example of generated report. </p>  <p>&#160;</p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/_AMGIYGGdLVY/TQ-wCTZX5NI/AAAAAAAAAFs/vGhpmbJk9wE/image17%5B1%5D.png?imgmax=800" width="523" height="318" />     <br />An example of data entry form with error validations. There are two validation pipeline in the application: Errors and warnings. Errors prevent changes to the database, while warnings notify users of a potential mistake. </p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TQ-wDVQ-aYI/AAAAAAAAAFw/CDi7qoTOON4/image21%5B1%5D.png?imgmax=800" width="515" height="373" />     <br />Users may change multiple settings in the application, such as scanner settings, or size of the font and forms.</p>  <p>&#160;</p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TQ-wEJGylyI/AAAAAAAAAF4/gMauQM8JX7w/image25%5B1%5D.png?imgmax=800" width="529" height="408" />&#160; <br />Or a background picture. </p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TQ-wFDYKdeI/AAAAAAAAAF8/lzlaYHs61s4/image29%5B1%5D.png?imgmax=800" width="555" height="348" />     <br />But the most complicated piece of the application is data mining. Users may see and navigated to associated records within database thus uncovering problems or learning data easily.     <br /></p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TQ-wGMz_5CI/AAAAAAAAAGI/KFnNloNGQPY/image33%5B1%5D.png?imgmax=800" width="558" height="355" />     <br />Plus some fun animations throughout the app to keep users’ attention&#160; :) </p>  <p>In the next post I’ll dive deeper to cover some of the trouble points in developing MVVM apps and my personal goals for the project. </p>  
]]>
		</document>
		<document id="8cc90e6ec5652f94284fdbd96b254db1" url="http://isolvable.blogspot.com/2010/12/scanning-images-to-pdf.html"><![CDATA[<p>In this post I will show how to use Windows Image Acquisition (WIA) interface to scan images and convert them to PDF using converter from my <a href="http://isolvable.blogspot.com/2010/12/converting-images-to-pdf.html" target="_blank">previous post</a>. </p>  <p>There is a <a href="http://blogs.msdn.com/b/coding4fun/archive/2006/10/31/912546.aspx" target="_blank">nice intro article</a> on WIA written by Scott Hanselman several years ago. Please read it, I referred to it several times over the years. There is also <a href="http://en.wikipedia.org/wiki/Windows_Image_Acquisition" target="_blank">some information</a> available on Wikipedia.</p>  <p>So what is WIA: </p>  <p>WIA is a Microsoft driver model and application programming interface (API) for Microsoft Windows Me and later Windows operating systems that enables graphics software to communicate with imaging hardware such as scanners, digital cameras and Digital Video-equipment. It was first introduced in 2000 as part of Windows Me, and continues to be the standard imaging device and API model through successive Windows versions. It is implemented as an on-demand service in Windows XP and later Windows operating systems.</p>  <p>If you are developing for Windows XP you will need to download this <a href="http://www.microsoft.com/downloads/en/details.aspx?familyid=a332a77a-01b8-4de6-91c2-b7ea32537e29&amp;displaylang=en" target="_blank">tool</a>. It requires one time administrative installation on a client machine. I created a little batch file to install these files:</p>  <div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper">   <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">echo off<br /><br />cls<br /><br />echo Copying WIA Files ...<br /><br />cd c:<br /><br />copy /YOUR_INSTALL_FOLDERWIAwiaaut.chi c:windowshelp<br />copy /YOUR_INSTALL_FOLDERWIAwiaaut.chm c:windowshelp<br />copy /YOUR_INSTALL_FOLDERWIAwiaaut.dll c:windowssystem32<br /><br />RegSvr32 WIAAut.dll <br /><br />echo DONE!!!<br /></pre></div><p>If you are developing for Windows Vista or Windows 7 you need to know this: </p><p>“In Windows XP, WIA runs in the <b>LocalSystem</b> context. Because of the security ramifications of running a service as LocalSystem whereby a buggy driver or malicious person would have unrestricted access to the system, the WIA service in <font color="#0645ad">Windows Server 2003</font> and <font color="#0645ad">Windows Vista</font> operates in the <b>LocalService</b> context. This can result in compatibility issues when using a driver designed for Windows XP.”</p><p><font color="#0645ad">“Windows Vista</font> has the WIA Automation library built-in. Also, WIA supports <i>push scanning</i> and <i>multi-image scanning</i>. <i>Push scanning</i> allows initiating scans and adjusting scanning parameters directly from the scanner control panel. <i>Multi-image scanning</i> allows you to scan several images at once and save them directly as separate files. However, video content support is removed from WIA for Windows Vista. Microsoft recommends using the newer <i><a title="Windows Portable Devices on Wiki" href="http://en.wikipedia.org/wiki/Windows_Portable_Devices">Windows Portable Devices</a><font color="#ba0000"></font></i> API.”</p><p>Now on to the hardware. Since in my project I needed to scan multiple pages at once, I used Fujitsu fi-5110C and newer model (works just as well) fi-6110. The problem is that in Windows XP for some reason these scanners don’t report correctly the “Empty Tray” status. So I had to assume some things for multi page scanning. The logic is simple:</p><p>- scan until no exception. <br />- when exception occurs checks if anything is scanned.<br />- if pages were scanned then simply exit.<br />- if no pages were scanned then report a problem.</p><p>Here is a snippet responsible for this:</p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"><br />  <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #008000">// if we reached this point, then scanner is probably initialized. </span><br /><span style="color: #0000ff">bool</span> isTransferring = <span style="color: #0000ff">true</span>;<br /><span style="color: #0000ff">foreach</span> (<span style="color: #0000ff">string</span> format <span style="color: #0000ff">in</span> item.Formats)<br />{<br />    <span style="color: #0000ff">while</span> (isTransferring)<br />    {<br />        <span style="color: #0000ff">try</span><br />        {<br />            WIA.ImageFile file = (item.Transfer(format)) <span style="color: #0000ff">as</span> WIA.ImageFile;<br />            <span style="color: #0000ff">if</span> (file != <span style="color: #0000ff">null</span>)<br />            {<br />                Stream stream = <span style="color: #0000ff">new</span> MemoryStream();<br />                stream.Write(file.FileData.get_BinaryData() <span style="color: #0000ff">as</span> Byte[], 0, (file.FileData.get_BinaryData() <span style="color: #0000ff">as</span> Byte[]).Length);<br />                <br />                <span style="color: #008000">// resetting stream position to beginning after data was written into it. </span><br />                stream.Position = 0;<br />                Bitmap bitmap = <span style="color: #0000ff">new</span> Bitmap(stream);<br />                images.Add(bitmap);<br />            }<br />            <span style="color: #0000ff">else</span><br />                isTransferring = <span style="color: #0000ff">false</span>; <span style="color: #008000">// something happend and we didn't get image</span><br />        }<br />        <span style="color: #0000ff">catch</span> (Exception ex)<br />        {<br />            <span style="color: #008000">// most likely done transferring</span><br />            <span style="color: #008000">// I was not able to find a way to pole scanner for paper feed status. </span><br />            isTransferring = <span style="color: #0000ff">false</span>; <br /><br />            <span style="color: #008000">// scanner's paper feeder was not loaded with paper.</span><br />            <span style="color: #0000ff">if</span> (images.Count() == 0)<br />                <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ImageScannerException(<span style="color: #006080">&quot;Scanner is not loaded with paper or not ready.&quot;</span>);<br /><br />        }<br />    }<br />}</pre></div><p>That’s multi page scanning in Windows XP, unlike earlier statement from Wiki that it is supported only in Vista. </p><p>Another not so straight forward part is how to initialize the scanner. By default when you call WIA API to scan it loads manufacturers interface. In my case I wanted to save all the settings using internally developed user form and from then on pass these settings on to a scanner every time scanner is used.</p><p>I created a class to store scanner settings.</p><p><strong>ScannerSettings:</strong></p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper">  <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">using</span> System;<br /><span style="color: #0000ff">using</span> System.Collections.Generic;<br /><span style="color: #0000ff">using</span> System.Linq;<br /><span style="color: #0000ff">using</span> System.Text;<br /><span style="color: #0000ff">using</span> System.Runtime.Serialization;<br /><span style="color: #0000ff">using</span> System.Security.Permissions;<br /><br /><span style="color: #0000ff">namespace</span> Bmec.ScanLibrary.Scan<br />{<br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">enum</span> ScanningSize<br />    {<br />        Letter,<br />        Legal<br />    }<br /><br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">enum</span> Color<br />    {<br />        GrayScale=0,<br />        Color=1,<br />        BlackWhite=4<br />    }<br /><br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ScannerSettings: ISerializable<br />    {<br />        <span style="color: #cc6633">#region</span> Fields<br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Width of the scanned image.</span><br />        <span style="color: #008000">/// Default is 8500. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">private</span> <span style="color: #0000ff">double</span> _width = 8.5;<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Height of the scanned image.</span><br />        <span style="color: #008000">/// Default is 11000.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">private</span> <span style="color: #0000ff">double</span> _height = 11;<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Optical Resolution.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">private</span> <span style="color: #0000ff">int</span> _resolution = 120;<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Color setting, default is 0 - grayscale. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">private</span> <span style="color: #0000ff">int</span> _color = 0; <span style="color: #008000">// grayscale</span><br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Horizontal Cropping. </span><br />        <span style="color: #008000">/// Default is 0.5 in</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">private</span> <span style="color: #0000ff">double</span> _horizontalCrop = 0.5; <span style="color: #008000">// if cropping required it can be set in here for horizontal.</span><br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Vertical Cropping</span><br />        <span style="color: #008000">/// Default is 0.5 in</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">private</span> <span style="color: #0000ff">double</span> _verticalCrop = 0.5; <span style="color: #008000">// if cropping required it can be set in here for vertical.</span><br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Standard scanning size</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">private</span> ScanningSize _size = ScanningSize.Letter;<br /><br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Fields</span><br /><br />        <span style="color: #cc6633">#region</span> Constructors<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Default Constructor</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">public</span> ScannerSettings()<br />        {<br /><br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Creates settings object for WIA scanner. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;size&quot;&gt;Standard paper size.&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;resolution&quot;&gt;scanning resolution (e.g. for 300x300 pass 300).&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;color&quot;&gt;Color setting, default is gray scale.&lt;/param&gt;</span><br />        <span style="color: #0000ff">public</span> ScannerSettings(ScanningSize size, <span style="color: #0000ff">int</span> resolution, Color color)<br />        {<br /><br />            Size = size;<br />            _color = (<span style="color: #0000ff">int</span>)color; <br />            _resolution = resolution;<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Creates settings object for WIA scanner and resolution of 150x150 pixels. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;size&quot;&gt;Standard paper size.&lt;/param&gt;</span><br />        <span style="color: #0000ff">public</span> ScannerSettings(ScanningSize size)<br />        {<br />            Size = size;<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Creates customized settings for WIA scanner</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;width&quot;&gt;Scanner's sheet feed width.&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;height&quot;&gt;Scanner's sheet feed height.&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;resolution&quot;&gt;Optical resolution.&lt;/param&gt;</span><br />        <span style="color: #0000ff">public</span> ScannerSettings(<span style="color: #0000ff">double</span> width, <span style="color: #0000ff">double</span> height, <span style="color: #0000ff">int</span> resolution, <span style="color: #0000ff">double</span> horizontalCrop, <span style="color: #0000ff">double</span> verticalCrop)<br />        {<br />            Width = width;<br />            Height = height;<br />            _resolution = resolution;<br />            _horizontalCrop = horizontalCrop;<br />            _verticalCrop = verticalCrop;<br />        }<br /><br /><br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Constructors</span><br /><br />        <span style="color: #cc6633">#region</span> Properties<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Color setting, default is 0 - grayscale. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">int</span> Color<br />        {<br />            get<br />            {<br />                <span style="color: #0000ff">return</span> _color;<br />            }<br />            set { _color = <span style="color: #0000ff">value</span>; }<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Height of the scanned image.</span><br />        <span style="color: #008000">/// Default is 11 in.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">double</span> Height<br />        {<br />            get<br />            {<br />                <span style="color: #0000ff">return</span> _height;<br />            }<br />            set<br />            { <br />                _height = <span style="color: #0000ff">value</span>;<br />            }<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Horizontal Cropping. </span><br />        <span style="color: #008000">/// Default is 0.5 in.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">double</span> HorizontalCrop<br />        {<br />            get<br />            {<br />                <span style="color: #0000ff">return</span> _horizontalCrop;<br />            }<br />            set<br />            {<br />                _horizontalCrop = <span style="color: #0000ff">value</span>;<br />            }<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Optical Resolution. Default is 120 pixels per inch.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">int</span> Resolution<br />        {<br />            get<br />            {<br />                <span style="color: #0000ff">return</span> _resolution;<br />            }<br />            set<br />            {<br />                _resolution = <span style="color: #0000ff">value</span>;<br />            }<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Standard scanning size</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">public</span> ScanningSize Size<br />        {<br />            get<br />            {<br />                <span style="color: #0000ff">return</span> _size;<br />            }<br />            set<br />            {<br />                _size = <span style="color: #0000ff">value</span>;<br />                Width = GetWidth(_size);<br />                Height = GetHeight(_size);<br />            }<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Vertical Cropping</span><br />        <span style="color: #008000">/// Default is 0.5 in.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">double</span> VerticalCrop<br />        {<br />            get<br />            {<br />                <span style="color: #0000ff">return</span> _verticalCrop;<br />            }<br />            set<br />            {<br />                _verticalCrop = <span style="color: #0000ff">value</span>; <br />            }<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Width of the scanned image.</span><br />        <span style="color: #008000">/// Default is 8.5 in. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">double</span> Width<br />        {<br />            get<br />            {<br />                <span style="color: #0000ff">return</span> _width;<br />            }<br />            set<br />            {<br />                _width = <span style="color: #0000ff">value</span>;<br />            }<br />        }<br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Properties</span><br /><br />        <span style="color: #cc6633">#region</span> Methods<br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">double</span> GetWidth(ScanningSize size)<br />        {<br />            <span style="color: #0000ff">if</span> (size == ScanningSize.Legal)<br />            {<br />                <span style="color: #0000ff">return</span> 8.5;<br />            }<br />            <span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (size == ScanningSize.Letter)<br />            {<br />                <span style="color: #0000ff">return</span> 8.5;<br />            }<br />            <span style="color: #0000ff">else</span> <span style="color: #0000ff">return</span> 8.5;<br />        }<br /><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">double</span> GetHeight(ScanningSize size)<br />        {<br />            <span style="color: #0000ff">if</span> (size == ScanningSize.Legal)<br />            {<br />                <span style="color: #0000ff">return</span> 14;<br />            }<br />            <span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (size == ScanningSize.Letter)<br />            {<br />                <span style="color: #0000ff">return</span> 11;<br />            }<br />            <span style="color: #0000ff">else</span> <span style="color: #0000ff">return</span> 11;<br />        }<br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Methods</span><br /><br />        <span style="color: #cc6633">#region</span> ISerializable Members<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Constructor for serializer.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;info&quot;&gt;Serialization data.&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;context&quot;&gt;Serialization streaming context.&lt;/param&gt;</span><br />        <span style="color: #0000ff">public</span> ScannerSettings(SerializationInfo info, StreamingContext context)<br />        {<br /><br />            Color = info.GetInt32(<span style="color: #006080">&quot;Color&quot;</span>);<br />            Height = info.GetDouble(<span style="color: #006080">&quot;Height&quot;</span>);<br />            HorizontalCrop = info.GetDouble(<span style="color: #006080">&quot;HorizontalCrop&quot;</span>);<br />            Resolution = info.GetInt32(<span style="color: #006080">&quot;Resolution&quot;</span>);<br />            Nullable&lt;ScanningSize&gt; size = info.GetValue(<span style="color: #006080">&quot;Size&quot;</span>, <span style="color: #0000ff">typeof</span>(Nullable&lt;ScanningSize&gt;)) <span style="color: #0000ff">as</span> Nullable&lt;ScanningSize&gt;;<br />            Size = ((size != <span style="color: #0000ff">null</span>)? size.Value : ScanningSize.Letter);<br />            VerticalCrop = info.GetDouble(<span style="color: #006080">&quot;VerticalCrop&quot;</span>);<br />            Width = info.GetDouble(<span style="color: #006080">&quot;Width&quot;</span>);<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Implementation for ISerializable. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;info&quot;&gt;Serialization data.&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;context&quot;&gt;Serialization streaming context.&lt;/param&gt;</span><br />        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]<br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> GetObjectData(SerializationInfo info, StreamingContext context)<br />        {<br />            info.AddValue(<span style="color: #006080">&quot;Color&quot;</span>, Color);<br />            info.AddValue(<span style="color: #006080">&quot;Height&quot;</span>, Height);<br />            info.AddValue(<span style="color: #006080">&quot;HorizontalCrop&quot;</span>, HorizontalCrop);<br />            info.AddValue(<span style="color: #006080">&quot;Resolution&quot;</span>, Resolution);<br />            Nullable&lt;ScanningSize&gt; size = Size;<br />            info.AddValue(<span style="color: #006080">&quot;Size&quot;</span>, size);<br />            info.AddValue(<span style="color: #006080">&quot;VerticalCrop&quot;</span>, VerticalCrop);<br />            info.AddValue(<span style="color: #006080">&quot;Width&quot;</span>, Width);<br /><br />        }<br /><br />        <span style="color: #cc6633">#endregion</span><br />    }<br />}</pre></div><p>And then apply these settings in the following manner: </p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper">  <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #008000">// setting properties (dimensions and resolution of the scanning.)</span><br />setItem(item, <span style="color: #006080">&quot;6146&quot;</span>, _scannerSettings.Color); <span style="color: #008000">// color setting (default is gray scale)</span><br />setItem(item, <span style="color: #006080">&quot;6147&quot;</span>, _scannerSettings.Resolution); <span style="color: #008000">//horizontal resolution</span><br />setItem(item, <span style="color: #006080">&quot;6148&quot;</span>, _scannerSettings.Resolution); <span style="color: #008000">// vertical resolution</span><br />setItem(item, <span style="color: #006080">&quot;6149&quot;</span>, _scannerSettings.HorizontalCrop); <span style="color: #008000">// horizontal starting position</span><br />setItem(item, <span style="color: #006080">&quot;6150&quot;</span>, _scannerSettings.VerticalCrop); <span style="color: #008000">// vertical starting position</span><br />setItem(item, <span style="color: #006080">&quot;6151&quot;</span>, (<span style="color: #0000ff">int</span>)((<span style="color: #0000ff">double</span>)_scannerSettings.Resolution * (_scannerSettings.Width - _scannerSettings.HorizontalCrop)));  <span style="color: #008000">// width</span><br />setItem(item, <span style="color: #006080">&quot;6152&quot;</span>, (<span style="color: #0000ff">int</span>)((<span style="color: #0000ff">double</span>)_scannerSettings.Resolution * (_scannerSettings.Height - _scannerSettings.VerticalCrop))); // height</pre></div><p>Another annoying window is selecting the scanner itself:</p><p><a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TRJM-Xz4EoI/AAAAAAAAAG8/_aA5E1zy3AE/s1600-h/clip_image002%5B5%5D.jpg"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="clip_image002" border="0" alt="clip_image002" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TRJM-7M1NDI/AAAAAAAAAHA/RRDzY4tbGjM/clip_image002_thumb%5B2%5D.jpg?imgmax=800" width="397" height="270" /></a></p><p>This is taken care by saving device id into local user settings and then reading it off:</p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper">  <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #cc6633">#region</span> Private Methods<br /><br /><span style="color: #0000ff">private</span> <span style="color: #0000ff">void</span> setItem(IItem item, <span style="color: #0000ff">object</span> property, <span style="color: #0000ff">object</span> <span style="color: #0000ff">value</span>)<br />{<br />    WIA.Property aProperty = item.Properties.get_Item(<span style="color: #0000ff">ref</span> property);<br />    aProperty.set_Value(<span style="color: #0000ff">ref</span> <span style="color: #0000ff">value</span>);<br />}<br /><br /><span style="color: #0000ff">private</span> Device GetDevice(Settings settings)<br />{<br />    Device device=<span style="color: #0000ff">null</span>;<br />    CommonDialogClass dialog = <span style="color: #0000ff">new</span> CommonDialogClass();<br />    <span style="color: #0000ff">if</span> (String.IsNullOrEmpty(settings.DeviceId))<br />    {<br />        device = dialog.ShowSelectDevice(WiaDeviceType.ScannerDeviceType, <span style="color: #0000ff">true</span>, <span style="color: #0000ff">false</span>);<br />        <span style="color: #0000ff">if</span> (device != <span style="color: #0000ff">null</span>)<br />        {<br />            settings.DeviceId = device.DeviceID;<br />            settings.Save();<br />        }<br />    }<br />    <span style="color: #0000ff">return</span> device; <br />}<br /><br /><span style="color: #0000ff">private</span> Device GetDevice(<span style="color: #0000ff">string</span> deviceId)<br />{<br />    WIA.DeviceManager manager = <span style="color: #0000ff">new</span> DeviceManager();<br />    Device device=<span style="color: #0000ff">null</span>; <br />    <span style="color: #0000ff">foreach</span>( DeviceInfo info <span style="color: #0000ff">in</span> manager.DeviceInfos)<br />    {<br />        <span style="color: #0000ff">if</span>(info.DeviceID == deviceId)<br />        {<br />            device = info.Connect();<br />            <span style="color: #0000ff">break</span>;<br />        }<br />    }<br />    <span style="color: #0000ff">return</span> device;<br />}<br /><span style="color: #cc6633">#endregion</span> //Private Methods</pre></div><p>Here is the rest of the code. Scanner initialization was a little tricky without fully understanding the WIA API. So I had to resort to several hacks and empirical methods :). </p><p>Below are the other two classes you will need to scan images. </p><p><strong>ImageScanner: </strong></p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"><br />  <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">using</span> System;<br /><span style="color: #0000ff">using</span> System.Collections.Generic;<br /><span style="color: #0000ff">using</span> System.Linq;<br /><span style="color: #0000ff">using</span> System.Text;<br /><span style="color: #0000ff">using</span> Bmec.ScanLibrary.Properties;<br /><span style="color: #0000ff">using</span> System.Configuration;<br /><span style="color: #0000ff">using</span> WIA;<br /><span style="color: #0000ff">using</span> System.Drawing;<br /><span style="color: #0000ff">using</span> System.IO;<br /><span style="color: #0000ff">using</span> System.Security.Permissions;<br /><span style="color: #0000ff">using</span> System.Security.Principal;<br /><br />[assembly: System.Security.Permissions.FileIOPermission(SecurityAction.RequestMinimum, Unrestricted = <span style="color: #0000ff">true</span>)]<br /><span style="color: #0000ff">namespace</span> Bmec.ScanLibrary.Scan<br />{<br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ImageScanner<br />    {<br />        <span style="color: #cc6633">#region</span> Fields <br />        <span style="color: #0000ff">private</span> Device _device=<span style="color: #0000ff">null</span>;<br />        <span style="color: #0000ff">private</span> ScannerSettings _scannerSettings;<br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Fields</span><br /><br />        <span style="color: #cc6633">#region</span> Constructors<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;exception cref=&quot;ImageScannerException&quot;&gt;This exception can be thrown,</span><br />        <span style="color: #008000">/// if any errors are present while initializing scanner.&lt;/exception&gt;</span><br />        <span style="color: #0000ff">public</span> ImageScanner(ScannerSettings scannerSettings)<br />        {<br />            AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);<br /><br />            <span style="color: #0000ff">if</span> (scannerSettings == <span style="color: #0000ff">null</span>)<br />                <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ImageScannerException(<span style="color: #006080">&quot;Scanner Settings are not specified!&quot;</span>);<br /><br />            _scannerSettings = scannerSettings;<br /><br />            Settings settings = <span style="color: #0000ff">new</span> Settings();<br />            <span style="color: #0000ff">try</span><br />            {<br />                <span style="color: #008000">// try automatically select scanner.</span><br />                <span style="color: #0000ff">if</span> (!String.IsNullOrEmpty(settings.DeviceId))<br />                {<br />                    _device = GetDevice(settings.DeviceId);<br />                }<br /><br />                <span style="color: #008000">// if didn't succeed try manually select scanner.</span><br />                <span style="color: #0000ff">if</span> (_device == <span style="color: #0000ff">null</span>)<br />                {<br />                    _device = GetDevice(settings);<br />                }<br /><br />            }<br />            <span style="color: #0000ff">catch</span> (Exception ex)<br />            {<br />                <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ImageScannerException(<span style="color: #006080">&quot;Scanner was not selected or is not available!
&quot;</span>+ex.Message);<br />            }<br /><br />            <span style="color: #008000">// if device is still null, then throw an error. </span><br />            <span style="color: #0000ff">if</span> (_device == <span style="color: #0000ff">null</span>)<br />                <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ImageScannerException(<span style="color: #006080">&quot;Scanner was not selected or is not available!&quot;</span>);<br /><br />        }<br /><br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Constructors</span><br /><br />        <span style="color: #cc6633">#region</span> Public Methods <br /><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> SetDevice()<br />        {<br />            Settings settings = <span style="color: #0000ff">new</span> Settings();<br />            _device = GetDevice(settings);<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// This will scan images, but everything must be ready before doing this. </span><br />        <span style="color: #008000">/// If device (scanner) is not ready an ImageScannerException will be thrown. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;returns&gt;Collection of scanned images.&lt;/returns&gt;</span><br />        <span style="color: #0000ff">public</span> IEnumerable&lt;Bitmap&gt; Scan()<br />        {<br />            List&lt;Bitmap&gt; images = <span style="color: #0000ff">new</span> List&lt;Bitmap&gt;();<br />            <br />            <span style="color: #0000ff">if</span> (_device == <span style="color: #0000ff">null</span>) <br />                <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ImageScannerException(<span style="color: #006080">&quot;Scanner is not available! Please select a scanner and try again.&quot;</span>);<br /><br />            WIA.Item item = <span style="color: #0000ff">null</span>;<br />            <span style="color: #0000ff">try</span><br />            {<br />                <span style="color: #0000ff">foreach</span> (DeviceCommand command <span style="color: #0000ff">in</span> _device.Commands)<br />                {<br />                    item = _device.ExecuteCommand(command.CommandID);<br />                }<br />            }<br />            <span style="color: #0000ff">catch</span> (Exception ex)<br />            {<br />                <span style="color: #008000">// skip this</span><br />            }<br /><br />            <span style="color: #0000ff">try</span><br />            {<br />                <span style="color: #008000">// if item is still not initialized, we'll try a different approach</span><br />                <span style="color: #0000ff">if</span> (item == <span style="color: #0000ff">null</span>)<br />                {<br />                    <span style="color: #0000ff">foreach</span> (Item i <span style="color: #0000ff">in</span> _device.Items)<br />                    {<br />                        <span style="color: #0000ff">foreach</span> (DeviceCommand command <span style="color: #0000ff">in</span> i.Commands)<br />                        {<br />                            item = _device.ExecuteCommand(command.CommandID);<br />                        }<br />                    }<br />                }<br />            }<br />            <span style="color: #0000ff">catch</span> (Exception ex)<br />            {<br />                <span style="color: #008000">// skip this</span><br />            }<br /><br />            <span style="color: #0000ff">try</span><br />            {<br />                <span style="color: #008000">// if item is still null, we'll pick the first available</span><br />                <span style="color: #0000ff">foreach</span> (WIA.Item i <span style="color: #0000ff">in</span> _device.Items)<br />                {<br />                    item = i;<br />                    <span style="color: #0000ff">break</span>;<br />                }<br />            }<br />            <span style="color: #0000ff">catch</span> (Exception ex)<br />            {<br />                <span style="color: #008000">//skip this</span><br />            }<br />            <br />            <span style="color: #0000ff">if</span>(item == <span style="color: #0000ff">null</span>)<br />                <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ImageScannerException(<span style="color: #006080">&quot;Scanner is not ready!
Please turn scanner on, feed paper into the scanner and try again.&quot;</span>);<br />            <span style="color: #0000ff">try</span><br />            {<br />                <span style="color: #008000">// setting properties (dimensions and resolution of the scanning.)</span><br />                setItem(item, <span style="color: #006080">&quot;6146&quot;</span>, _scannerSettings.Color); <span style="color: #008000">// color setting (default is gray scale)</span><br />                setItem(item, <span style="color: #006080">&quot;6147&quot;</span>, _scannerSettings.Resolution); <span style="color: #008000">//horizontal resolution</span><br />                setItem(item, <span style="color: #006080">&quot;6148&quot;</span>, _scannerSettings.Resolution); <span style="color: #008000">// vertical resolution</span><br />                setItem(item, <span style="color: #006080">&quot;6149&quot;</span>, _scannerSettings.HorizontalCrop); <span style="color: #008000">// horizontal starting position</span><br />                setItem(item, <span style="color: #006080">&quot;6150&quot;</span>, _scannerSettings.VerticalCrop); <span style="color: #008000">// vertical starting position</span><br />                setItem(item, <span style="color: #006080">&quot;6151&quot;</span>, (<span style="color: #0000ff">int</span>)((<span style="color: #0000ff">double</span>)_scannerSettings.Resolution * (_scannerSettings.Width - _scannerSettings.HorizontalCrop)));  <span style="color: #008000">// width</span><br />                setItem(item, <span style="color: #006080">&quot;6152&quot;</span>, (<span style="color: #0000ff">int</span>)((<span style="color: #0000ff">double</span>)_scannerSettings.Resolution * (_scannerSettings.Height - _scannerSettings.VerticalCrop))); <span style="color: #008000">// height</span><br />            }<br />            <span style="color: #0000ff">catch</span> (Exception ex)<br />            {<br />                <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ImageScannerException(<span style="color: #006080">&quot;Was not able to set scanning parameters.
&quot;</span> + ex.Message);<br />            }<br />            <br />            <span style="color: #008000">// if we reached this point, then scanner is probably initialized. </span><br />            <span style="color: #0000ff">bool</span> isTransferring = <span style="color: #0000ff">true</span>;<br />            <span style="color: #0000ff">foreach</span> (<span style="color: #0000ff">string</span> format <span style="color: #0000ff">in</span> item.Formats)<br />            {<br />                <span style="color: #0000ff">while</span> (isTransferring)<br />                {<br />                    <span style="color: #0000ff">try</span><br />                    {<br />                        WIA.ImageFile file = (item.Transfer(format)) <span style="color: #0000ff">as</span> WIA.ImageFile;<br />                        <span style="color: #0000ff">if</span> (file != <span style="color: #0000ff">null</span>)<br />                        {<br />                            Stream stream = <span style="color: #0000ff">new</span> MemoryStream();<br />                            stream.Write(file.FileData.get_BinaryData() <span style="color: #0000ff">as</span> Byte[], 0, (file.FileData.get_BinaryData() <span style="color: #0000ff">as</span> Byte[]).Length);<br />                            <br />                            <span style="color: #008000">// resetting stream position to beginning after data was written into it. </span><br />                            stream.Position = 0;<br />                            Bitmap bitmap = <span style="color: #0000ff">new</span> Bitmap(stream);<br />                            images.Add(bitmap);<br />                        }<br />                        <span style="color: #0000ff">else</span><br />                            isTransferring = <span style="color: #0000ff">false</span>; <span style="color: #008000">// something happend and we didn't get image</span><br />                    }<br />                    <span style="color: #0000ff">catch</span> (Exception ex)<br />                    {<br />                        <span style="color: #008000">// most likely done transferring</span><br />                        <span style="color: #008000">// I was not able to find a way to pole scanner for paper feed status. </span><br />                        isTransferring = <span style="color: #0000ff">false</span>; <br /><br />                        <span style="color: #008000">// scanner's paper feeder was not loaded with paper.</span><br />                        <span style="color: #0000ff">if</span> (images.Count() == 0)<br />                            <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ImageScannerException(<span style="color: #006080">&quot;Scanner is not loaded with paper or not ready.&quot;</span>);<br /><br />                    }<br />                }<br />            }<br /><br />            <span style="color: #0000ff">return</span> images; <br />        }<br /><br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Public Methods</span><br /><br />        <span style="color: #cc6633">#region</span> Private Methods<br /><br />        <span style="color: #0000ff">private</span> <span style="color: #0000ff">void</span> setItem(IItem item, <span style="color: #0000ff">object</span> property, <span style="color: #0000ff">object</span> <span style="color: #0000ff">value</span>)<br />        {<br />            WIA.Property aProperty = item.Properties.get_Item(<span style="color: #0000ff">ref</span> property);<br />            aProperty.set_Value(<span style="color: #0000ff">ref</span> <span style="color: #0000ff">value</span>);<br />        }<br /><br />        <span style="color: #0000ff">private</span> Device GetDevice(Settings settings)<br />        {<br />            Device device=<span style="color: #0000ff">null</span>;<br />            CommonDialogClass dialog = <span style="color: #0000ff">new</span> CommonDialogClass();<br />            <span style="color: #0000ff">if</span> (String.IsNullOrEmpty(settings.DeviceId))<br />            {<br />                device = dialog.ShowSelectDevice(WiaDeviceType.ScannerDeviceType, <span style="color: #0000ff">true</span>, <span style="color: #0000ff">false</span>);<br />                <span style="color: #0000ff">if</span> (device != <span style="color: #0000ff">null</span>)<br />                {<br />                    settings.DeviceId = device.DeviceID;<br />                    settings.Save();<br />                }<br />            }<br />            <span style="color: #0000ff">return</span> device; <br />        }<br /><br />        <span style="color: #0000ff">private</span> Device GetDevice(<span style="color: #0000ff">string</span> deviceId)<br />        {<br />            WIA.DeviceManager manager = <span style="color: #0000ff">new</span> DeviceManager();<br />            Device device=<span style="color: #0000ff">null</span>; <br />            <span style="color: #0000ff">foreach</span>( DeviceInfo info <span style="color: #0000ff">in</span> manager.DeviceInfos)<br />            {<br />                <span style="color: #0000ff">if</span>(info.DeviceID == deviceId)<br />                {<br />                    device = info.Connect();<br />                    <span style="color: #0000ff">break</span>;<br />                }<br />            }<br />            <span style="color: #0000ff">return</span> device;<br />        }<br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Private Methods</span><br />    }<br />}</pre></div><p><strong>ImageScannerException:</strong></p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">using</span> System;<br /><span style="color: #0000ff">using</span> System.Runtime.Serialization;<br /><span style="color: #0000ff">using</span> System.Security.Permissions;<br /><br /><span style="color: #0000ff">namespace</span> Bmec.ScanLibrary.Scan<br />{<br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ImageScannerException : Exception, ISerializable<br />    {<br />        <span style="color: #cc6633">#region</span> Properties<br /><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">string</span> UserFriendlyMessage { get; <span style="color: #0000ff">private</span> set; }<br /><br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Properties</span><br /><br />        <span style="color: #cc6633">#region</span> Constructors<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// All messages are set to String.Empty.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">public</span> ImageScannerException()<br />            : <span style="color: #0000ff">base</span>(String.Empty)<br />        {<br />            UserFriendlyMessage = String.Empty;<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// UserFriendlyMessage is set to message.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;message&quot;&gt;Error message.&lt;/param&gt;</span><br />        <span style="color: #0000ff">public</span> ImageScannerException(<span style="color: #0000ff">string</span> message)<br />            : <span style="color: #0000ff">base</span>(message)<br />        {<br />            UserFriendlyMessage = message;<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// UserFriendlyMessage is set to message. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;message&quot;&gt;Error Message&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;innerException&quot;&gt;Inner Exception if any, null otherwise. &lt;/param&gt;</span><br />        <span style="color: #0000ff">public</span> ImageScannerException(<span style="color: #0000ff">string</span> message, Exception innerException)<br />            : <span style="color: #0000ff">base</span>(message, innerException)<br />        {<br />            UserFriendlyMessage = message;<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Custom exception for ImageScanner.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;message&quot;&gt;Detailed error message.&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;userFriendlyMessage&quot;&gt;User friendly error message.&lt;/param&gt;</span><br />        <span style="color: #0000ff">public</span> ImageScannerException(<span style="color: #0000ff">string</span> message, <span style="color: #0000ff">string</span> userFriendlyMessage)<br />            : <span style="color: #0000ff">base</span>(message)<br />        {<br />            UserFriendlyMessage = userFriendlyMessage;<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Custom exception for ImageScanner.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;message&quot;&gt;Detailed error message.&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;innerException&quot;&gt;Inner Exception if any, null otherwise. </span><br />        <span style="color: #008000">/// (If inner exception is null use different overloaded constructor)&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;userFriendlyMessage&quot;&gt;User friendly error message.&lt;/param&gt;</span><br />        <span style="color: #0000ff">public</span> ImageScannerException(<span style="color: #0000ff">string</span> message, Exception innerException, <span style="color: #0000ff">string</span> userFriendlyMessage)<br />            : <span style="color: #0000ff">base</span>(message, innerException)<br />        {<br />            UserFriendlyMessage = userFriendlyMessage;<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Custom exception for ImageScanner.</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;info&quot;&gt;Serialization data.&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;context&quot;&gt;Serialization streaming context.&lt;/param&gt;</span><br />        <span style="color: #0000ff">public</span> ImageScannerException(SerializationInfo info, StreamingContext context)<br />            : <span style="color: #0000ff">base</span>(info, context)<br />        {<br />            UserFriendlyMessage = info.GetString(<span style="color: #006080">&quot;UserFriendlyMessage&quot;</span>);<br />        }<br /><br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Constructors</span><br /><br />        <span style="color: #cc6633">#region</span> Methods<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Implementation for ISerializable. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;info&quot;&gt;Serialization data.&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;context&quot;&gt;Serialization streaming context.&lt;/param&gt;</span><br />        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]<br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">void</span> GetObjectData(SerializationInfo info, StreamingContext context)<br />        {<br />            <span style="color: #0000ff">base</span>.GetObjectData(info, context);<br />            info.AddValue(<span style="color: #006080">&quot;UserFriendlyMessage&quot;</span>, UserFriendlyMessage);<br />        }<br /><br />        <span style="color: #cc6633">#endregion</span> <span style="color: #008000">//Methods</span><br />    }<br />}</pre></div><p>Now to be able to easily use these classes I created a helper class which combines scanning functionality with PDF conversion: </p><p><strong>ScannerHelper:</strong></p><div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"><br />  <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">using</span> System;<br /><span style="color: #0000ff">using</span> System.Collections.Generic;<br /><span style="color: #0000ff">using</span> System.Linq;<br /><span style="color: #0000ff">using</span> System.Text;<br /><span style="color: #0000ff">using</span> Bmec.ScanLibrary.Converters;<br /><span style="color: #0000ff">using</span> System.IO;<br /><br /><span style="color: #0000ff">namespace</span> Bmec.ScanLibrary.Scan<br />{<br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ScannerHelper<br />    {<br />        <span style="color: #0000ff">public</span> ScannerSettings ScannerSettings { get; set; }<br />        <span style="color: #0000ff">public</span> PdfSettings PdfSettings { get; set; }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Constructor with default settings. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #0000ff">public</span> ScannerHelper()<br />        {<br />            ScannerSettings = <span style="color: #0000ff">new</span> ScannerSettings(ScanningSize.Letter,120, Color.BlackWhite);<br />            PdfSettings = <span style="color: #0000ff">new</span> PdfSettings(PdfOrientation.Portrait, PdfSize.Letter);<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// Customizable constructor</span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;scannerSettings&quot;&gt;Settings for the scanner.&lt;/param&gt;</span><br />        <span style="color: #008000">/// &lt;param name=&quot;pdfSettings&quot;&gt;Settings for PDF page(s).&lt;/param&gt;</span><br />        <span style="color: #0000ff">public</span> ScannerHelper(ScannerSettings scannerSettings, PdfSettings pdfSettings)<br />        {<br />            ScannerSettings = scannerSettings;<br />            PdfSettings = pdfSettings; <br />        }<br /><br />        <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> ScanToPdf(<span style="color: #0000ff">string</span> newPdfFileName)<br />        {<br />            ImageScanner scanner = <span style="color: #0000ff">new</span> ImageScanner(ScannerSettings);<br />            PdfConverter converter = <span style="color: #0000ff">new</span> PdfConverter(PdfSettings);<br /><br />            converter.SaveFrom(scanner.Scan(), newPdfFileName);<br />        }<br /><br />        <span style="color: #008000">/// &lt;summary&gt;</span><br />        <span style="color: #008000">/// This method scans to Pdf Stream. </span><br />        <span style="color: #008000">/// &lt;/summary&gt;</span><br />        <span style="color: #008000">/// &lt;returns&gt;Return open stream with PDF binary data in it. The stream needs to be flushed and closed after use.&lt;/returns&gt;</span><br />        <span style="color: #0000ff">public</span> Stream ScanToPdf()<br />        {<br />            ImageScanner scanner = <span style="color: #0000ff">new</span> ImageScanner(ScannerSettings);<br />            PdfConverter converter = <span style="color: #0000ff">new</span> PdfConverter(PdfSettings);<br /><br />            <span style="color: #0000ff">return</span> converter.ConvertFrom(scanner.Scan());<br />        }<br />    }<br />}</pre></div><p>Here are couple of overloads. One lets you scan into a file, the other one returns stream of PDF data, which you may use in your program. </p><div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:17208c3d-cb4f-494d-af7d-47b47fd9e3e8" class="wlWriterEditableSmartContent"><div id="7145e57b-0e54-4964-a48a-7712af3a69db" style="margin: 0px; padding: 0px; display: inline;"><div><a href="http://www.youtube.com/watch?v=s0bzcnmwM7g" target="_new"><img src="http://lh4.ggpht.com/_AMGIYGGdLVY/TRJapBo9VHI/AAAAAAAAAHE/DNv5fW29_Fs/video325f83371005%5B3%5D.jpg?imgmax=800" style="border-style: none" galleryimg="no" onload="var downlevelDiv = document.getElementById('7145e57b-0e54-4964-a48a-7712af3a69db'); downlevelDiv.innerHTML = &quot;&lt;div&gt;&lt;object width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/s0bzcnmwM7g&amp;hl=en&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/s0bzcnmwM7g&amp;hl=en&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;&quot;;" alt=""></a></div></div></div><p>That’s it for scanning. </p>
]]>
		</document>
		<document id="d00d8149d845d43e28b376446a8f773f" url="http://isolvable.blogspot.com/2011/01/power-of-covariance-and-contravariance.html"><![CDATA[<p>While reading forums and other discussions, I often notice that it is difficult for developers to&#160; see practical applications of Covariance and Contravariance in Generics. This is due in part because of our Greco-Roman approach to learning. In this approach you learn as much as you can and when you face a real life problem you will try to dig through your memory archives in a futile attempt to find needed pieces of information or theoretical concepts that you have learned 10-20 years ago. This approach has <strong>not</strong> served me well over the years. I had 5 years of advance chapters of math in college but most of what I remember to this day is the names of those chapters and not much of the content. I recently needed to use Fourier series and could not remember the formula, thanks to God for giving wonderful ideas to some people who invented search engines. What we would be doing these days without search engines - I don’t know.&#160; </p><p>Therefore I am a firm believer of a different approach often seen in some middle eastern and Asian cultures. Face the problem first, try to solve it and learn as you go. I found that knowledge retention in this approach is so much greater. In addition you see practical application of a concept right there. Seeing this becomes even easier when your salary depends on solving such problems :).&#160; This was the case with Covariance and Contravariance for me. I vaguely remembered the concept from computer science lectures, while the concept is simple, it is easy to forget it without needed practice. So when I faced a real problem, initially I have not associated it with the concept I learned earlier, but I went on to discovery route and found the answer! </p><p>The “Aha” moment filled my brain :) “this is something I learned before” I thought to myself. So I had to re-introduce myself to the concept. </p><p>To cover some of these learning gaps I decided to write this short article starting it with a discussion about a problem! </p><p>Let’s say there is some hierarchy of classes in a program and there is class Child which inherits from class Parent. Now there is a need to implement a method which will take a collection of objects of type Parent and do something very generic over these objects. So the method signature might look something like this:</p><div id="codeSnippetWrapper"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> DoSomething(List&lt;Parent&gt; collection)<br />{<br /><span style="color: #0000ff">foreach</span> (Parent p <span style="color: #0000ff">in</span> collection)<br />{<br />p.SomeMethod();<br />}<br />}</pre><br /></div><div id="codeSnippetWrapper">Pretty simple, no magic here. Now the problem comes when you want to pass a collection of Child classes which also implement SomeMethod(). Logically it is known to the compiler that Child implements SomeMethod and is of type Parent and there should be no problem, but in reality it might not work. When you have something like the following it will work without problems:</div><div id="codeSnippetWrapper"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> DoSomething(Parent <span style="color: #0000ff">object</span>)<br />{<br /><span style="color: #0000ff">object</span>.SomeMethod();<br />}</pre>Wait a minute, isn’t it a simple polymorphism? Yes it is. But when will passing List&lt;Child&gt; not work? In all versions of C# prior to version C# 4.0 . Why? Because it doesn’t support contravariance for generic types.While Parent and Child polymorphic through inheritance, List&lt;Parent&gt; and List&lt;Child&gt; are not “polymorphic” :). Let me get back to this a little later, but for now let me give a real world example first. </div><div>Microsoft has implemented great WPF binding mechanism. Suppose you have a common interface which supports binding to List&lt;Parent&gt; and there is a specific data template which can expose some of the common properties of objects of type Parent. When you try to implement collections of classes inherited from Parent and pass it via WPF data binding mechanism the data template will not be applied to the list but instead implementation of ToString() will be used. So instead of seeing neatly formatted objects you will get a list of object names: </div><div>MyNamespace.Child</div><div>MyNamespace.Child</div><div>MyNamespace.Child</div><div>etc. </div><div>Here is an example of what you may see when DataTemplate is not properly applied: </div><div><a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TUb0KUQ8gsI/AAAAAAAAAHU/DbAnIXtJlSw/s1600-h/image%5B4%5D.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TUb0KlZ47cI/AAAAAAAAAHY/Tk_irUqIckg/image_thumb%5B5%5D.png?imgmax=800" width="310" height="349" /></a> </div><div>There are some other scenarios when such behavior may be observed, but it is a separate discussion.</div><div>In this case default implementation of ToString(), unless it is explicitly overridden in Child class, is simply object.GetType().ToString(). </div><div>So what most people end up doing is using LINQ or lambda function to quickly convert objects from type Child to type Parent like so:</div><div><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">List&lt;Child&gt; list = <span style="color: #0000ff">new</span> List&lt;Child&gt;(); <br /><span style="color: #008000">// populate list</span><br />...<br /><span style="color: #008000">// call DoSomething which accepts List&lt;Parent&gt;</span><br />DoSomething(list.Select(t =&gt; t <span style="color: #0000ff">as</span> Parent)); </pre></div><div>Not a big deal in a single case, but on large projects you might end up writing a lot of converters or manually converting collections like in the above example. This conversion (boxing-unboxing) may also negatively affect performance, although I have not tested it. Calling converters from WPF data binding pipeline generally reduces performance, this is one of the best practices advice for Windows Phone 7 development.&#160; </div><div>Now let’s get back to the previous example where we had DoSomething(Parent object) and explain in detail what happens in here when instance of Child is passed as a parameter. This is very common practice among developers and easy to understand, so let’s now define this process. </div><div>In theoretical Computer Science this process is called Contravariance. Here is a definition from Wikipedia (<a title="Covariance and Contravariance" href="http://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">http://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)</a> ):</div><p>“Within the type system of a programming language, covariance and contravariance refers to the ordering of types from narrower to wider and their interchangeability or equivalence in certain situations (such as parameters, generics, and return types).</p><ul><li><b>covariant:</b> converting from wider (double) to narrower (float).</li></ul><ul><li><b>contravariant:</b> converting from narrower (float) to wider (double).</li></ul><ul><li><b>invariant:</b> Not able to convert.”</li></ul><div>In our example we were implicitly converting from a narrower Child type to a wider Parent type. In this case it is also called polymorphism and was supported for a long time in many programming languages. </div><div>Let’s take a look at our very first example. This however is not polymorphism but it does look like a good case for contravariance. Up until C# 4.0 type List&lt;Child&gt; could not be implicitly converted to List&lt;Parent&gt; while Parent and Child are from the same hierarchy and can be converted implicitly. That is why there was a need for explicit conversion from a narrower type to a wider type. </div><div>Now in C# 4.0 a support for Covariance and Contravariance in Generics was added. So such lists may be converted implicitly as in simple polymorphism. There are some limitation, however, for more details on this please refer to the following MSDN article (<a href="http://msdn.microsoft.com/en-us/library/dd799517.aspx">http://msdn.microsoft.com/en-us/library/dd799517.aspx</a>).</div><div>Hope this helps, please let me know if I introduced any misconceptions. :) and if it another <strong>ISolvable&lt;T&gt;</strong> problem. </div><div><p></p>Happy coding!</div><p></p><div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:596283bc-66dc-40af-8f97-2ad58de63ab1" class="wlWriterEditableSmartContent">Technorati Tags: <a href="http://technorati.com/tags/C%23+4.0" rel="tag">C# 4.0</a>,<a href="http://technorati.com/tags/Contravariance" rel="tag">Contravariance</a>,<a href="http://technorati.com/tags/Covariance" rel="tag">Covariance</a>,<a href="http://technorati.com/tags/Polymorphism" rel="tag">Polymorphism</a>,<a href="http://technorati.com/tags/Object+Oriented+Programming" rel="tag">Object Oriented Programming</a>,<a href="http://technorati.com/tags/OOP" rel="tag">OOP</a>,<a href="http://technorati.com/tags/WPF" rel="tag">WPF</a>,<a href="http://technorati.com/tags/data+binding" rel="tag">data binding</a>,<a href="http://technorati.com/tags/List%3cT%3e" rel="tag">List&lt;T&gt;</a></div>
]]>
		</document>
		<document id="384c9c2be7f1754277719c8b2c9f7f1c" url="http://isolvable.blogspot.com/2011/03/cans-and-dishes-cooking-wi-fi.html"><![CDATA[<p>Technorati Tags: <a href="http://technorati.com/tags/Wi-Fi" rel="tag">Wi-Fi</a>,<a href="http://technorati.com/tags/antenna" rel="tag">antenna</a>,<a href="http://technorati.com/tags/signal+strength" rel="tag">signal strength</a>,<a href="http://technorati.com/tags/dish" rel="tag">dish</a>,<a href="http://technorati.com/tags/can" rel="tag">can</a></p><p>Today I will show fast, inexpensive and easy way to boost signal strength of your Wi-Fi receiver. </p><ul><li><strong>How fast? </strong>It took me about <strong>1 hour</strong> to build two antennas with three little boys constantly running around and asking their questions. <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSjw_jZd-I/AAAAAAAAAHo/zwbeW6WJbZw/wlEmoticon-smile%5B2%5D.png?imgmax=800">&nbsp;</li><li><strong>How cheap?</strong> I spent <strong>$5.99</strong> + plus tax for each dish, and <strong>$20.00 </strong>for a Wi-Fi adapter from Amazon. You can be really cheap and use empty cans from canned food. <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSjw_jZd-I/AAAAAAAAAHo/zwbeW6WJbZw/wlEmoticon-smile%5B2%5D.png?imgmax=800">&nbsp;</li><li><strong>How easy?</strong> I took many pictures so that every step is clear. Trust me it is <strong>very easy</strong>.</li></ul><p>I am going to be building two different antennas. </p><ul><li><strong>“Dish”</strong> high gain antenna, which is based on the same principle as satellite dish antennas. </li><li><strong>“Can”</strong> high gain antenna, which is based on EM wave guiding principle. Basically it is just a filter for all other signals except the one in our frequency ~ 2.4 GHz. Here is a <a href="http://www.turnpoint.net/wireless/cantennahowto.html">link to a theory and some other examples</a>. Notice the can diameter calculator on that page, please use it before you make any purchases. </li></ul><p>At the end I will compare performance of these two antennas, regular Omni antenna and adapter’s internal antenna. </p><p><strong>CANTENNA</strong></p><p>I built my first antenna from tomato can about seven and a half years ago when I was a student and needed cheap Wi-Fi connection. Here is a picture:</p><p><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSjxm8825I/AAAAAAAAAHs/G31g_wnbF1g/s1600-h/Picture%20103%5B5%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Picture 103" border="0" alt="Picture 103" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSjx0I6oII/AAAAAAAAAH0/p3S6e6gSdn8/Picture%20103_thumb%5B2%5D.jpg?imgmax=800" width="474" height="356"></a></p><p>It worked very well but was a bit more expensive than what I did today. Primarily because of the tiny coaxial connecter and cable I used to connect to my Wi-Fi card, which was PCMCIA. PCMCIA stands for People Can’t Memorize Computer Industrial Abbreviature… just kidding. But anyway the budget for this antenna was around $30.00. The foil wrapping you can see on the picture is just to make it look more than what it actually is and doesn’t bear much functionality <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSjw_jZd-I/AAAAAAAAAHo/zwbeW6WJbZw/wlEmoticon-smile%5B2%5D.png?imgmax=800">. This funnel suppose to increases the sensitivity of the antenna simply by collecting HF signal from larger area. The claimed 3dB improvement by the funnel was not achieved however. But with the above antenna I was able to extend Wi-Fi range to about 1 mile, from 200-300 yards of manufacturer’s recommendations. </p><p>Fast-forward to 2011. Things have changed and many new things came out. Like cheap Wi-Fi adapters working off of USB and a aMAZEng stores like IKEA where when things are bought they shouldn’t be use per manufacturer’s recommendations, because they won’t last that way long enough to be economically viable. Cheap pine tables crumble under a weight of my morning coffee mug. But they do look great <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSjw_jZd-I/AAAAAAAAAHo/zwbeW6WJbZw/wlEmoticon-smile%5B2%5D.png?imgmax=800">. So IKEA sell a bunch of nice metal shiny things and calls them kitchen utensils, organizers and “you name it”. That is where I got these two vegetable steamers:</p><p><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSjyZ_hu6I/AAAAAAAAAH4/s17g9onua1k/s1600-h/IMG_1853%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1853" border="0" alt="IMG_1853" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSjyzfCCfI/AAAAAAAAAH8/bGgj4_wvW4s/IMG_1853_thumb%5B1%5D.jpg?imgmax=800" width="489" height="327"></a></p><p>This is the unfoldable steamer. I like them for their holes. This looks more like a piece from “Erector” construction set, and you don’t have to drill holes yourself. Well this will be used for the second – Dish antenna. </p><p><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSjzT3B74I/AAAAAAAAAIA/f2V5V0PnSC8/s1600-h/IMG_1886%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1886" border="0" alt="IMG_1886" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSjzjMaW4I/AAAAAAAAAIE/i6-fiRUsa-4/IMG_1886_thumb%5B1%5D.jpg?imgmax=800" width="497" height="333"></a></p><p>This is a cylindrical shape steamer, which I used for my Cantenna. Both of these steamers were $5.99 (they used to be only $3.99, but oh well, <strong>inflation </strong>is around the corner and prices have risen dramatically for the past year). </p><p><strong>1. Drill a hole if you need to.</strong> Here is an exort from ( <font face="Arial, sans-serif">Polomaki M. Ilmajoki (29 September, 2003). Wlan antenna. Waveguide type. Retrieved July, 27, 2003 from <a href="http://www.saunalahti.fi/elepal/antenna2.html">http://www.saunalahti.fi/elepal/antenna2.html</a></font>):</p><p>“There are three different wavelengths in the waveguide tube. Here they are marked as Lo, Lc and Lg.  <p><a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSj0YebIjI/AAAAAAAAAII/TDQ6AeBkJ5E/s1600-h/image%5B8%5D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSj1PgxjgI/AAAAAAAAAIM/lU0aJyGJbRs/image_thumb%5B4%5D.png?imgmax=800" width="287" height="167"></a>&nbsp;<a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSj1brOhGI/AAAAAAAAAIQ/_F2__4eN1A8/s1600-h/image%5B9%5D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSj1m64FvI/AAAAAAAAAIU/O-mlItz_S2A/image_thumb%5B5%5D.png?imgmax=800" width="282" height="167"></a> <p><b>Lo</b> is the wavelength of the high frequency (hf) signal in open air or Lo/mm = 300 / (f/GHz). <p><b>Lc</b> is the wavelength of the low cut frequency which depends on tube diameter only Lc = 1,706 x D and Lu is the wavelength of the upper cut frequency Lu = 1,306 x D.  <p><b>Lg </b>is standing wavelength inside the tube; it is function of both Lo and Lc  <p><a href="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSj148W4dI/AAAAAAAAAIY/lsydl250JpM/s1600-h/image%5B14%5D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSj2OpQSvI/AAAAAAAAAIc/hQgAXyToTbE/image_thumb%5B8%5D.png?imgmax=800" width="529" height="251"></a> <p>A waveguide which is closed on the other end acts similar as a short circuited coaxial cable. The coming hf signal reflects from ending point and there forms so called standing wave when incoming and reflecting signals in different places are either weakening or amplifying each others. <p>If there is a measuring probe which is moving in axial direction inside the tube there can be found some minimum and maximum points in certain intervals. At the closed end the signal is zero and so will be in halfwave intervals. The first maximum point is quarter wavelength from the closed end. This will be the best place to outlet signal to coaxial line. You can notice that maximum area is quite flat. So the place of the outlet must not be very accurate.  <p>It is important to notice that the standing wavelength Lg is not the same as wavelength Lo counted from hf signal. Large tubes are near as open air where Lg and Lo are almost same but when tube diameter becomes smaller the Lg increases effective until there becomes a point when Lg becomes infinite. It corresponds to the diameter when hf signal does not come to the tube at all. So the waveguide tube acts as a high pass filter which limits wavelength Lc=1.706xD. Lo can be calculated from nominal frequency: Lo/mm = 300/(f/GHz). Inverse values of Lo, Lc and Lg forms a right angled triangle where becomes the equation of Pythagoras:  <p>(1/Lo)<sup>2</sup> = (1/Lc)<sup>2</sup> + (1/Lg)<sup> 2</sup> <p>which can be solved  <p>Lg = 1 / SQR((1/Lo)<sup>2</sup> - (1/Lc)<sup>2</sup>)  <p>In the antenna the N connector is situated in maximum point or length of Lg/4 from the closed end. Total length of the tube is selected so that the next maximum place hits on the open end of the tube or 3/4xLg from the closed end. “ <p>Done with the hole and dimensions, whew. That was the most difficult part. </p><p><strong>2. Tripod adapter.</strong> </p><p>If you have a tripod it is good, if you don’t then just be creative. Tape it to the stick or a broom for goodness sake. I found several bolts in the garage that fit my tripod adapter and use them to attach can to the adapter and then to the tripod itself. Take a look:</p><p><a href="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSj2sMnUwI/AAAAAAAAAIg/bG8S6ZwzTwc/s1600-h/IMG_1889%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1889" border="0" alt="IMG_1889" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSj23DJyNI/AAAAAAAAAIk/uaWuriJnP9Q/IMG_1889_thumb%5B1%5D.jpg?imgmax=800" width="571" height="382"></a><a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSj3qVauJI/AAAAAAAAAIo/R6Kn3AiTEcQ/s1600-h/IMG_1890%5B10%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1890" border="0" alt="IMG_1890" src="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSj4CUrxiI/AAAAAAAAAIs/IVwSsdWoREs/IMG_1890_thumb%5B4%5D.jpg?imgmax=800" width="571" height="382"></a></p><p><a href="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSj4iHvvVI/AAAAAAAAAIw/uJajeGg92e0/s1600-h/IMG_1891%5B5%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1891" border="0" alt="IMG_1891" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSj5GKiMGI/AAAAAAAAAI0/ApxpasOdo-I/IMG_1891_thumb%5B2%5D.jpg?imgmax=800" width="286" height="427"></a><a href="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSj53i6J2I/AAAAAAAAAI4/e26DefVmnRQ/s1600-h/IMG_1892%5B5%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1892" border="0" alt="IMG_1892" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSj6HXAO6I/AAAAAAAAAI8/Rw-8zBevi8I/IMG_1892_thumb%5B2%5D.jpg?imgmax=800" width="286" height="426"></a></p><p><strong>3. Wi-Fi USB adapter. </strong></p><p>As I mentioned earlier I bought my adapter on Amazon for about $20.00, it includes separate Omni antenna and USB extender cable. Attaching it to my can full of hole was not a problem. <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSjw_jZd-I/AAAAAAAAAHo/zwbeW6WJbZw/wlEmoticon-smile%5B2%5D.png?imgmax=800">&nbsp;</p><p>I simply unscrewed Omni antenna and stick coaxial connector through the hole. Then placed antenna inside and screw it back to the adapter. Of course this is going to be a little deviation from the theory, but we are here simply demonstrating the concept and it will still work, although not at it’s best ability. </p><p><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSj6q7sEiI/AAAAAAAAAJA/KzapUixmKxo/s1600-h/IMG_1899%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1899" border="0" alt="IMG_1899" src="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSj7J8HYPI/AAAAAAAAAJE/TEdShSzxVXI/IMG_1899_thumb%5B1%5D.jpg?imgmax=800" width="574" height="384"></a><a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSj7Z6e7DI/AAAAAAAAAJI/t2Kf2CqKwjM/s1600-h/IMG_1900%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1900" border="0" alt="IMG_1900" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSj73Ma3GI/AAAAAAAAAJM/tX7JQSb_VpI/IMG_1900_thumb%5B1%5D.jpg?imgmax=800" width="582" height="389"></a></p><p>4. Final assembly. </p><p>Once adapter is attached I place the whole thing on the tripod and connect it to the computer. Here are the pictures of final assembly:</p><p><a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSj8HsULnI/AAAAAAAAAJQ/78lKrOG08MA/s1600-h/IMG_1901%5B5%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1901" border="0" alt="IMG_1901" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSj8Xin-QI/AAAAAAAAAJU/_bx76ns6C24/IMG_1901_thumb%5B2%5D.jpg?imgmax=800" width="286" height="428"></a><a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSj82OIYXI/AAAAAAAAAJY/lRn5_CFP53c/s1600-h/IMG_1902%5B6%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1902" border="0" alt="IMG_1902" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSj9KISOSI/AAAAAAAAAJc/aPp9C7IS16Y/IMG_1902_thumb%5B3%5D.jpg?imgmax=800" width="285" height="426"></a></p><p>Remember this is a very directional antenna, so angle between receiver and transmitter as well as obstacles will matter. </p><p><strong>5. Future improvements.</strong></p><p>This antenna can be combined with <a href="http://en.wikipedia.org/wiki/Yagi_antenna">Yagi-Uda antenna</a> design by simply placing Yagi antenna inside the can. Can will filter noise (harmonics caused by other signals, such as electrical generators, mostly from cars). Yagi will act as a high gain component increasing strength of the incoming/outgoing signals. </p><p>In addition to the above, precise design will help increase antenna performance. </p><p><strong>DISHTENNA</strong></p><p>Dish antenna is made from a different type of vegetable steamer found in IKEA <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSjw_jZd-I/AAAAAAAAAHo/zwbeW6WJbZw/wlEmoticon-smile%5B2%5D.png?imgmax=800">, or any other kitchen supplier for that matter. The underline physical principle, however, is very different from can antenna, but it is easier to achieve better precision with this design and you don’t event need to perform calculations. You will only need to measure Mirror’s Focal Point, I will show you how in a little bit. <a href="http://en.wikipedia.org/wiki/Focus_(optics)">Here</a> is a little bit of theory behind it.</p><p>Here is a picture of the main component:</p><p><a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSj9u9-vQI/AAAAAAAAAJg/piL5oHIgrwk/s1600-h/IMG_1855%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1855" border="0" alt="IMG_1855" src="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSj9wNcX4I/AAAAAAAAAJk/IDRpRi04GtA/IMG_1855_thumb%5B1%5D.jpg?imgmax=800" width="542" height="363"></a></p><p><a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSj-aR3NwI/AAAAAAAAAJo/g1EsQWsi1Kc/s1600-h/IMG_1856%5B6%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1856" border="0" alt="IMG_1856" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSj-pNkScI/AAAAAAAAAJs/dNTueB9yh50/IMG_1856_thumb%5B3%5D.jpg?imgmax=800" width="544" height="363"></a></p><p>The problem with this steamer is that when you set it to it’s side it collapses inward due to gravity. Like in the picture below:</p><p><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSj_G1OXxI/AAAAAAAAAJw/1AnAcC9STjU/s1600-h/IMG_1857%5B5%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1857" border="0" alt="IMG_1857" src="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSj_ay6wDI/AAAAAAAAAJ0/7SHKr1kSV4s/IMG_1857_thumb%5B2%5D.jpg?imgmax=800" width="540" height="361"></a></p><p>The simple way to address this problem is to strap the sides to the center. Be creative, I used staples, you may use paper clips or tape. </p><p>Here is a set of pictures which shows how staples were attaches. </p><p>View from the back (outside):</p><p><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSj_8RPv0I/AAAAAAAAAJ4/OrzFV-dkbOI/s1600-h/IMG_1860%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1860" border="0" alt="IMG_1860" src="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSkAcNKPaI/AAAAAAAAAJ8/yRlQd4-0N4g/IMG_1860_thumb%5B1%5D.jpg?imgmax=800" width="548" height="367"></a></p><p>&nbsp;</p><p>View from the front (inside):</p><p><a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSkA7ddveI/AAAAAAAAAKA/Twe5RHGIv34/s1600-h/IMG_1862%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1862" border="0" alt="IMG_1862" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSkBBBKXtI/AAAAAAAAAKE/IrLssXXuEuI/IMG_1862_thumb%5B1%5D.jpg?imgmax=800" width="550" height="368"></a></p><p><a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSkBppJGkI/AAAAAAAAAKI/9SEzX9Obx8c/s1600-h/IMG_1865%5B5%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1865" border="0" alt="IMG_1865" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSkCGfim1I/AAAAAAAAAKM/MX0GzjkDXYg/IMG_1865_thumb%5B2%5D.jpg?imgmax=800" width="552" height="370"></a></p><p>&nbsp;</p><p><strong>Now to the tripod adapter:</strong></p><p><a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSkCYPuM5I/AAAAAAAAAKQ/VqPJfrLDgNg/s1600-h/IMG_1866%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1866" border="0" alt="IMG_1866" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSkC-8VXlI/AAAAAAAAAKU/DfGghvKQKHM/IMG_1866_thumb%5B1%5D.jpg?imgmax=800" width="552" height="369"></a></p><p>There is a metal loop on the back of the steamer. which is used as a leg when and if used for it’s intended purpose. <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSjw_jZd-I/AAAAAAAAAHo/zwbeW6WJbZw/wlEmoticon-smile%5B2%5D.png?imgmax=800"></p><p>I put the same kind of bolt I used for can antenna and attach it to the tripod adapter. Black part on the picture is a tripod adapter. <a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSkDQsjcHI/AAAAAAAAAKY/CIKcqgudses/s1600-h/IMG_1867%5B5%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1867" border="0" alt="IMG_1867" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSkD2HyaxI/AAAAAAAAAKc/Ut2t81j1YoU/IMG_1867_thumb%5B2%5D.jpg?imgmax=800" width="544" height="363"></a></p><p>Now the hard part. </p><p><strong>Finding the focus.</strong></p><p>I taped the ruler to the middle point and use a flash light to shine on to the dish. I told you it is good this thing is shiny <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSjw_jZd-I/AAAAAAAAAHo/zwbeW6WJbZw/wlEmoticon-smile%5B2%5D.png?imgmax=800">. Reflected light concentrates in the focal point. The two pictures below show you the setup and then (darker picture) the measurements. My apologies for the upside-down ruler. I am not a professional photographer, that is why I has to take two pictures with regular lighting and with dimmed lights and long exposure so focus is seen clear on the picture.</p><p><a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSkEo_xyCI/AAAAAAAAAKg/Qn2DiwbxVMc/s1600-h/IMG_1872%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1872" border="0" alt="IMG_1872" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSkFfChM1I/AAAAAAAAAKk/z6YonsnztTk/IMG_1872_thumb%5B1%5D.jpg?imgmax=800" width="540" height="361"></a><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSkF8VXRCI/AAAAAAAAAKo/F_wFVIRmKBU/s1600-h/IMG_1880%5B6%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1880" border="0" alt="IMG_1880" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSkGTYT-2I/AAAAAAAAAKs/uGKd5iH_7Jk/IMG_1880_thumb%5B3%5D.jpg?imgmax=800" width="539" height="361"></a></p><p>It looks like focus is somewhere between 12 and 15 cm. This is good enough for our experiment.</p><p><strong> USB cable</strong></p><p>I bolted a little metal extender which came with the dish and taped USB cable which came with the card. This is just regular USB extender cable. See the pictures below: </p><p><a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSkHmSSsLI/AAAAAAAAAKw/LwANk30zZyI/s1600-h/IMG_1893%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1893" border="0" alt="IMG_1893" src="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSkH9hYUDI/AAAAAAAAAK0/Ioq08WhlwTg/IMG_1893_thumb%5B1%5D.jpg?imgmax=800" width="536" height="359"></a><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSkJ39bZII/AAAAAAAAAK4/K95uV1tzeaA/s1600-h/IMG_1894%5B5%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1894" border="0" alt="IMG_1894" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSkKbRYQxI/AAAAAAAAAK8/1rVZ9kGbfUA/IMG_1894_thumb%5B2%5D.jpg?imgmax=800" width="535" height="358"></a><a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSkK1tdS9I/AAAAAAAAALA/1N5xH-7ad4s/s1600-h/IMG_1896%5B5%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1896" border="0" alt="IMG_1896" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSkLPWS7cI/AAAAAAAAALE/Bel6Wh_D7aQ/IMG_1896_thumb%5B2%5D.jpg?imgmax=800" width="534" height="357"></a></p><p>&nbsp;</p><p><strong>Final assembly</strong></p><p><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSkLQ7NhQI/AAAAAAAAALI/sgkadD4hoDM/s1600-h/IMG_1884%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1884" border="0" alt="IMG_1884" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSkL2RxqOI/AAAAAAAAALM/8y2WQ4HuVAQ/IMG_1884_thumb%5B1%5D.jpg?imgmax=800" width="281" height="420"></a><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSkMKmiwAI/AAAAAAAAALQ/SkzKDhk-9DE/s1600-h/IMG_1885%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1885" border="0" alt="IMG_1885" src="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSkMdAbw5I/AAAAAAAAALU/xpC55ks5Nys/IMG_1885_thumb%5B1%5D.jpg?imgmax=800" width="281" height="419"></a><a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSkM698CLI/AAAAAAAAALY/Yc8YSVaGYNM/s1600-h/IMG_1897%5B4%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="IMG_1897" border="0" alt="IMG_1897" src="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSkNEAuREI/AAAAAAAAALc/4vUtXAP78vE/IMG_1897_thumb%5B1%5D.jpg?imgmax=800" width="301" height="450"></a></p><p>Looks very interesting. <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-winkingsmile" alt="Winking smile" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSkNQP0BRI/AAAAAAAAALg/GqnrFBEux1M/wlEmoticon-winkingsmile%5B2%5D.png?imgmax=800"></p><p><strong>Measurements</strong></p><p>Now the really interesting part. </p><p>I use five different sets of measurements and a trial version of WirelessMon a Wi-Fi utility to monitor signal strength and other properties. </p><p>Here is a list of experiments:</p><ol><li>- adapter without antenna </li><li>- adapter with regular Omni antenna </li><li>- Can antenna </li><li>- Dish antenna with no Omni antenna </li><li>- Dish and Omni antennas together. </li></ol><p>And below a the corresponding results: </p><p>1.<a href="http://lh5.ggpht.com/_AMGIYGGdLVY/TXSkN6hFJlI/AAAAAAAAALk/1s-MVwhoG1s/s1600-h/No_Antenna%5B3%5D.jpg"><br /><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="No_Antenna" border="0" alt="No_Antenna" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSkOS-Ak1I/AAAAAAAAALo/GhVp6obDF6M/No_Antenna_thumb%5B1%5D.jpg?imgmax=800" width="664" height="386"></a></p><p>With only internal adapter’s antenna the signal strength was measured at 86dB. Good enough. But notice that no other networks are visible like that.</p><p>&nbsp;</p><p>2.<a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSkOy2Y3hI/AAAAAAAAALs/BLcMh14e09w/s1600-h/Omni_Antenna%5B3%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Omni_Antenna" border="0" alt="Omni_Antenna" src="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSkPBNT5XI/AAAAAAAAALw/l2G007hB96o/Omni_Antenna_thumb%5B1%5D.jpg?imgmax=800" width="671" height="390"></a></p><p>Signal strength is much better with Omni antenna and it is able to pick up many more networks. A 3 dB increase on a logarithmic scale is a lot! The beam pattern of Omni antenna is just a circle, so it catches everything irrespective of the direction and thus more networks are seen. </p><p>&nbsp;</p><p>3.<br /><a href="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSkPjilblI/AAAAAAAAAL0/yqJXwvUwmtE/s1600-h/Can_Antenna%5B3%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Can_Antenna" border="0" alt="Can_Antenna" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSkPzzms1I/AAAAAAAAAL4/gnbonMuVbp8/Can_Antenna_thumb%5B1%5D.jpg?imgmax=800" width="653" height="402"></a></p><p>Can antenna is directional, some networks just didn’t get refreshed from previous experiment, but can also works as a filter lowering noise and thus increasing signal to noise ratio so it is easier for Wi-Fi adapter to extract useful signal out of everything else. Notice 76 dB – another 7 dB increase over previous configuration and 10 dB over first experiment. </p><p>4.<br /><a href="http://lh3.ggpht.com/_AMGIYGGdLVY/TXSkQPs2ZKI/AAAAAAAAAL8/BByrb_F-0OQ/s1600-h/Dish_Antenna%5B3%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Dish_Antenna" border="0" alt="Dish_Antenna" src="http://lh4.ggpht.com/_AMGIYGGdLVY/TXSkQxC0BaI/AAAAAAAAAMA/-a3eIRUFXBw/Dish_Antenna_thumb%5B1%5D.jpg?imgmax=800" width="659" height="405"></a></p><p>Notice the strength diagram – it is very large. 73 dB and another 3 dB increase and no other networks are seen due to directionality. This antenna increases gain of the signal, but doesn’t reduce any noise, but signal to noise ratio still increases. </p><p>5.<br /><a href="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSkRvJvGNI/AAAAAAAAAME/Vrh6G8Mwu2U/s1600-h/Dish_Omni_Antenna%5B5%5D.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Dish_Omni_Antenna" border="0" alt="Dish_Omni_Antenna" src="http://lh6.ggpht.com/_AMGIYGGdLVY/TXSkSEKxRjI/AAAAAAAAAMI/JNczZ3vp1Js/Dish_Omni_Antenna_thumb%5B3%5D.jpg?imgmax=800" width="656" height="403"></a></p><p>This is dish with Omni antenna. The signal is 78 dB due to the fact that antenna is a little off of the focal point. Also notice more networks and Omni antenna contributes to this fact. Still overall signal strength is very good. </p><p><strong>Summary</strong></p><p>With a small budget, little time and little precision you may greatly improve the Wi-Fi reception of your adapter. The measurements shown here will likely be different in your configuration as it will be hard to precisely replicate physical conditions. In addition different hardware, distance between wi-fi components, layout and materials of the surrounding structures will affect results. However, you should be able to see similar changes when using these types of antennas. To increase performance antennas have to be constructed with better accuracy, in addition different designs can be implemented, such as Yagi element inside can antenna. This, however, will likely increase budget, time and complexity of the project. </p><p>Please post your comments if you have any questions.</p><p>Happy <strike>coding</strike>… ooops… </p><p>Happy cooking! </p><br />P.S. Don't forget GPS when you plan your trip to IKEA. And if you don't have one IKEA provides nice cafeteria for their stranded shoppers and makes sure they go through every inch of their shelf space.
]]>
		</document>
		<document id="c0ca9a8a192bcc6249da28733eb9283f" url="http://isolvable.blogspot.com/2011/05/goodbye-inverse-control-flow-hello.html"><![CDATA[<div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:3d9076d0-4f0c-46a2-aca2-1e933c675f54" class="wlWriterEditableSmartContent">Technorati Tags: <a href="http://technorati.com/tags/Closure" rel="tag">Closure</a>,<a href="http://technorati.com/tags/Continuation" rel="tag">Continuation</a>,<a href="http://technorati.com/tags/Inverse+Control+Flow" rel="tag">Inverse Control Flow</a>,<a href="http://technorati.com/tags/Async" rel="tag">Async</a>,<a href="http://technorati.com/tags/Async+CTP" rel="tag">Async CTP</a>,<a href="http://technorati.com/tags/Asynchronous" rel="tag">Asynchronous</a>,<a href="http://technorati.com/tags/Task" rel="tag">Task</a>,<a href="http://technorati.com/tags/Task%3cT%3e" rel="tag">Task&lt;T&gt;</a>,<a href="http://technorati.com/tags/Lambda+Functions" rel="tag">Lambda Functions</a></div>  <p>In this post I will talk about <a title="Async" href="http://msdn.microsoft.com/en-us/vstudio/async.aspx">new Async features in .NET</a> Framework (still in CTP with SP1 Refresh mode as of May 2011). These features add new syntax and implicit control structures by compiler to seamlessly convert sequential code into asynchronous one. Let us see in detail what are the problems we currently have with asynchronous method invocations, handling control flow and exceptions, and also how new features can help us (e.g. programmers, developers, coders and etc.) manage our asynchronous code in much more elegant way. </p>  <p>In essence using new Async features will help reduce complexity of asynchronous code by introducing new syntax. This syntax is simple enough and make asynchronous code look almost like sequential code. Under the hood compiler converts these new structures into implicit closures and returns a continuation delegate using class Task or Task&lt;T&gt;. The caller in turn receives partial results right away in the form of instance of Task, Task&lt;T&gt;, which holds continuation reference, or void (in case of “fire and forget”). Caller is also able to monitor task progress as well as get results once task is completed. Once asynchronous process is completed a continuation delegate is called which populates final result of type T (in case of Task&lt;T&gt;) and an event on Task is raised, which allows callers to react appropriately. Errors are raised within the context of async method and handled just as any other errors are handled in sequential code. </p>  <p>Most of this is compiler generated and there is no more a need to wire events, closures, continuations and error handling manually. What in the world is this and will I ever have a need for this?</p>  <h4>When will it make sense?</h4>  <p>It depends how much parallelism your application needs/requires. With a broad adoption of multi-core and recently many-core processors people expect applications to be faster and more responsive; until applications know how to run code asynchronously there isn’t going to be much advantage in using multi-core processors by one application, besides many blocking threads are computationally expensive. </p>  <p>For example, if there is a need or a way to request N (where N&gt;1) downloads from remote resource and network delay in accessing each resource as delta_t1..delta_tn then sequentially written code will have to wait at least Sum(delta_ti)(for all i=1..n) and on top of that actual download time. In case of asynchronous code the delay will be Max(delta_ti)(where i=1..n) + overhead_time. The overhead_time is the time it takes to manage different threads and effectively execute them in parallel, it also depends on the availability of resources (for multiple intensive IO threads it will just add too much overhead for context switching) and grows somewhat proportionately to the number of threads. Therefore it makes sense to use asynchrony when Sum(delta_ti) &gt; (Max(delta_ti) + overhead_time). </p>  <p>Therefore processes such as web requests, data requests from a server, intensive computations are all good candidates for running in parallel or at least off of the main or UI threads. For IOs it will be when they are running separate from UIs or main threads. As I mentioned running multiple intensive IOs over a single shared resource can increase overhead rather rapidly. But in case of independent resources running IOs on different threads will actually improve performance. </p>  <p>So the rule of thumb. Can the infrastructure effectively support parallelism?    <br />- If yes, then processing request over such infrastructure asynchronously will be beneficial.     <br />- If the answer is no, then there is a chance of overhead for context switching between different threads will be greater. </p>  <h4>Current State of Asynchrony</h4>  <p>Currently .NET 4.0 Framework implements Task and Task&lt;T&gt;. MSDN has great examples and design patterns using this class for asynchronous method calls see <a title="Class Task" href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.task.aspx">here</a>, <a title="Task Parallel Library" href="http://msdn.microsoft.com/en-us/library/dd537609.aspx">here</a> and <a title="Async CTP White Paper" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=d7ccfefa-123a-40e5-8ed5-8d2edd68acf4&amp;displaylang=en">here</a>. I mostly use .NET 3.5 and thus have to have more plumbing. </p>  <p>Let’s look at how we can execute asynchronous task without Task and Async features and the problems we run into while doing it. Here is the main idea: </p>  <p><strong>some method </strong></p>  <blockquote>   <p>// do some prelim work</p>    <p>…</p>    <p>BackgroundWorker worker = new BackgroundWorker(); // some kind of way to spin-off tasks in the form of delegates(e.g. function pointers)</p>    <p>// need to run long process, but want to free up UI </p>    <p>Action myDelegate = delegate      <br />{</p>    <p>&#160;&#160;&#160;&#160; do.this();&#160; <br />&#160;&#160;&#160;&#160; do.that();&#160; <br />&#160;&#160;&#160;&#160; do_for_very_long.this();&#160; </p>    <p>};</p>    <p>EventHandler workerCompleted = (s, ea) =&gt;      <br />{</p>    <p>&#160;&#160;&#160;&#160; // unhook event handlers     <br />&#160;&#160;&#160; worker.Completed -= workerCompleted;&#160; <br />&#160;&#160;&#160; worker.Cancelled -= workerCancelled;&#160; <br />&#160;&#160;&#160;&#160; …      <br />&#160;&#160;&#160;&#160; // handle results</p>    <p>};</p>    <p>EventHandler workerCancelled = (s, ea) =&gt;      <br />{</p>    <p>&#160;&#160;&#160;&#160; // unhook event handlers     <br />&#160;&#160;&#160; worker.Completed -= workerCompleted;&#160; <br />&#160;&#160;&#160; worker.Cancelled -= workerCancelled;&#160; <br />&#160;&#160;&#160;&#160; …      <br />&#160;&#160;&#160;&#160; // handle errors</p>    <p>};</p> </blockquote>  <p>&#160;&#160;&#160; worker.Completed += workerCompleted;&#160; <br />&#160;&#160;&#160; worker.Cancelled += workerCancelled;&#160; <br />&#160;&#160;&#160; worker.RunAsync(myDelegate);</p>  <p><strong>end of some method</strong></p>  <p>What you see above is inverse flow of control, closures, lambda functions, continuations. But this is typically what happens when there is a need to execute asynchronous process. </p>  <p><strong>1.</strong> We create local variables on the main thread, which are part of continuation state for spin-off threads. </p>  <p><a title="Continuation" href="http://en.wikipedia.org/wiki/Continuation">Here</a> is a definition from Wikipedia: </p>  <blockquote>   <p>“In <a href="http://en.wikipedia.org/wiki/Computer_science">computer science</a> and <a href="http://en.wikipedia.org/wiki/Programming">programming</a>, a <b>continuation</b> is an abstract representation of the <a href="http://en.wikipedia.org/wiki/Control_flow">control state</a>. A continuation <a href="http://en.wikipedia.org/wiki/Reification_(computer_science)">reifies</a> an <i>instance</i> of a computational process at a given point in the process's execution. It contains information such as the process's current stack (including all data whose lifetime is within the process e.g. &quot;local variables&quot;), as well the process's point in the computation. Such an instance can then be later resumed upon invocation. The &quot;<b>current continuation</b>&quot; or &quot;continuation of the computation step&quot; is the continuation that, from the perspective of running code, would be derived from the current point in a program's execution.</p>    <p>The term <i>continuations</i> can also be used to refer to <b>first-class continuations</b>, which are constructs that give a <a href="http://en.wikipedia.org/wiki/Programming_language">programming language</a> the ability to save the execution state at any point and return to that point at a later point in the program.”</p> </blockquote>  <p>In other words Async does continuations complitely behind the scenes while here we have to wire up events to listen for a callback when async method completes. </p>  <p><strong>2.</strong> We define the execution steps for the asynchronous work, but do <strong>not</strong> run it yet. This may or may not use closure. Closure is a way of passing continuation state. So if we were to reference in this function variables which were previously defined on our main thread then compiler will automatically preserve the references for the time when function execution will occur, subject to GC rules. Most commonly closures are used with lambda functions or anonymous function delegates, while these are different concepts.</p>  <p>The other way is to explicitly create a named function with arguments and pass all data via these arguments. Sometimes this could be a daunting task. </p>  <p><a title="Closure" href="http://en.wikipedia.org/wiki/Closure_(computer_science)">Here</a> is a definition for closures:</p>  <blockquote>   <p>“In <a href="http://en.wikipedia.org/wiki/Computer_science">computer science</a>, a <b>closure</b> is a <a href="http://en.wikipedia.org/wiki/Function_(computer_science)">function</a> together with a referencing environment for the nonlocal names (<a href="http://en.wikipedia.org/wiki/Free_variables_and_bound_variables">free variables</a>) of that function. Such a function is said to be &quot;closed over&quot; its free variables. The referencing environment <a href="http://en.wikipedia.org/wiki/Name_binding">binds</a> the nonlocal names to the corresponding variables in <a href="http://en.wikipedia.org/wiki/Scope">scope</a> at the time the closure is created, additionally extending their lifetime to at least as long as the lifetime of the closure itself.</p>    <p>…</p>    <p>Closures are used to implement <a href="http://en.wikipedia.org/wiki/Continuation_passing_style">continuation passing style</a>, and in this manner, <a href="http://en.wikipedia.org/wiki/Information_hiding">hide state</a>. Constructs such as <a href="http://en.wikipedia.org/wiki/Object_(computer_science)">objects</a> and <a href="http://en.wikipedia.org/wiki/Control_structure">control structures</a> can thus be implemented with closures. In some languages, a closure may occur when a function is defined within another function, and the inner function refers to local variables of the outer function. At <a href="http://en.wikipedia.org/wiki/Run_time_(computing)">runtime</a>, when the outer function executes, a closure is formed, consisting of the inner function’s code and references to any variables of the outer function required by the closure; such variables are called the <a href="http://en.wikipedia.org/wiki/Upvalue">upvalues</a> of the closure.</p>    <p>The term <i>closure</i> is often mistakenly used to mean <a href="http://en.wikipedia.org/wiki/Anonymous_function">anonymous function</a>. This is probably because most languages implementing anonymous functions allow them to form closures and programmers are usually introduced to both concepts at the same time. These are, however, distinct concepts. A closure retains a reference to the environment at the time it was created (for example, to the current value of a local variable in the enclosing scope) while a generic anonymous function need not do this.”</p> </blockquote>  <blockquote>   <p>and <a title="Lambda/Anonymous functions" href="http://en.wikipedia.org/wiki/Anonymous_function">lambda functions</a>: </p>    <p>“In <a title="Computing" href="http://isolvable.blogspot.com/wiki/Computing"><font color="#0645ad">computing</font></a>, an <b>anonymous function</b> (also <b>function constant</b> or <b>function literal</b>) is a <a title="Function (mathematics)" href="http://isolvable.blogspot.com/wiki/Function_(mathematics)"><font color="#0645ad">function</font></a> (or a <a title="Subroutine" href="http://isolvable.blogspot.com/wiki/Subroutine"><font color="#0645ad">subroutine</font></a>) defined, and possibly called, without being <a title="Name binding" href="http://isolvable.blogspot.com/wiki/Name_binding"><font color="#0645ad">bound</font></a> to an <a title="Identifier" href="http://isolvable.blogspot.com/wiki/Identifier"><font color="#0645ad">identifier</font></a>. Anonymous functions are convenient to pass as an argument to a <a title="Higher-order function" href="http://isolvable.blogspot.com/wiki/Higher-order_function"><font color="#0645ad">higher-order function</font></a> and are ubiquitous in languages with <a title="First-class function" href="http://isolvable.blogspot.com/wiki/First-class_function"><font color="#0645ad">first-class functions</font></a>.</p>    <p>Anonymous functions originate in the work of <a title="Alonzo Church" href="http://isolvable.blogspot.com/wiki/Alonzo_Church"><font color="#0645ad">Alonzo Church</font></a> in his invention of the <a title="Lambda calculus" href="http://isolvable.blogspot.com/wiki/Lambda_calculus"><font color="#0645ad">lambda calculus</font></a> in 1936 (prior to electronic computers), in which all functions are anonymous. The <a class="mw-redirect" title="Y combinator" href="http://isolvable.blogspot.com/wiki/Y_combinator"><font color="#0645ad">Y combinator</font></a> can be utilised in these circumstances to provide <a class="mw-redirect" title="Anonymous recursion" href="http://isolvable.blogspot.com/wiki/Anonymous_recursion"><font color="#0645ad">anonymous recursion</font></a>, which Church used to show that some mathematical questions are unsolvable by computation. (Note: this result was disputed at the time, and later <a title="Alan Turing" href="http://isolvable.blogspot.com/wiki/Alan_Turing"><font color="#0645ad">Alan Turing</font></a> - who became Church's student - provided a proof that was more generally accepted.)</p>    <p>Anonymous functions have been a feature of <a title="Programming language" href="http://isolvable.blogspot.com/wiki/Programming_language"><font color="#0645ad">programming languages</font></a> since <a title="Lisp (programming language)" href="http://isolvable.blogspot.com/wiki/Lisp_(programming_language)"><font color="#0645ad">Lisp</font></a> in 1958. An increasing number of modern programming languages support anonymous functions, and some notable mainstream languages have recently added support for them, the most widespread being <a title="JavaScript" href="http://isolvable.blogspot.com/wiki/JavaScript"><font color="#0645ad">JavaScript</font></a> also C# and PHP support anonymous functions. Anonymous functions were added to the C++ language as of <a title="C++0x" href="http://isolvable.blogspot.com/wiki/C%2B%2B0x"><font color="#0645ad">C++0x</font></a>“</p> </blockquote>  <p><strong>3. </strong>We define two event handlers to handle successful completion and exceptional completion. </p>  <p>These are defined using lambda functions and they do use closures to unhook event handlers after event is triggered. </p>  <p>Still no execution occurred yet and therefore up to this point everything is running blazing fast.</p>  <p><strong>4.</strong> We are registering for events by hooking up our error handlers. </p>  <p><strong>5.</strong> We spin-off asynchronous thread and immediately return. This is where execution actually starts but function call has already completed. Now control flow goes through the function(s) we defined earlier in our method and, once completed, will either call Completed handler or Cancelled handler if there are errors. This way of executing is called <a title="Inversion of control" href="http://en.wikipedia.org/wiki/Inversion_of_control">Inversion of Control Flow</a>.</p>  <blockquote>   <p>“In <a href="http://en.wikipedia.org/wiki/Computer_programming">computer programming</a>, <b>Inversion of control</b> (<b>IoC</b>) is an abstract principle describing an aspect of some <a href="http://en.wikipedia.org/wiki/Software_architecture">software architecture</a> designs in which the <a href="http://en.wikipedia.org/wiki/Control_flow">flow of control</a> of a system is inverted in comparison to <a href="http://en.wikipedia.org/wiki/Procedural_programming">procedural programming</a>.</p>    <p>In traditional programming the <a href="http://en.wikipedia.org/wiki/Control_flow">flow</a> of the <a href="http://en.wikipedia.org/wiki/Business_logic">business logic</a> is controlled by a central piece of code, which calls reusable <a href="http://en.wikipedia.org/wiki/Subroutines">subroutines</a> that perform specific functions. Using Inversion of Control this &quot;central control&quot; design principle is abandoned. The <a href="http://en.wikipedia.org/wiki/Caller">caller's</a> code deals with the program's execution order, but the business knowledge is encapsulated by the called subroutines.”</p> </blockquote>  <p>The problem with “Inversion of Control” is that it is not linear and adds a lot of noise (plumbing) to business logic. It is very easy to introduce bugs using this style of programming. </p>  <p>What a mess, huh? So how is it different with Async? </p>  <p>If you read “<a title="Async Whitepaper" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=d7ccfefa-123a-40e5-8ed5-8d2edd68acf4&amp;displaylang=en">Async Whitepaper</a>” you will notice a somewhat similar example. But let us walk use our example and see how we can benefit from Async. </p>  <p>First we need to change our method declaration to use keyword <strong><em>async</em></strong> and a return type <strong><em>Task&lt;T&gt;, </em></strong>that is if we are planning to return some results of type T. </p>  <p><strong>private <font color="#000080">async Task&lt;string&gt;</font> MyFunctionAsync()      <br /></strong>{</p>  <blockquote>   <p>string result = String.Empty;     <br />Action&lt;string&gt; myDelegate = delegate       <br />{</p> </blockquote>  <blockquote>   <p>&#160;&#160;&#160;&#160; do.this();&#160; <br />&#160;&#160;&#160;&#160; do.that();&#160; <br />&#160;&#160;&#160;&#160; do_for_very_long.this();&#160;&#160; <br />&#160;&#160;&#160;&#160; return “success”;</p>    <p>};</p> </blockquote>  <blockquote>   <p>try      <br />{&#160;&#160;&#160; </p> </blockquote>  <blockquote>   <p>&#160;&#160; result = <strong><font color="#000080">await</font></strong> Task.Run(myDelegate); <strong><font color="#008000">// notice AWAIT keyword. This is new syntax!!!</font></strong></p>    <p><em><font color="#008000">&#160;&#160; // the rest of the code will be wrapped into continuation,&#160; <br />&#160;&#160; // and called only when the above finished executing.&#160; <br />&#160;&#160; // while our MyFunctionAsync will return immediately with Task&lt;string&gt;,&#160; <br />&#160;&#160; // but string will be empty until this part is finished. </font></em></p>    <p><em><font color="#008000">&#160;&#160; // handle when success</font></em></p> </blockquote>  <blockquote>   <p>&#160;&#160; …</p>    <p>}      <br />catch       <br />{</p>    <p>&#160;&#160; <em><font color="#008000"> // handle when failure         <br /></font></em>&#160;&#160;&#160; result = “failure”;</p>    <p>}     <br />return result;</p> </blockquote>  <p>}</p>  <p>This code looks a lot simpler and less error prone, while executes almost exactly the same as the one we described earlier! </p>  <p>In conclusion. We looked at the mechanisms used to implement new Async functionality in C# Async CTP libraries. Talked about when it is appropriate to use asynchronous programming model. How it is currently being done and the number of problems associated with current asynchronous programming style. At the end we took a look at the new features of Async library (it will be part of C# 5.0 compiler later on) and a much more simplified programming model. We pointed to original whitepaper for Async library in hopes that readers will refer to it as well. In the process we have discussed some computer science concepts such as closures, lambda functions, continuations and inverse of control. </p>  <p>I hope some of the readers will find this information useful. </p>  <p>Happy coding!</p>  
]]>
		</document>
		<document id="6377fda01eaf0822505f9ab08741f02" url="http://isolvable.blogspot.com/2011/05/jaro-winkler-fast-fuzzy-linkage.html"><![CDATA[<div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:7c36c053-3942-42d8-8241-41b7b41d4b54" class="wlWriterEditableSmartContent">Technorati Tags: <a href="http://technorati.com/tags/SQL+CLR" rel="tag">SQL CLR</a>,<a href="http://technorati.com/tags/record+linkage" rel="tag">record linkage</a>,<a href="http://technorati.com/tags/Jaro" rel="tag">Jaro</a>,<a href="http://technorati.com/tags/Winkler" rel="tag">Winkler</a>,<a href="http://technorati.com/tags/fuzzy" rel="tag">fuzzy</a>,<a href="http://technorati.com/tags/SOUNDEX" rel="tag">SOUNDEX</a></div><p>If you need to perform fast fuzzy record linkage and don’t like SOUNDEX, than you might need to look into Jaro-Winkler algorithm. In this article I will explain what this algorithm does, give you a source code for SQL CLR function, and give an example of use cases for this algorithm such fuzzy linkage and probabilistic linkage. </p><p>Let’s bring everybody up to speed first. </p><p>Consider the following scenario. You have thousands (or millions for that matter) of data records and you either need to weed out duplicate records or link two data sets together which don’t have a common key. </p><p>The typical approach for finding duplicates is to perform a cross join with some tricky but deterministic type queries, and/or use SOUNDEX, LIKE and other functions which are provided by SQL Server, to determine links between primary keys for records containing duplicate information. In essence this problem is similar to linking two distinct data sets, with only difference being that links are established between different primary keys. </p><p>This works well for some scenarios, when data is well known, size is not large, it is easy to determine false duplicates and it is a one time job, which means that you will never need to do it again. </p><p>For those of us who are linking millions of records more than once in a life time there are other ways to consider. </p><p>Please welcome <a title="Jaro-Winkler Algorithm" href="http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance" target="_blank">Jaro-Winkler algorithm</a>. </p><blockquote><p>The <b>Jaro–Winkler distance</b> (Winkler, 1990) is a measure of similarity between two <a title="String (computer science)" href="http://en.wikipedia.org/wiki/String_%28computer_science%29"><u><font color="#0066cc">strings</font></u></a>. It is a variant of the <b>Jaro distance</b> metric (Jaro, 1989, 1995) and mainly used in the area of <a title="Record linkage" href="http://en.wikipedia.org/wiki/Record_linkage"><u><font color="#0066cc">record linkage</font></u></a> (duplicate detection). The higher the Jaro–Winkler distance for two strings is, the more similar the strings are. The Jaro–Winkler distance metric is designed and best suited for short strings such as person names. The score is normalized such that 0 equates to no similarity and 1 is an exact match.</p></blockquote><h4>How is it better than SOUNDEX? </h4><p>It is not. SOUNDEX provides a phonetic matching which can be useful in some scenarios, while Jaro-Winkler string distance algorithm estimates a difference or, roughly, a number of character replacements it takes to convert one string to another. Hence you may derive optimization technique, which I will talk about a little later in this article. Another advantage in comparison is that if there is a typo in a word and the typo produces different sound then SOUNDEX will not match it correctly. For example, if you typed “<em>ytpe</em>” instead of “<em>type</em>” then SOUNDEX will not give you a correct match. The codes returned for <strong><em>SOUNDEX(‘ytpe’)</em></strong> and <strong><em>SOUNDEX(‘type’)</em></strong> are the following: </p><table border="0" cellspacing="0" cellpadding="2" width="400"><tbody><tr> <td valign="top" width="200"> <p align="center"><strong><em>ytpe</em></strong></p></td> <td valign="top" width="200"> <p align="center"><strong><em>type</em></strong></p></td></tr><tr> <td valign="top" width="200"> <p align="center">Y310</p></td> <td valign="top" width="200"> <p align="center">T100</p></td></tr></tbody></table><p>If I use Jaro-Winkler <strong><em>StringDistance(‘ytpe’,’type’)</em></strong> here is what I get <strong>0.91(6)</strong>, which means it is a good match. Remember 1 – is exact match, so 0.91 is very close to it. Typically you will have something like this:</p><pre style="border-bottom: #cecece 1px solid; border-left: #cecece 1px solid; padding-bottom: 5px; background-color: #fbfbfb; min-height: 40px; padding-left: 5px; width: 626px; padding-right: 5px; height: 102px; overflow: auto; border-top: #cecece 1px solid; border-right: #cecece 1px solid; padding-top: 5px"><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">SELECT</a> * <br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">FROM</a> myTable1 <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> t1 <br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=INNER&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">INNER</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=JOIN&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">JOIN</a> myTable2 <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> t2 <br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=ON&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">ON</a> dbo.StringDistance(t1.MyField, t2.MyField) &gt; 0.85</pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=AND&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">AND</a> <span style="color: #008000">-- some other filters such as string Length</span></pre></pre><h4>Jaro-Winkler In Code</h4><p>Below I will provide a SQL CLR version of this algorithm. Which is written in C#.NET and can be deployed and invoked as a function from T-SQL scripts to run on your SQL Server. </p><pre style="border-bottom: #cecece 1px solid; border-left: #cecece 1px solid; padding-bottom: 5px; background-color: #fbfbfb; min-height: 40px; padding-left: 5px; width: 619px; padding-right: 5px; height: 315px; overflow: auto; border-top: #cecece 1px solid; border-right: #cecece 1px solid; padding-top: 5px"><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">using</span> System;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">using</span> System.Data;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">using</span> System.Data.SqlClient;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">using</span> System.Data.SqlTypes;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">using</span> Microsoft.SqlServer.Server;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">using</span> System.Text;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">using</span> System.Text.RegularExpressions;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">public</span> partial <span style="color: #0000ff">class</span> UserDefinedFunctions<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;summary&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// This region contains code related to Jaro Winkler string distance algorithm. </span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;/summary&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">#region Jaro Distance <br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">private</span> <span style="color: #0000ff">const</span> <span style="color: #0000ff">double</span> defaultMismatchScore = 0.0;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">private</span> <span style="color: #0000ff">const</span> <span style="color: #0000ff">double</span> defaultMatchScore = 1.0;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;summary&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// gets the similarity of the two strings using Jaro distance.</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;/summary&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;param name="firstWord"&gt;&lt;/param&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;param name="secondWord"&gt;&lt;/param&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;returns&gt;a value between 0-1 of the similarity&lt;/returns&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// </span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">[Microsoft.SqlServer.Server.SqlFunction]<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span>  System.Data.SqlTypes.SqlDouble StringDistance(<span style="color: #0000ff">string</span> firstWord, <span style="color: #0000ff">string</span> secondWord) {<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> ((firstWord != <span style="color: #0000ff">null</span>) &amp;&amp; (secondWord != <span style="color: #0000ff">null</span>)) <br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> (firstWord == secondWord)<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> (SqlDouble)defaultMatchScore;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">else</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #008000">//get half the length of the string rounded up - (this is the distance used for acceptable transpositions)</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">int</span> halflen = Math.Min(firstWord.Length, secondWord.Length) / 2 + 1;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #008000">//get common characters</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">StringBuilder common1 = GetCommonCharacters(firstWord, secondWord, halflen);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">int</span> commonMatches = common1.Length;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #008000">//check for zero in common</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> (commonMatches == 0)<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> (SqlDouble)defaultMismatchScore;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">StringBuilder common2 = GetCommonCharacters(secondWord, firstWord, halflen);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #008000">//check for same length common strings returning 0.0f is not the same</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> (commonMatches != common2.Length)<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> (SqlDouble)defaultMismatchScore;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #008000">//get the number of transpositions</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">int</span> transpositions = 0;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">for</span> (<span style="color: #0000ff">int</span> i = 0; i &lt; commonMatches; i++)<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> (common1[i] != common2[i])<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">transpositions++;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">int</span> j = 0;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">j += 1;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #008000">//calculate jaro metric</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">transpositions /= 2;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">double</span> tmp1;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">tmp1 = commonMatches / (3.0 * firstWord.Length) + commonMatches / (3.0 * secondWord.Length) +<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">(commonMatches - transpositions) / (3.0 * commonMatches);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> (SqlDouble)tmp1;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> (SqlDouble)defaultMismatchScore;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;summary&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// returns a string buffer of characters from string1 within string2 if they are of a given</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// distance seperation from the position in string1.</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;/summary&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;param name="firstWord"&gt;string one&lt;/param&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;param name="secondWord"&gt;string two&lt;/param&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;param name="distanceSep"&gt;separation distance&lt;/param&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// &lt;returns&gt;a string buffer of characters from string1 within string2 if they are of a given</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #808080">/// distance seperation from the position in string1&lt;/returns&gt;</span><br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> StringBuilder GetCommonCharacters(<span style="color: #0000ff">string</span> firstWord, <span style="color: #0000ff">string</span> secondWord, <span style="color: #0000ff">int</span> distanceSep) {<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> ((firstWord != <span style="color: #0000ff">null</span>) &amp;&amp; (secondWord != <span style="color: #0000ff">null</span>)) {<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">StringBuilder returnCommons = <span style="color: #0000ff">new</span> StringBuilder(20);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">StringBuilder copy = <span style="color: #0000ff">new</span> StringBuilder(secondWord);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">int</span> firstLen = firstWord.Length;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">int</span> secondLen = secondWord.Length;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">for</span> (<span style="color: #0000ff">int</span> i = 0; i &lt; firstLen; i++) {<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">char</span> ch = firstWord[i];<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">bool</span> foundIt = <span style="color: #0000ff">false</span>;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">for</span> (<span style="color: #0000ff">int</span> j = Math.Max(0, i - distanceSep);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">!foundIt &amp;&amp; j &lt; Math.Min(i + distanceSep, secondLen);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">j++) {<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> (copy[j] == ch) {<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">foundIt = <span style="color: #0000ff">true</span>;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">returnCommons.Append(ch);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">copy[j] = '#';<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> returnCommons;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> <span style="color: #0000ff">null</span>;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">#endregion<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">#region String Functions<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">[Microsoft.SqlServer.Server.SqlFunction]<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> System.Data.SqlTypes.SqlInt32 FirstIndexOf(<span style="color: #0000ff">string</span> text, <span style="color: #0000ff">string</span> searchWord)<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> ((searchWord == <span style="color: #0000ff">null</span>) ||<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">(searchWord.GetType() == <span style="color: #0000ff">typeof</span>(DBNull)))<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">searchWord = "<span style="color: #8b0000"></span>";<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> ((text == <span style="color: #0000ff">null</span>) ||<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">(text.GetType() == <span style="color: #0000ff">typeof</span>(DBNull)))<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">text = "<span style="color: #8b0000"></span>";<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> (SqlInt32) text.IndexOf(searchWord);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">[Microsoft.SqlServer.Server.SqlFunction]<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> System.Data.SqlTypes.SqlInt32 FirstIndexOfPattern(<span style="color: #0000ff">string</span> text, <span style="color: #0000ff">string</span> pattern)<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">Regex myRegEx = <span style="color: #0000ff">new</span> Regex(pattern);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> (!myRegEx.IsMatch(text))<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> -1;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> myRegEx.Match(text).Index;<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">[Microsoft.SqlServer.Server.SqlFunction]<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> System.Data.SqlTypes.SqlInt32 LastIndexOf(<span style="color: #0000ff">string</span> text, <span style="color: #0000ff">string</span> searchWord)<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> ((searchWord == <span style="color: #0000ff">null</span>) ||<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">(searchWord.GetType() == <span style="color: #0000ff">typeof</span>(DBNull)))<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">searchWord = "<span style="color: #8b0000"></span>";<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> ((text == <span style="color: #0000ff">null</span>) ||<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">(text.GetType() == <span style="color: #0000ff">typeof</span>(DBNull)))<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">text = "<span style="color: #8b0000"></span>";<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> (SqlInt32)text.LastIndexOf(searchWord);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">[Microsoft.SqlServer.Server.SqlFunction]<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> System.Data.SqlTypes.SqlBoolean Contains(<span style="color: #0000ff">string</span> text, <span style="color: #0000ff">string</span> searchWord)<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> ((searchWord == <span style="color: #0000ff">null</span>) ||<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">(searchWord.GetType() == <span style="color: #0000ff">typeof</span>(DBNull)))<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">searchWord = "<span style="color: #8b0000"></span>";<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">if</span> ((text == <span style="color: #0000ff">null</span>) ||<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">(text.GetType() == <span style="color: #0000ff">typeof</span>(DBNull)))<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">{<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">text = "<span style="color: #8b0000"></span>";<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"><span style="color: #0000ff">return</span> (SqlBoolean)text.Contains(searchWord);<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">}<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">#endregion<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px">};<br /></pre><pre style="background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; font-size: 8px"></pre></pre><p>I do provide additional string functions for convenience. To deploy these functions you will need to create CLR project in Visual Studio and paste code from here. Specify your target server and click deploy. </p><br /><h4>How to optimize? </h4><p>If you are working with a somewhat static set such as for spell check, then I recommend doing the following to optimize performance: </p><ul><li>calculate Length of the strings and save it into one of the columns, then during comparison exclude everything that is substantially different in length than a compared string. So if compared string has 10 characters then limit your search to only strings with 10 ± 3 in length and don’t worry about the rest. Most likely other strings will be a bad match anyway. </li><li>add index to both the strings which participate in comparison and a sorted index for string length. In fact sort the whole table by string length and then by string values. </li><li>you may also fine tune on how many results you like to get by adjusting the distance weight either lower to get more results or higher to get less results, 0.85 seems to work well for me. </li><li>clean your data</li><li>remove insignificant characters. If strings are too long and you have something like <strong><em>MYCOMPANY ABC</em></strong> and <strong><em>MYCOMPANY CDE&nbsp; </em></strong>you will get false positives, if these are in fact two different names. So in this case remove white spaces and <strong><em>MYCOMPANY</em></strong>. If these two strings represent the same name than simply remove white spaces and limit comparison by length, using substring as a percentage of the total length. </li><li>LEARN YOUR DATA. Fine tuning will ultimately needs to be performed over a specific set, so knowing exactly what is in your tables is important. </li></ul><p>Typically in the vocalbulary of 100 000 entries such filters reduce the number of comparisons to about 300. Unless you are doing a full blown record linkage in that case you will need to apply probabilistic methods and calculate scores.</p><p>Also in MS SQL Server Jaro Winkler string distance wrapped into CLR function perform much better, since SQL Server doesn't support arrays natively and much of the processing in this algorithm revolves around arrays. So implementation in T-SQL adds too much overhead, but SQL-CLR works extremely fast. </p><h4>Applications</h4><style type="text/css">.csharpcode, .csharpcode pre { font-size: small; color: black; font-family: consolas, "Courier New", courier, monospace; background-color: #ffffff; /*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #008000; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { background-color: #f4f4f4; width: 100%; margin: 0em; } .csharpcode .lnum { color: #606060; } </style><br /><p>I have personally applied this algorithm for a Spell-Check program against large medical dictionary. It worked really well (under 0.5 sec) on modest hardware (dual CPU with 2 GB RAM and a SCSI drives) and 150 000 dictionary words. </p><p>Also it can be used in Probabilistic record linkage for string comparisons. Probabilistic Record linkage methodology calculates probability weights for strings within dataset. For common string values are lower than than for uncommon. The weights from different calculations are added to a final score. The scores most likely will have a normal distribution. There will be positives, false positives, false negatives and negatives. A threshold is determined for false positive or false negatives. You definitely keep positives and remove negatives, for the rest apply somewhat manual review. Some apps have these steps very well automated, for example <a title="SQL Match" href="http://sqlmatch.com/index.html" target="_blank">SQL Match program</a> developed by Patrick Smith. I know Patrick personally and worked with him for several years, what he claims on this web site is true and works just as described. </p><p>The other use is for finding duplicates. This is most common scenario for data cleansing. I have also used it for fuzzy matching and data cleaning efforts multiple times, providing users with the ability to look at the matches in different ways. </p><p>In my next post I will try to apply this algorithm for word suggestions on a mobile platform Windows Phone 7. I am interested in how well it will perform given the fact that SQL CE is very limited and some parts will have to be implemented in plain C#, I’ll try to use LINQ though. </p><p>Happy coding! </p>
]]>
		</document>
		<document id="bfb206993d8a1d831cef30b50629bc03" url="http://isolvable.blogspot.com/2011/06/recursive-queries-with-common-table.html"><![CDATA[<p>&#160;</p>  <p>Over the years of working with databases I had to deal with recursive queries several times, first in Access, then in Oracle, then in SQL 2000. While Oracle 9i database had support for recursive queries using “CONNECT BY”, none of the other database management systems had a clean approach to execute recursive queries. </p>  <p>In SQL Server 2005 Microsoft added a new feature called Common Table Expressions and many people picked it up as a way to perform recursive queries. </p>  <p>The use case is typically for data which contains some sort of parent-child relationship where each child can be a parent as well. MSDN has an <a title="Recursive Queries using Common Table Expressions" href="http://msdn.microsoft.com/en-us/library/ms186243.aspx">article</a> describing how to use CTEs, please take a look. </p>  <p>Let’s take an Employees table which among other employee data has EmployeeId and ManagerId. Suppose we want to find all Smith’s subordinates in that table. Of course, if there are multiple people with the same last name those will get pulled as well. If Mr. Smith is the head of the company then all employees will show up at different levels, if Mr. Smith doesn’t manage anybody then only Mr. Smith will show up. To run a request like that we need:</p>  <p>- to create a table valued function    <br />- define output table     <br />- define anchor member (or first level of the recursion)     <br />- define recursive member     <br />- execute expression and insert data into output table</p>  <p>Please take a look at the code:</p> <font color="#0000ff"><font color="#0000ff">     <table border="0" cellspacing="0" cellpadding="2" width="615"><tbody>         <tr>           <td valign="top" width="613">             <h1><font size="1"><font face="Courier New">CREATE<font color="#000000"> </font><font color="#0000ff"><font color="#0000ff">FUNCTION</font></font><font color="#000000"> [dbo]</font><font color="#808080"><font color="#808080">.</font></font><font color="#000000">[uft_GetEmployeeHierarchy_ByLastName]                     <br /></font></font></font><font color="#808080"><font color="#808080" size="1" face="Courier New">(</font></font></h1>              <blockquote>               <h1><font color="#008000"><font color="#008000"><font size="1" face="Courier New">-- Add the parameters for the function here</font></font></font></h1>                <h1><font size="1" face="Courier New">@LastName <font color="#0000ff"><font color="#0000ff">varchar</font></font><font color="#808080"><font color="#808080">(</font></font>500<font color="#808080"><font color="#808080">)</font></font> </font></h1>             </blockquote>              <h1><font size="1" face="Courier New">)</font></h1>             <font color="#0000ff"><font color="#0000ff">                 <blockquote>                   <h1><font size="1" face="Courier New">RETURNS</font></h1>                 </blockquote>                 <font color="#0000ff"><font color="#0000ff"><font color="#000000"></font></font>                    <h1><font size="1" face="Courier New">@ReturnList <font color="#0000ff"><font color="#0000ff">TABLE</font></font>                         <br /></font></h1>                   <font color="#808080"><font color="#808080" size="1" face="Courier New">(</font></font></font></font></font>              <blockquote>               <h1><font color="#008000"><font color="#008000"><font size="1" face="Courier New">-- Add the column definitions for the TABLE variable here</font></font></font></h1>                <h1><font size="1"><font face="Courier New">EmployeeId <font color="#0000ff"><font color="#0000ff">int</font></font><font color="#808080"><font color="#808080">,</font></font></font></font></h1>                <h1><font size="1"><font face="Courier New">ManagerId <font color="#0000ff"><font color="#0000ff">int</font></font><font color="#808080"><font color="#808080">,</font></font></font></font></h1>                <h1><font color="#008000"><font color="#008000"><font size="1" face="Courier New">-- [Level] as int -- may also return level</font></font></font></h1>             </blockquote>             <font color="#808080"><font color="#808080" size="1" face="Courier New">                 <p>)</p>               </font></font><font color="#0000ff"><font color="#0000ff">                 <h1><font size="1" face="Courier New">AS</font></h1>                  <h1><font size="1" face="Courier New">BEGIN</font></h1>               </font></font>              <blockquote>               <h1><font color="#008000"><font color="#008000"><font size="1" face="Courier New">-- Fill the table variable with the rows for your result set</font></font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">With</font></font> EmployeeHierarchy </font></font></h1>               <font color="#0000ff"><font color="#0000ff">                   <h1><font color="#0000ff"><font color="#0000ff"></font><font color="#808080"><font color="#808080"><font size="1" face="Courier New">(</font></font></font></font><font size="1" face="Courier New"> </font></h1>                 </font></font>                <h1><font size="1" face="Courier New">[LastName]</font></h1>                <h1><font size="1"><font face="Courier New"><font color="#808080"><font color="#808080">,</font></font> EmployeeId</font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#808080"><font color="#808080">,</font></font> ManagerId</font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#808080"><font color="#808080">,</font></font> [Level]</font></font></h1>                <h1><font color="#808080"><font color="#808080"><font size="1" face="Courier New">)</font></font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">as</font></font> </font></font></h1>               <font color="#0000ff"><font color="#0000ff">                   <h1><font color="#0000ff"><font color="#0000ff"></font><font color="#808080"><font color="#808080"><font size="1" face="Courier New">(</font></font></font></font><font size="1" face="Courier New"> </font></h1>                 </font></font>                <h1><font color="#008000"><font color="#008000"><font size="1" face="Courier New">-- Anchor member definition </font></font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">SELECT</font></font> <font color="#0000ff"><font color="#0000ff">Distinct</font></font> ee<font color="#808080"><font color="#808080">.</font></font>[LastName]<font color="#808080"><font color="#808080">,</font></font> ee<font color="#808080"><font color="#808080">.</font></font>EmployeeId<font color="#808080"><font color="#808080">,</font></font> ManagerId<font color="#808080"><font color="#808080">,</font></font> 1 <font color="#0000ff"><font color="#0000ff">as</font></font> [Level]</font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">FROM</font></font> Employees <font color="#0000ff"><font color="#0000ff">as</font></font> ee </font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">WHERE</font></font> ee<font color="#808080"><font color="#808080">.</font></font>[LastName] <font color="#808080"><font color="#808080">like</font></font><font color="#0000ff"><font color="#0000ff"> </font></font><font color="#808080"><font color="#808080">(</font></font><font color="#ff0000"><font color="#ff0000">'%'</font></font><font color="#808080"><font color="#808080">+</font></font>@LastName<font color="#808080"><font color="#808080">+</font></font><font color="#ff0000"><font color="#ff0000">'%'</font></font><font color="#808080"><font color="#808080">)</font></font></font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">UNION</font></font> <font color="#808080"><font color="#808080">ALL</font></font> </font></font></h1>                <h1><font color="#008000"><font color="#008000"><font size="1" face="Courier New">-- Recursive member definition </font></font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">SELECT</font></font> ee<font color="#808080"><font color="#808080">.</font></font>[LastName]<font color="#808080"><font color="#808080">,</font></font> ee<font color="#808080"><font color="#808080">.</font></font>TypeModalityId<font color="#808080"><font color="#808080">,</font></font> ee<font color="#808080"><font color="#808080">.</font></font>ParentModalityId<font color="#808080"><font color="#808080">,</font></font> [Level] <font color="#808080"><font color="#808080">+</font></font> 1 <font color="#0000ff"><font color="#0000ff">as</font></font> [Level]</font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">FROM</font></font> EmployeeHierarchy <font color="#0000ff"><font color="#0000ff">as</font></font> eh <font color="#808080"><font color="#808080">inner</font></font> <font color="#808080"><font color="#808080">join</font></font> Employees ee </font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">on</font></font> eh<font color="#808080"><font color="#808080">.</font></font>TypeModalityId <font color="#808080"><font color="#808080">=</font></font> ee<font color="#808080"><font color="#808080">.</font></font>ParentModalityId </font></font></h1>                <h1><font color="#808080"><font color="#808080"><font size="1" face="Courier New">)</font></font></font></h1>                <h1><font color="#008000"><font color="#008000"><font size="1" face="Courier New">-- Statement that executes CTE </font></font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">INSERT</font></font> <font color="#0000ff"><font color="#0000ff">INTO</font></font> @ReturnList<font color="#808080"><font color="#808080">(</font></font>EmployeeId<font color="#808080"><font color="#808080">,</font></font> ManagerId<font color="#808080"><font color="#808080">)</font></font></font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">SELECT</font></font> <font color="#0000ff"><font color="#0000ff">DISTINCT</font></font> EmployeeId<font color="#808080"><font color="#808080">,</font></font> ManagerId</font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">FROM</font></font> EmployeeHierarchy </font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">ORDER</font></font> <font color="#0000ff"><font color="#0000ff">BY</font></font> [Level]<font color="#808080"><font color="#808080">,</font></font> ManagerId<font color="#808080"><font color="#808080">,</font></font> EmployeeId</font></font></h1>                <h1><font size="1"><font face="Courier New"><font color="#0000ff"><font color="#0000ff">RETURN</font></font> </font></font></h1>                <h1><font size="1" face="Courier New">END</font></h1>                <p></p>             </blockquote>           </td>         </tr>       </tbody></table>   </font></font>  <p>That is it. Very simple. Please let me know if you have questions! </p>  <p>&#160;</p>  <p></p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:5a285886-70bd-4816-95c5-89587d58d8a0" class="wlWriterEditableSmartContent">Technorati Tags: <a href="http://technorati.com/tags/CTE" rel="tag">CTE</a>,<a href="http://technorati.com/tags/Commong+Table+Expressions" rel="tag">Commong Table Expressions</a>,<a href="http://technorati.com/tags/T-SQL" rel="tag">T-SQL</a>,<a href="http://technorati.com/tags/Recursion" rel="tag">Recursion</a></div>  
]]>
		</document>
	</documents>
</author>
